[
    {
        "class_name": "org.mockitousage.ThreadReuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/ThreadReuseTest.java",
        "signature": "org.mockitousage.ThreadReuseTest.test1()",
        "snippet": "    @Test(timeout = 100)\n    public void test1() throws Exception {\n        when(mock.simpleMethod()).thenReturn(\"foo\");\n        assertNull(l.get());\n        l.set(getClass());\n    }",
        "begin_line": 23,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 52)",
            "(line 26,col 9)-(line 26,col 28)",
            "(line 27,col 9)-(line 27,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.ThreadReuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/ThreadReuseTest.java",
        "signature": "org.mockitousage.ThreadReuseTest.test2()",
        "snippet": "    @Test\n    public void test2() throws Exception {\n        System.out.println(mock.simpleMethod());\n        assertNull(l.get());\n        l.set(getClass());\n    }",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 48)",
            "(line 33,col 9)-(line 33,col 28)",
            "(line 34,col 9)-(line 34,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.ThreadReuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/ThreadReuseTest.java",
        "signature": "org.mockitousage.ThreadReuseTest.test3()",
        "snippet": "    @Test(timeout = 100)\n    public void test3() throws Exception {\n        doThrow(new RuntimeException()).when(mock).voidMethod();\n        assertNull(l.get());\n        l.set(getClass());\n    }",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 64)",
            "(line 40,col 9)-(line 40,col 28)",
            "(line 41,col 9)-(line 41,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.ThreadReuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/ThreadReuseTest.java",
        "signature": "org.mockitousage.ThreadReuseTest.test4()",
        "snippet": "    @Test(timeout = 100)\n    public void test4() throws Exception {\n        mock.voidMethod();\n        assertNull(l.get());\n        l.set(getClass());\n    }",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 26)",
            "(line 47,col 9)-(line 47,col 28)",
            "(line 48,col 9)-(line 48,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.booleanReturningMethod()",
        "snippet": "    boolean booleanReturningMethod();",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.booleanObjectReturningMethod()",
        "snippet": "    Boolean booleanObjectReturningMethod();",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.byteReturningMethod()",
        "snippet": "    byte byteReturningMethod();",
        "begin_line": 23,
        "end_line": 23,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.byteObjectReturningMethod()",
        "snippet": "    Byte byteObjectReturningMethod();",
        "begin_line": 25,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.shortReturningMethod()",
        "snippet": "    short shortReturningMethod();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.shortObjectReturningMethod()",
        "snippet": "    Short shortObjectReturningMethod();",
        "begin_line": 29,
        "end_line": 29,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.charReturningMethod()",
        "snippet": "    char charReturningMethod();",
        "begin_line": 31,
        "end_line": 31,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.charObjectReturningMethod()",
        "snippet": "    Character charObjectReturningMethod();",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.intReturningMethod()",
        "snippet": "    int intReturningMethod();",
        "begin_line": 35,
        "end_line": 35,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.integerReturningMethod()",
        "snippet": "    Integer integerReturningMethod();",
        "begin_line": 37,
        "end_line": 37,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.longReturningMethod()",
        "snippet": "    long longReturningMethod();",
        "begin_line": 39,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.longObjectReturningMethod()",
        "snippet": "    Long longObjectReturningMethod();",
        "begin_line": 41,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.floatReturningMethod()",
        "snippet": "    float floatReturningMethod();",
        "begin_line": 43,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.floatObjectReturningMethod()",
        "snippet": "    Float floatObjectReturningMethod();",
        "begin_line": 45,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.doubleReturningMethod()",
        "snippet": "    double doubleReturningMethod();",
        "begin_line": 47,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.doubleObjectReturningMethod()",
        "snippet": "    Double doubleObjectReturningMethod();",
        "begin_line": 49,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.objectReturningMethod(java.lang.Object...)",
        "snippet": "    Object objectReturningMethod(Object ... objects);",
        "begin_line": 51,
        "end_line": 51,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.objectReturningMethodNoArgs()",
        "snippet": "    Object objectReturningMethodNoArgs();",
        "begin_line": 53,
        "end_line": 53,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(boolean)",
        "snippet": "    String oneArg(boolean value);",
        "begin_line": 55,
        "end_line": 55,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Boolean)",
        "snippet": "    String oneArg(Boolean value);",
        "begin_line": 57,
        "end_line": 57,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forBoolean(java.lang.Boolean)",
        "snippet": "    String forBoolean(Boolean value);",
        "begin_line": 59,
        "end_line": 59,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(byte)",
        "snippet": "    String oneArg(byte value);",
        "begin_line": 61,
        "end_line": 61,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Byte)",
        "snippet": "    String oneArg(Byte value);",
        "begin_line": 63,
        "end_line": 63,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forByte(java.lang.Byte)",
        "snippet": "    String forByte(Byte value);",
        "begin_line": 65,
        "end_line": 65,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(short)",
        "snippet": "    String oneArg(short value);",
        "begin_line": 67,
        "end_line": 67,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Short)",
        "snippet": "    String oneArg(Short value);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forShort(java.lang.Short)",
        "snippet": "    String forShort(Short value);",
        "begin_line": 71,
        "end_line": 71,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(char)",
        "snippet": "    String oneArg(char value);",
        "begin_line": 73,
        "end_line": 73,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Character)",
        "snippet": "    String oneArg(Character value);",
        "begin_line": 75,
        "end_line": 75,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forCharacter(java.lang.Character)",
        "snippet": "    String forCharacter(Character value);",
        "begin_line": 77,
        "end_line": 77,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(int)",
        "snippet": "    String oneArg(int value);",
        "begin_line": 79,
        "end_line": 79,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Integer)",
        "snippet": "    String oneArg(Integer value);",
        "begin_line": 81,
        "end_line": 81,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forInteger(java.lang.Integer)",
        "snippet": "    String forInteger(Integer value);",
        "begin_line": 83,
        "end_line": 83,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(long)",
        "snippet": "    String oneArg(long value);",
        "begin_line": 85,
        "end_line": 85,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Long)",
        "snippet": "    String oneArg(Long value);",
        "begin_line": 87,
        "end_line": 87,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forLong(java.lang.Long)",
        "snippet": "    String forLong(Long value);",
        "begin_line": 89,
        "end_line": 89,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(float)",
        "snippet": "    String oneArg(float value);",
        "begin_line": 91,
        "end_line": 91,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Float)",
        "snippet": "    String oneArg(Float value);",
        "begin_line": 93,
        "end_line": 93,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forFloat(java.lang.Float)",
        "snippet": "    String forFloat(Float value);",
        "begin_line": 95,
        "end_line": 95,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(double)",
        "snippet": "    String oneArg(double value);",
        "begin_line": 97,
        "end_line": 97,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Double)",
        "snippet": "    String oneArg(Double value);",
        "begin_line": 99,
        "end_line": 99,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forDouble(java.lang.Double)",
        "snippet": "    String forDouble(Double value);",
        "begin_line": 101,
        "end_line": 101,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Object)",
        "snippet": "    String oneArg(Object value);",
        "begin_line": 103,
        "end_line": 103,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.String)",
        "snippet": "    String oneArg(String value);",
        "begin_line": 105,
        "end_line": 105,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.throwsNothing(boolean)",
        "snippet": "    String throwsNothing(boolean value);",
        "begin_line": 107,
        "end_line": 107,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.throwsIOException(int)",
        "snippet": "    String throwsIOException(int count) throws IOException;",
        "begin_line": 109,
        "end_line": 109,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.throwsError(int)",
        "snippet": "    String throwsError(int count);",
        "begin_line": 111,
        "end_line": 111,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod()",
        "snippet": "    String simpleMethod();",
        "begin_line": 113,
        "end_line": 113,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.differentMethod()",
        "snippet": "    String differentMethod();",
        "begin_line": 115,
        "end_line": 115,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.differentMethod(java.lang.String)",
        "snippet": "    String differentMethod(String argument);",
        "begin_line": 117,
        "end_line": 117,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.otherMethod()",
        "snippet": "    String otherMethod();",
        "begin_line": 119,
        "end_line": 119,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String)",
        "snippet": "    String simpleMethod(String argument);",
        "begin_line": 121,
        "end_line": 121,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.util.Collection<?>)",
        "snippet": "    String simpleMethod(Collection<?> collection);",
        "begin_line": 123,
        "end_line": 123,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.Object)",
        "snippet": "    String simpleMethod(Object argument);",
        "begin_line": 125,
        "end_line": 125,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(int)",
        "snippet": "    String simpleMethod(int argument);",
        "begin_line": 127,
        "end_line": 127,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String, java.lang.Integer)",
        "snippet": "    String simpleMethod(String argOne, Integer argTwo);",
        "begin_line": 129,
        "end_line": 129,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)",
        "snippet": "    String simpleMethod(String one, Integer two, Integer three, Integer four, Integer five);",
        "begin_line": 131,
        "end_line": 131,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String, java.lang.String[])",
        "snippet": "    String simpleMethod(String one, String[] two);",
        "begin_line": 133,
        "end_line": 133,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.threeArgumentMethod(int, java.lang.Object, java.lang.String)",
        "snippet": "    Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);",
        "begin_line": 135,
        "end_line": 135,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.twoArgumentMethod(int, int)",
        "snippet": "    void twoArgumentMethod(int one, int two);",
        "begin_line": 137,
        "end_line": 137,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.arrayMethod(java.lang.String[])",
        "snippet": "    void arrayMethod(String[] strings);",
        "begin_line": 139,
        "end_line": 139,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(boolean[])",
        "snippet": "    String oneArray(boolean[] array);",
        "begin_line": 141,
        "end_line": 141,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(byte[])",
        "snippet": "    String oneArray(byte[] array);",
        "begin_line": 143,
        "end_line": 143,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(char[])",
        "snippet": "    String oneArray(char[] array);",
        "begin_line": 145,
        "end_line": 145,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(double[])",
        "snippet": "    String oneArray(double[] array);",
        "begin_line": 147,
        "end_line": 147,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(float[])",
        "snippet": "    String oneArray(float[] array);",
        "begin_line": 149,
        "end_line": 149,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(int[])",
        "snippet": "    String oneArray(int[] array);",
        "begin_line": 151,
        "end_line": 151,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(long[])",
        "snippet": "    String oneArray(long[] array);",
        "begin_line": 153,
        "end_line": 153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(short[])",
        "snippet": "    String oneArray(short[] array);",
        "begin_line": 155,
        "end_line": 155,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(java.lang.Object[])",
        "snippet": "    String oneArray(Object[] array);",
        "begin_line": 157,
        "end_line": 157,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.canThrowException()",
        "snippet": "    String canThrowException() throws ChangedCharSetException, CharacterCodingException; ",
        "begin_line": 159,
        "end_line": 159,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(java.lang.String[])",
        "snippet": "    String oneArray(String[] array);",
        "begin_line": 161,
        "end_line": 161,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargsString(int, java.lang.String...)",
        "snippet": "    void varargsString(int i, String... string);",
        "begin_line": 163,
        "end_line": 163,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargsObject(int, java.lang.Object...)",
        "snippet": "    Object varargsObject(int i, Object... object);",
        "begin_line": 165,
        "end_line": 165,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargs(java.lang.Object...)",
        "snippet": "    void varargs(Object ... object);",
        "begin_line": 167,
        "end_line": 167,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargs(java.lang.String...)",
        "snippet": "    void varargs(String ... string);",
        "begin_line": 169,
        "end_line": 169,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.listReturningMethod(java.lang.Object...)",
        "snippet": "    List<String> listReturningMethod(Object ... objects);",
        "begin_line": 171,
        "end_line": 171,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.linkedListReturningMethod()",
        "snippet": "    LinkedList<String> linkedListReturningMethod();",
        "begin_line": 173,
        "end_line": 173,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.toString()",
        "snippet": "    String toString();",
        "begin_line": 175,
        "end_line": 175,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.toString(java.lang.String)",
        "snippet": "    String toString(String foo);",
        "begin_line": 177,
        "end_line": 177,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.voidMethod()",
        "snippet": "    void voidMethod();",
        "begin_line": 179,
        "end_line": 179,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forList(java.util.List<java.lang.String>)",
        "snippet": "    String forList(List<String> list);",
        "begin_line": 181,
        "end_line": 181,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forSet(java.util.Set<java.lang.String>)",
        "snippet": "    String forSet(Set<String> anySet);",
        "begin_line": 183,
        "end_line": 183,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forMap(java.util.Map<java.lang.String, java.lang.String>)",
        "snippet": "    String forMap(Map<String, String> map);",
        "begin_line": 185,
        "end_line": 185,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forCollection(java.util.Collection<java.lang.String>)",
        "snippet": "    String forCollection(Collection<String> collection);",
        "begin_line": 187,
        "end_line": 187,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.arrayReturningMethod()",
        "snippet": "    Object[] arrayReturningMethod();",
        "begin_line": 189,
        "end_line": 189,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.iMethodsReturningMethod()",
        "snippet": "    IMethods iMethodsReturningMethod();",
        "begin_line": 191,
        "end_line": 191,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.stringReturningMethod()",
        "snippet": "    String stringReturningMethod();",
        "begin_line": 193,
        "end_line": 193,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.objectArgMethod(java.lang.Object)",
        "snippet": "    Object objectArgMethod(Object str);",
        "begin_line": 195,
        "end_line": 195,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.listArgMethod(java.util.List<java.lang.String>)",
        "snippet": "    Object listArgMethod(List<String> list);",
        "begin_line": 197,
        "end_line": 197,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.collectionArgMethod(java.util.Collection<java.lang.String>)",
        "snippet": "    Object collectionArgMethod(Collection<String> collection);",
        "begin_line": 199,
        "end_line": 199,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.setArgMethod(java.util.Set<java.lang.String>)",
        "snippet": "    Object setArgMethod(Set<String> set);",
        "begin_line": 201,
        "end_line": 201,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.longArg(long)",
        "snippet": "    void longArg(long longArg);",
        "begin_line": 203,
        "end_line": 203,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.intArgumentMethod(int)",
        "snippet": "    void intArgumentMethod(int i);",
        "begin_line": 205,
        "end_line": 205,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Foo.doSomeThing()",
        "snippet": "        int doSomeThing() {\n            System.out.println(getStuff());\n            return 0;\n        }",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 18,col 13)-(line 18,col 43)",
            "(line 19,col 13)-(line 19,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Foo.getStuff()",
        "snippet": "        protected String getStuff() {\n            return \"foo\";\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Boo.withLong(long)",
        "snippet": "        public void withLong(long y) {\n            \n        }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.should()",
        "snippet": "    @Test\n    public void should() throws Exception {\n        Boo boo = mock(Boo.class);\n        boo.withLong(100);\n        \n        verify(boo).withLong(new Long(100));\n    }",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 26)",
            "(line 38,col 9)-(line 38,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.spyInAction()",
        "snippet": "    @Ignore\n    @Test\n    public void spyInAction() {\n        mock = spy(new Foo());\n// mock = spy(Foo.class, new Konstructor() {} );\n// mock = spy(Foo.class, Konstructor.guess());\n// mock = spy(Foo.class, Konstructor.withArguments(\"1\", \"2\"));\n        \n        when(mock.getStuff()).thenReturn(\"aha!\");\n        \n        mock.doSomeThing();\n    }",
        "begin_line": 44,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 30)",
            "(line 52,col 9)-(line 52,col 49)",
            "(line 54,col 9)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.partialMockInAction()",
        "snippet": "    @Test\n    public void partialMockInAction() {\n//        mock = mock(Foo.class, withSettings() \n//            .defaultBehavior(CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, withSettings() \n//            .defaultMockAnswer(CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, withSettings() \n//            .defaultAnswer(CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, withSettings() \n//            .defaultBehavior(CALLS_REAL_METHODS)\n//            .createUsingDefaultConstructor();\n//        \n//        mock = mock(Foo.class, withSettings() \n//            .defaultBehavior(CALLS_REAL_METHODS)\n//            .createPassingArguments(\"some arg\", 1);\n//\n//        spy = spy(Foo.class, \"some arg\", 1);\n//        \n//            .withName(\"foo\")\n//            .withDefaultBehavior(RETURNS_SMART_NULLS)\n//            .withInterfaces(Bar.class);\n//        \n//        mock = mock(Foo.class)\n//            .name(\"foo\")\n//            .defaultBehavior(RETURNS_SMART_NULLS)\n//            .interfaces(Bar.class);\n//        \n//        mock = mock(Foo.class)\n//            .named(\"foo\")\n//            .byDefault(RETURNS_SMART_NULLS)\n//            .alsoImplements(Bar.class, Bar2.class);\n//        \n//        mock = mock(Foo.class)\n//            hasName(\"foo\");\n        \n//        when(mock.getStuff()).thenReturn(\"aha!\");\n//        when(mock.doSomeThing()).thenCallRealMethod();\n//        \n//        mock.doSomeThing();\n    }",
        "begin_line": 57,
        "end_line": 101,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.internal.debugging.LocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/debugging/LocationTest.java",
        "signature": "org.mockitousage.internal.debugging.LocationTest.shouldLocationNotContainGetStackTraceMethod()",
        "snippet": "    @Test\n    public void shouldLocationNotContainGetStackTraceMethod() {\n        assertContains(\"shouldLocationNotContainGetStackTraceMethod\", new Location().toString());\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 97)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest.keepStackTracesClean()",
        "snippet": "    @Before\n    public void keepStackTracesClean() {\n        makeStackTracesClean();\n    }",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest.Foo.throwSomething()",
        "snippet": "        public String throwSomething() {\n            throw new RuntimeException();\n        }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 13)-(line 24,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest.shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows()",
        "snippet": "    @Test\n    public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {\n        //given\n        FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(new RealMethod() {\n            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().throwSomething();\n            }});\n        \n        //when\n        try {\n            realMethod.invoke(null, null);\n            fail();\n        //then\n        } catch (Exception e) {\n            assertThat(e, hasMethodInStackTraceAt(0, \"throwSomething\"));\n            assertThat(e, hasMethodInStackTraceAt(1, \"invoke\"));\n            assertThat(e, hasMethodInStackTraceAt(2, \"shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows\"));\n        }\n    }",
        "begin_line": 28,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 34,col 16)",
            "(line 37,col 9)-(line 45,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest.Anonymous-70c7a388-a8a0-454f-8e76-406bbd2c73f5.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().throwSomething();\n            }});",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 17)-(line 33,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.performance.LoadsOfMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/performance/LoadsOfMocksTest.java",
        "signature": "org.mockitousage.performance.LoadsOfMocksTest.testSomething()",
        "snippet": "    @Ignore(\"Use it for performance checks\")\n    @Test\n    public void testSomething() {\n        List mocks = new LinkedList();\n        for (int i = 0; i < 50000; i++) {\n            System.out.println(\"Mock no: \" + i);\n            IMethods mock = mock(IMethods.class);\n            mocks.add(mock);\n            \n            when(mock.simpleMethod(1)).thenReturn(\"one\");\n            when(mock.simpleMethod(2)).thenReturn(\"two\");\n            \n            assertEquals(\"one\", mock.simpleMethod(1));\n            assertEquals(\"two\", mock.simpleMethod(2));\n            \n            verify(mock).simpleMethod(1);\n            verify(mock).simpleMethod(2);\n        }\n    }",
        "begin_line": 20,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 38)",
            "(line 24,col 9)-(line 37,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.updateNumberOfArticles(java.lang.String, int)",
        "snippet": "    public void updateNumberOfArticles(String newspaper, int articles) {\n    }",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.updateNumberOfPolishArticles(java.lang.String, int)",
        "snippet": "    public void updateNumberOfPolishArticles(String newspaper, int polishArticles) {\n    }",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.updateNumberOfEnglishArticles(java.lang.String, int)",
        "snippet": "    public void updateNumberOfEnglishArticles(String newspaper, int i) {\n    }",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.getArticlesFor(java.lang.String)",
        "snippet": "    public List<Article> getArticlesFor(String string) {\n        return null;\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "save(Article)",
        "snippet": "    public void save(Article article) {\n    }",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "org.mockitousage.examples.use.ArticleCalculator.countArticles(java.lang.String)",
        "snippet": "    int countArticles(String newspaper);",
        "begin_line": 8,
        "end_line": 8,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "org.mockitousage.examples.use.ArticleCalculator.countArticlesInPolish(java.lang.String)",
        "snippet": "    int countArticlesInPolish(String newspaper);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "countNumberOfRelatedArticles(Article)",
        "snippet": "    int countNumberOfRelatedArticles(Article article);",
        "begin_line": 10,
        "end_line": 10,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "org.mockitousage.examples.use.ArticleCalculator.countAllArticles(java.lang.String...)",
        "snippet": "    int countAllArticles(String ... publications);",
        "begin_line": 11,
        "end_line": 11,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleManager",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleManager.java",
        "signature": "ArticleManager(ArticleCalculator, ArticleDatabase)",
        "snippet": "    public ArticleManager(ArticleCalculator calculator, ArticleDatabase database) {\n        this.calculator = calculator;\n        this.database = database;\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 37)",
            "(line 16,col 9)-(line 16,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleManager",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleManager.java",
        "signature": "org.mockitousage.examples.use.ArticleManager.updateArticleCounters(java.lang.String)",
        "snippet": "    public void updateArticleCounters(String newspaper) {\n        int articles = calculator.countArticles(newspaper);\n        int polishArticles = calculator.countArticlesInPolish(newspaper);\n        \n        database.updateNumberOfArticles(newspaper, articles);\n        database.updateNumberOfPolishArticles(newspaper, polishArticles);\n        database.updateNumberOfEnglishArticles(newspaper, articles - polishArticles);\n    }",
        "begin_line": 19,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 59)",
            "(line 21,col 9)-(line 21,col 73)",
            "(line 23,col 9)-(line 23,col 61)",
            "(line 24,col 9)-(line 24,col 73)",
            "(line 25,col 9)-(line 25,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleManager",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleManager.java",
        "signature": "org.mockitousage.examples.use.ArticleManager.updateRelatedArticlesCounters(java.lang.String)",
        "snippet": "    public void updateRelatedArticlesCounters(String newspaper) {\n        List<Article> articles = database.getArticlesFor(\"Guardian\");\n        for (Article article : articles) {\n            int numberOfRelatedArticles = calculator.countNumberOfRelatedArticles(article);\n            article.setNumberOfRelatedArticles(numberOfRelatedArticles);\n            database.save(article);\n        }\n    }",
        "begin_line": 28,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 69)",
            "(line 30,col 9)-(line 34,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        articleManager = new ArticleManager(mockCalculator, mockDatabase);\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerCountsArticlesAndSavesThemInTheDatabase()",
        "snippet": "    @Test\n    public void managerCountsArticlesAndSavesThemInTheDatabase() {\n        when(mockCalculator.countArticles(\"Guardian\")).thenReturn(12);\n        when(mockCalculator.countArticlesInPolish(anyString())).thenReturn(5);\n\n        articleManager.updateArticleCounters(\"Guardian\");\n        \n        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 12);\n        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 5);\n        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 7);\n    }",
        "begin_line": 32,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 70)",
            "(line 35,col 9)-(line 35,col 78)",
            "(line 37,col 9)-(line 37,col 57)",
            "(line 39,col 9)-(line 39,col 68)",
            "(line 40,col 9)-(line 40,col 73)",
            "(line 41,col 9)-(line 41,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerCountsArticlesUsingCalculator()",
        "snippet": "    @Test\n    public void managerCountsArticlesUsingCalculator() {\n        articleManager.updateArticleCounters(\"Guardian\");\n\n        verify(mockCalculator).countArticles(\"Guardian\");\n        verify(mockCalculator).countArticlesInPolish(\"Guardian\");\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 57)",
            "(line 48,col 9)-(line 48,col 57)",
            "(line 49,col 9)-(line 49,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerSavesArticlesInTheDatabase()",
        "snippet": "    @Test\n    public void managerSavesArticlesInTheDatabase() {\n        articleManager.updateArticleCounters(\"Guardian\");\n\n        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 0);\n        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 0);\n        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 0);\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 57)",
            "(line 56,col 9)-(line 56,col 67)",
            "(line 57,col 9)-(line 57,col 73)",
            "(line 58,col 9)-(line 58,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerUpdatesNumberOfRelatedArticles()",
        "snippet": "    @Test\n    public void managerUpdatesNumberOfRelatedArticles() {\n        Article articleOne = new Article();\n        Article articleTwo = new Article();\n        Article articleThree = new Article();\n        \n        when(mockCalculator.countNumberOfRelatedArticles(articleOne)).thenReturn(1);\n        when(mockCalculator.countNumberOfRelatedArticles(articleTwo)).thenReturn(12);\n        when(mockCalculator.countNumberOfRelatedArticles(articleThree)).thenReturn(0);\n        \n        when(mockDatabase.getArticlesFor(\"Guardian\")).thenReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n        \n        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n\n        verify(mockDatabase).save(articleOne);\n        verify(mockDatabase).save(articleTwo);\n        verify(mockDatabase).save(articleThree);\n    }",
        "begin_line": 61,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 43)",
            "(line 64,col 9)-(line 64,col 43)",
            "(line 65,col 9)-(line 65,col 45)",
            "(line 67,col 9)-(line 67,col 84)",
            "(line 68,col 9)-(line 68,col 85)",
            "(line 69,col 9)-(line 69,col 86)",
            "(line 71,col 9)-(line 71,col 118)",
            "(line 73,col 9)-(line 73,col 65)",
            "(line 75,col 9)-(line 75,col 46)",
            "(line 76,col 9)-(line 76,col 46)",
            "(line 77,col 9)-(line 77,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.shouldPersistRecalculatedArticle()",
        "snippet": "    @Test\n    public void shouldPersistRecalculatedArticle() {\n        Article articleOne = new Article();\n        Article articleTwo = new Article();\n        \n        when(mockCalculator.countNumberOfRelatedArticles(articleOne)).thenReturn(1);\n        when(mockCalculator.countNumberOfRelatedArticles(articleTwo)).thenReturn(12);\n        \n        when(mockDatabase.getArticlesFor(\"Guardian\")).thenReturn(Arrays.asList(articleOne, articleTwo)); \n        \n        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n\n        InOrder inOrder = inOrder(mockDatabase, mockCalculator);\n        \n        inOrder.verify(mockCalculator).countNumberOfRelatedArticles((Article) anyObject());\n        inOrder.verify(mockDatabase, atLeastOnce()).save((Article) anyObject());\n    }",
        "begin_line": 80,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 43)",
            "(line 83,col 9)-(line 83,col 43)",
            "(line 85,col 9)-(line 85,col 84)",
            "(line 86,col 9)-(line 86,col 85)",
            "(line 88,col 9)-(line 88,col 104)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 92,col 9)-(line 92,col 64)",
            "(line 94,col 9)-(line 94,col 91)",
            "(line 95,col 9)-(line 95,col 80)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.Article",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/Article.java",
        "signature": "org.mockitousage.examples.use.Article.getNumberOfRelatedArticles()",
        "snippet": "    public int getNumberOfRelatedArticles() {\n        return numberOfRelatedArticles;\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.Article",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/Article.java",
        "signature": "org.mockitousage.examples.use.Article.setNumberOfRelatedArticles(int)",
        "snippet": "    public void setNumberOfRelatedArticles(int numberOfRelatedArticles) {\n        this.numberOfRelatedArticles = numberOfRelatedArticles;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldProvideMockyImplementationOfToString()",
        "snippet": "    @Test\n    public void shouldProvideMockyImplementationOfToString() {\n        DummyClass dummyClass = Mockito.mock(DummyClass.class);\n        assertEquals(\"Mock for DummyClass, hashCode: \" + dummyClass.hashCode(), dummyClass.toString());\n        DummyInterface dummyInterface = Mockito.mock(DummyInterface.class);\n        assertEquals(\"Mock for DummyInterface, hashCode: \" + dummyInterface.hashCode(), dummyInterface.toString());\n    }",
        "begin_line": 18,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 63)",
            "(line 21,col 9)-(line 21,col 103)",
            "(line 22,col 9)-(line 22,col 75)",
            "(line 23,col 9)-(line 23,col 115)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldReplaceObjectMethods()",
        "snippet": "    @Test\n    public void shouldReplaceObjectMethods() {}",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldReplaceObjectMethodsWhenOverridden()",
        "snippet": "    @Test\n    public void shouldReplaceObjectMethodsWhenOverridden() {}",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.ObjectMethodsOverridden.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            throw new RuntimeException(\"Should not be called. MethodInterceptorFilter provides implementation\");\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 112)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.ObjectMethodsOverridden.hashCode()",
        "snippet": "        public int hashCode() {\n            throw new RuntimeException(\"Should not be called. MethodInterceptorFilter provides implementation\");\n        }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 112)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.ObjectMethodsOverridden.toString()",
        "snippet": "        public String toString() {\n            throw new RuntimeException(\"Should not be called. MethodInterceptorFilter provides implementation\");\n        }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 112)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.shouldInitMocks()",
        "snippet": "    @Test\n    public void shouldInitMocks() throws Exception {\n        list.clear();\n        map.clear();\n        listTwo.clear();\n        \n        verify(list).clear();\n        verify(map).clear();\n        verify(listTwo).clear();\n    }",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 21)",
            "(line 45,col 9)-(line 45,col 20)",
            "(line 46,col 9)-(line 46,col 24)",
            "(line 48,col 9)-(line 48,col 29)",
            "(line 49,col 9)-(line 49,col 28)",
            "(line 50,col 9)-(line 50,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.shouldScreamWhenInitializingMocksForNullClass()",
        "snippet": "    @Test\n    public void shouldScreamWhenInitializingMocksForNullClass() throws Exception {\n        try {\n            MockitoAnnotations.initMocks(null);\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\",\n                    e.getMessage());\n        }\n    }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 61,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.shouldLookForAnnotatedMocksInSuperClasses()",
        "snippet": "    @Test\n    public void shouldLookForAnnotatedMocksInSuperClasses() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n        \n        assertNotNull(sub.getMock());\n        assertNotNull(sub.getBaseMock());\n        assertNotNull(sub.getSuperBaseMock());\n    }",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 28)",
            "(line 67,col 9)-(line 67,col 42)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 70,col 9)-(line 70,col 41)",
            "(line 71,col 9)-(line 71,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.SuperBase.getSuperBaseMock()",
        "snippet": "        public IMethods getSuperBaseMock() {\n            return mock;\n        }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 13)-(line 78,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.Base.getBaseMock()",
        "snippet": "        public IMethods getBaseMock() {\n            return mock;\n        }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 13)-(line 86,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/AnnotationsTest.java",
        "signature": "org.mockitousage.basicapi.AnnotationsTest.Sub.getMock()",
        "snippet": "        public IMethods getMock() {\n            return mock;\n        }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 13)-(line 94,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldCreateMockWhenConstructorIsPrivate()",
        "snippet": "    @Test\n    public void shouldCreateMockWhenConstructorIsPrivate() {\n        assertNotNull(Mockito.mock(HasPrivateConstructor.class));\n    }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldCombineMockNameAndSmartNulls()",
        "snippet": "    @Test\n    public void shouldCombineMockNameAndSmartNulls() {\n        //given\n        IMethods mock = mock(IMethods.class, withSettings()\n            .defaultAnswer(RETURNS_SMART_NULLS)\n            .name(\"great mockie\"));    \n        \n        //when\n        IMethods smartNull = mock.iMethodsReturningMethod();\n        String name = mock.toString();\n        \n        //then\n        assertContains(\"great mockie\", name);\n        //and\n        try {\n            smartNull.simpleMethod();\n            fail();\n        } catch(SmartNullPointerException e) {}\n    }",
        "begin_line": 27,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 32,col 35)",
            "(line 35,col 9)-(line 35,col 60)",
            "(line 36,col 9)-(line 36,col 38)",
            "(line 39,col 9)-(line 39,col 45)",
            "(line 41,col 9)-(line 44,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldCombineMockNameAndExtraInterfaces()",
        "snippet": "    @Test\n    public void shouldCombineMockNameAndExtraInterfaces() {}",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldSpecifyMockNameViaSettings()",
        "snippet": "    @Test\n    public void shouldSpecifyMockNameViaSettings() {\n        //given\n        IMethods mock = mock(IMethods.class, withSettings().name(\"great mockie\"));\n\n        //when\n        String name = mock.toString();\n        \n        //then\n        assertContains(\"great mockie\", name);\n    }",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 82)",
            "(line 72,col 9)-(line 72,col 38)",
            "(line 75,col 9)-(line 75,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withStringVarargs(int, java.lang.String...)",
        "snippet": "        void withStringVarargs(int value, String... s);",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withStringVarargsReturningString(int, java.lang.String...)",
        "snippet": "        String withStringVarargsReturningString(int value, String... s);",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withObjectVarargs(int, java.lang.Object...)",
        "snippet": "        void withObjectVarargs(int value, Object... o);",
        "begin_line": 23,
        "end_line": 23,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withBooleanVarargs(int, boolean...)",
        "snippet": "        boolean withBooleanVarargs(int value, boolean... b);",
        "begin_line": 24,
        "end_line": 24,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = Mockito.mock(IVarArgs.class);\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubStringVarargs()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void shouldStubStringVarargs() {\n        when(mock.withStringVarargsReturningString(1)).thenReturn(\"1\");\n        when(mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\")).thenReturn(\"2\");\n        \n        RuntimeException expected = new RuntimeException();\n        stubVoid(mock).toThrow(expected).on().withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n\n        assertEquals(\"1\", mock.withStringVarargsReturningString(1));\n        assertEquals(null, mock.withStringVarargsReturningString(2));\n        \n        assertEquals(\"2\", mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\"));\n        assertEquals(null, mock.withStringVarargsReturningString(2, \"1\", \"2\"));\n        assertEquals(null, mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\", \"4\"));\n        assertEquals(null, mock.withStringVarargsReturningString(2, \"1\", \"2\", \"9999\"));\n        \n        mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"9999\");\n        mock.withStringVarargs(9999, \"1\", \"2\", \"3\", \"4\");\n        \n        try {\n            mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n            fail();\n        } catch (Exception e) {\n            assertEquals(expected, e);\n        }\n    }",
        "begin_line": 34,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 71)",
            "(line 38,col 9)-(line 38,col 86)",
            "(line 40,col 9)-(line 40,col 59)",
            "(line 41,col 9)-(line 41,col 87)",
            "(line 43,col 9)-(line 43,col 68)",
            "(line 44,col 9)-(line 44,col 69)",
            "(line 46,col 9)-(line 46,col 83)",
            "(line 47,col 9)-(line 47,col 79)",
            "(line 48,col 9)-(line 48,col 89)",
            "(line 49,col 9)-(line 49,col 87)",
            "(line 51,col 9)-(line 51,col 57)",
            "(line 52,col 9)-(line 52,col 57)",
            "(line 54,col 9)-(line 59,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubBooleanVarargs()",
        "snippet": "    @Test\n    public void shouldStubBooleanVarargs() {\n        when(mock.withBooleanVarargs(1)).thenReturn(true);\n        when(mock.withBooleanVarargs(1, true, false)).thenReturn(true);\n        \n        assertEquals(true, mock.withBooleanVarargs(1));\n        assertEquals(false, mock.withBooleanVarargs(9999));\n        \n        assertEquals(true, mock.withBooleanVarargs(1, true, false));\n        assertEquals(false, mock.withBooleanVarargs(1, true, false, true));\n        assertEquals(false, mock.withBooleanVarargs(2, true, false));\n        assertEquals(false, mock.withBooleanVarargs(1, true));\n        assertEquals(false, mock.withBooleanVarargs(1, false, false));\n    }",
        "begin_line": 62,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 58)",
            "(line 65,col 9)-(line 65,col 71)",
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 59)",
            "(line 70,col 9)-(line 70,col 68)",
            "(line 71,col 9)-(line 71,col 75)",
            "(line 72,col 9)-(line 72,col 69)",
            "(line 73,col 9)-(line 73,col 62)",
            "(line 74,col 9)-(line 74,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyStringVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyStringVarargs() {\n        mock.withStringVarargs(1);\n        mock.withStringVarargs(2, \"1\", \"2\", \"3\");\n        mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n\n        verify(mock).withStringVarargs(1);\n        verify(mock).withStringVarargs(2, \"1\", \"2\", \"3\");\n        try {\n            verify(mock).withStringVarargs(2, \"1\", \"2\", \"79\", \"4\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n    }",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 34)",
            "(line 80,col 9)-(line 80,col 49)",
            "(line 81,col 9)-(line 81,col 54)",
            "(line 83,col 9)-(line 83,col 42)",
            "(line 84,col 9)-(line 84,col 57)",
            "(line 85,col 9)-(line 88,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyObjectVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyObjectVarargs() {\n        mock.withObjectVarargs(1);\n        mock.withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n        mock.withObjectVarargs(3, new Integer(1));\n\n        verify(mock).withObjectVarargs(1);\n        verify(mock).withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 50)",
            "(line 97,col 9)-(line 97,col 42)",
            "(line 98,col 9)-(line 98,col 88)",
            "(line 99,col 9)-(line 102,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyBooleanVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyBooleanVarargs() {\n        mock.withBooleanVarargs(1);\n        mock.withBooleanVarargs(2, true, false, true);\n        mock.withBooleanVarargs(3, true, true, true);\n\n        verify(mock).withBooleanVarargs(1);\n        verify(mock).withBooleanVarargs(2, true, false, true);\n        try {\n            verify(mock).withBooleanVarargs(3, true, true, true, true);\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n    }",
        "begin_line": 105,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 35)",
            "(line 108,col 9)-(line 108,col 54)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 62)",
            "(line 113,col 9)-(line 116,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithAnyObject()",
        "snippet": "    @Test\n    public void shouldVerifyWithAnyObject() {\n        Foo foo = Mockito.mock(Foo.class);\n        foo.varArgs(\"\");        \n        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n        Mockito.verify(foo).varArgs((String) Mockito.anyObject());\n    }   ",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 42)",
            "(line 122,col 9)-(line 122,col 24)",
            "(line 123,col 9)-(line 123,col 68)",
            "(line 124,col 9)-(line 124,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithNullVarArgArray()",
        "snippet": "    @Test\n    public void shouldVerifyWithNullVarArgArray() {\n        Foo foo = Mockito.mock(Foo.class);\n        foo.varArgs((String[]) null);    \n        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n        Mockito.verify(foo).varArgs((String[]) null);\n    }  ",
        "begin_line": 127,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 37)",
            "(line 131,col 9)-(line 131,col 68)",
            "(line 132,col 9)-(line 132,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.Foo.varArgs(java.lang.String...)",
        "snippet": "        public void varArgs(String... args) {}       ",
        "begin_line": 136,
        "end_line": 136,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.MixedVarargs.doSomething(java.lang.String, java.lang.String...)",
        "snippet": "        String doSomething(String one, String... varargs);",
        "begin_line": 140,
        "end_line": 140,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.MixedVarargs.doSomething(java.lang.String, java.lang.String, java.lang.String...)",
        "snippet": "        String doSomething(String one, String two, String... varargs);",
        "begin_line": 141,
        "end_line": 141,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubCorrectlyWhenMixedVarargsUsed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    //See bug #31\n    public void shouldStubCorrectlyWhenMixedVarargsUsed() {\n        MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n        when(mixedVarargs.doSomething(\"hello\", null)).thenReturn(\"hello\");\n        when(mixedVarargs.doSomething(\"goodbye\", null)).thenReturn(\"goodbye\");\n\n        String result = mixedVarargs.doSomething(\"hello\", null);\n        assertEquals(\"hello\", result);\n        \n        verify(mixedVarargs).doSomething(\"hello\", null);\n    }",
        "begin_line": 144,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 61)",
            "(line 149,col 9)-(line 149,col 74)",
            "(line 150,col 9)-(line 150,col 78)",
            "(line 152,col 9)-(line 152,col 64)",
            "(line 153,col 9)-(line 153,col 38)",
            "(line 155,col 9)-(line 155,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed() {\n        MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n        when(mixedVarargs.doSomething(\"one\", \"two\", null)).thenReturn(\"hello\");\n        when(mixedVarargs.doSomething(\"1\", \"2\", null)).thenReturn(\"goodbye\");\n\n        String result = mixedVarargs.doSomething(\"one\", \"two\", null);\n        assertEquals(\"hello\", result);\n    }",
        "begin_line": 158,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 61)",
            "(line 162,col 9)-(line 162,col 79)",
            "(line 163,col 9)-(line 163,col 77)",
            "(line 165,col 9)-(line 165,col 69)",
            "(line 166,col 9)-(line 166,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldAllowMultipleInterfaces()",
        "snippet": "    @Test\n    public void shouldAllowMultipleInterfaces() {}",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNullPassedInsteadOfAnInterface()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassedInsteadOfAnInterface() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces(IFoo.class, null));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"extraInterfaces() does not accept null parameters\", e.getMessage());\n        }\n    }",
        "begin_line": 34,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNoArgsPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNoArgsPassed() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces());\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"extraInterfaces() requires at least one interface\", e.getMessage());\n        }\n    }",
        "begin_line": 46,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 55,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNullPassedInsteadOfAnArray()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassedInsteadOfAnArray() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces((Class[]) null));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"extraInterfaces() requires at least one interface\", e.getMessage());\n        }\n    }",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 67,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNonInterfacePassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNonInterfacePassed() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces(Foo.class));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"Foo which is not an interface\", e.getMessage());\n        }\n    }",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 79,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenTheSameInterfacesPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenTheSameInterfacesPassed() {\n        try {\n            //when\n            mock(IMethods.class, withSettings().extraInterfaces(IMethods.class));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"You mocked following type: IMethods\", e.getMessage());\n        }\n    }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldResetOngoingStubbingSoThatMoreMeaningfulExceptionsAreRaised()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingSoThatMoreMeaningfulExceptionsAreRaised() {\n        mock(IMethods.class);\n        mock.booleanReturningMethod();\n        reset(mock);\n        try {\n            when(null).thenReturn(\"anything\");\n            fail();\n        } catch (MissingMethodInvocationException e) {\n        }\n    }",
        "begin_line": 22,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 29)",
            "(line 25,col 9)-(line 25,col 38)",
            "(line 26,col 9)-(line 26,col 20)",
            "(line 27,col 9)-(line 31,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldRemoveAllStubbing()",
        "snippet": "    @Test\n    public void shouldRemoveAllStubbing() throws Exception {\n        when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);\n        when(mock.objectReturningMethod(200)).thenReturn(200);\n        reset(mock);\n        assertNull(mock.objectReturningMethod(200));\n        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n    }",
        "begin_line": 34,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 77)",
            "(line 37,col 9)-(line 37,col 62)",
            "(line 38,col 9)-(line 38,col 20)",
            "(line 39,col 9)-(line 39,col 52)",
            "(line 40,col 9)-(line 40,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldRemoveAllInteractions()",
        "snippet": "    @Test\n    public void shouldRemoveAllInteractions() throws Exception {\n        mock.simpleMethod(1);\n        reset(mock);\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 29)",
            "(line 46,col 9)-(line 46,col 20)",
            "(line 47,col 9)-(line 47,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldRemoveStubbingToString()",
        "snippet": "    @Test\n    public void shouldRemoveStubbingToString() throws Exception {\n        IMethods mockTwo = mock(IMethods.class);\n        when(mockTwo.toString()).thenReturn(\"test\");\n        reset(mockTwo);\n        assertContains(\"Mock for IMethods\", mockTwo.toString());\n    }",
        "begin_line": 50,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 52)",
            "(line 54,col 9)-(line 54,col 23)",
            "(line 55,col 9)-(line 55,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldStubbingNotBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingNotBeTreatedAsInteraction() {\n        when(mock.simpleMethod(\"one\")).thenThrow(new RuntimeException());\n        doThrow(new RuntimeException()).when(mock).simpleMethod(\"two\");\n        reset(mock);\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 58,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 73)",
            "(line 61,col 9)-(line 61,col 71)",
            "(line 62,col 9)-(line 62,col 20)",
            "(line 63,col 9)-(line 63,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldNotAffectMockName()",
        "snippet": "    @Test\n    public void shouldNotAffectMockName() {\n        IMethods mock = mock(IMethods.class, \"mockie\");\n        IMethods mockTwo = mock(IMethods.class);\n        reset(mock);\n        assertContains(\"Mock for IMethods\", \"\" + mockTwo);\n        assertEquals(\"mockie\", \"\" + mock);\n    }",
        "begin_line": 66,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 55)",
            "(line 69,col 9)-(line 69,col 48)",
            "(line 70,col 9)-(line 70,col 20)",
            "(line 71,col 9)-(line 71,col 58)",
            "(line 72,col 9)-(line 72,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldResetMultipleMocks()",
        "snippet": "    @Test\n    public void shouldResetMultipleMocks() {\n        mock.simpleMethod();\n        mockTwo.simpleMethod();\n        reset(mock, mockTwo);\n        verifyNoMoreInteractions(mock, mockTwo);\n    }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 28)",
            "(line 78,col 9)-(line 78,col 31)",
            "(line 79,col 9)-(line 79,col 29)",
            "(line 80,col 9)-(line 80,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldValidateStateWhenResetting()",
        "snippet": "    @Test\n    public void shouldValidateStateWhenResetting() {\n        //invalid verify:\n        verify(mock);\n        \n        try {\n            reset(mockTwo);\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 21)",
            "(line 88,col 9)-(line 91,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldMaintainPreviousDefaultAnswer()",
        "snippet": "    @Test\n    public void shouldMaintainPreviousDefaultAnswer() {\n        //given\n        mock = mock(IMethods.class, RETURNS_MOCKS);\n        //when\n        reset(mock);\n        //then\n        assertNotNull(mock.iMethodsReturningMethod());\n    }",
        "begin_line": 94,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 51)",
            "(line 99,col 9)-(line 99,col 20)",
            "(line 101,col 9)-(line 101,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Boo.withLong(long)",
        "snippet": "        public void withLong(long x) {\n        }",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Boo.withLongAndInt(long, int)",
        "snippet": "        public void withLongAndInt(long x, int y) {\n        }",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotReportArgumentTypesWhenToStringIsTheSame()",
        "snippet": "    @Test\n    public void shouldNotReportArgumentTypesWhenToStringIsTheSame() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLong(100);\n        \n        try {\n            //when\n            verify(boo).withLong(eq(100));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLong((Integer) 100);\", e.getMessage());\n            assertContains(\"withLong((Long) 100);\", e.getMessage());\n        }\n    }",
        "begin_line": 25,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 34)",
            "(line 29,col 9)-(line 29,col 26)",
            "(line 31,col 9)-(line 39,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch()",
        "snippet": "    @Test\n    public void shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLongAndInt(100, 200);\n        \n        try {\n            //when\n            verify(boo).withLongAndInt(eq(100), eq(200));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLongAndInt((Integer) 100, 200)\", e.getMessage());\n            assertContains(\"withLongAndInt((Long) 100, 200)\", e.getMessage());\n        }\n    }",
        "begin_line": 42,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 34)",
            "(line 46,col 9)-(line 46,col 37)",
            "(line 48,col 9)-(line 56,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent()",
        "snippet": "    @Test\n    public void shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLongAndInt(100, 200);\n        \n        try {\n            //when\n            verify(boo).withLongAndInt(eq(100), anyInt());\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLongAndInt((Long) 100, 200)\", e.getMessage());\n            assertContains(\"withLongAndInt((Integer) 100, <any>)\", e.getMessage());\n        }\n    }",
        "begin_line": 59,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 34)",
            "(line 63,col 9)-(line 63,col 37)",
            "(line 65,col 9)-(line 73,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotShowTypesWhenArgumentValueIsDifferent()",
        "snippet": "    @Test\n    public void shouldNotShowTypesWhenArgumentValueIsDifferent() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLongAndInt(100, 200);\n        \n        try {\n            //when\n            verify(boo).withLongAndInt(eq(100L), eq(230));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLongAndInt(100, 200)\", e.getMessage());\n            assertContains(\"withLongAndInt(100, 230)\", e.getMessage());\n        }\n    }",
        "begin_line": 76,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 34)",
            "(line 80,col 9)-(line 80,col 37)",
            "(line 82,col 9)-(line 90,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.Foo(int)",
        "snippet": "        public Foo(int x) {\n            this.x = x;\n        }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 13)-(line 98,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj) {\n            return x == ((Foo) obj).x;\n        }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 13)-(line 102,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 13)-(line 106,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.toString()",
        "snippet": "        public String toString() {\n            return \"foo\";\n        }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 13)-(line 110,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult()",
        "snippet": "    @Test\n    public void shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult() throws Exception {\n        //given\n        IMethods mock = mock(IMethods.class);\n        mock.simpleMethod(new Foo(10));\n        \n        try {\n            //when\n            verify(mock).simpleMethod(new Foo(20));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"simpleMethod(foo)\", e.getMessage());\n        }\n    }",
        "begin_line": 114,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 45)",
            "(line 118,col 9)-(line 118,col 39)",
            "(line 120,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        one = Mockito.mock(IMethods.class);\n        two = Mockito.mock(IMethods.class);\n        three = Mockito.mock(IMethods.class);\n        \n        one.simpleMethod(1);\n        one.simpleMethod(11);\n        two.simpleMethod(2);\n        two.simpleMethod(2);\n        three.simpleMethod(3);\n        \n        inOrder = inOrder(one, two, three);\n    }",
        "begin_line": 28,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 43)",
            "(line 31,col 9)-(line 31,col 43)",
            "(line 32,col 9)-(line 32,col 45)",
            "(line 34,col 9)-(line 34,col 28)",
            "(line 35,col 9)-(line 35,col 29)",
            "(line 36,col 9)-(line 36,col 28)",
            "(line 37,col 9)-(line 37,col 28)",
            "(line 38,col 9)-(line 38,col 30)",
            "(line 40,col 9)-(line 40,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowBothWantedAndPrevious()",
        "snippet": "    @Test\n    public void shouldPrintVerificationInOrderErrorAndShowBothWantedAndPrevious() {\n        inOrder.verify(one).simpleMethod(1);\n        inOrder.verify(two, atLeastOnce()).simpleMethod(2);\n        \n        try {\n            inOrder.verify(one, atLeastOnce()).simpleMethod(11);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String expected = \n                    \"\\n\" +\n                    \"Verification in order failure\" +\n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(11);\" +\n                    \"\\n\" +\n                    \"-> at \"; \n            \n            assertContains(expected, e.getMessage());\n            \n            String expectedCause = \n                \"\\n\" +\n                \"Wanted anywhere AFTER following interaction:\" +\n                \"\\n\" +\n                \"iMethods.simpleMethod(2);\" +\n                \"\\n\" +\n                \"-> at \";\n            \n            assertContains(expectedCause, e.getMessage());\n        }\n    }  ",
        "begin_line": 43,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 44)",
            "(line 46,col 9)-(line 46,col 59)",
            "(line 48,col 9)-(line 73,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowWantedOnly()",
        "snippet": "    @Test\n    public void shouldPrintVerificationInOrderErrorAndShowWantedOnly() {\n        try {\n            inOrder.verify(one).differentMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            String expected = \n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.differentMethod();\" +\n                    \"\\n\" +\n                    \"-> at\"; \n            \n            assertContains(expected, e.getMessage());\n        }\n    } ",
        "begin_line": 76,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowWantedAndActual()",
        "snippet": "    @Ignore(\"i don't know how to implement it nicely... yet. See the enhancement 27\")\n    @Test\n    public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {\n        try {\n            inOrder.verify(one).simpleMethod(999);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            String expected = \n                    \"\\n\" +\n                    \"Arguments are different!\" +\n                    \"\\n\" +\n                    \"IMethods.simpleMethod(999);\"; \n            \n            assertEquals(expected, e.getMessage());\n            \n            assertEquals(null, e.getCause());\n        }\n    } ",
        "begin_line": 94,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintMethodThatWasNotInvoked()",
        "snippet": "    @Test\n    public void shouldPrintMethodThatWasNotInvoked() {\n        inOrder.verify(one).simpleMethod(1);\n        inOrder.verify(one).simpleMethod(11);\n        inOrder.verify(two, times(2)).simpleMethod(2);\n        inOrder.verify(three).simpleMethod(3);\n        try {\n            inOrder.verify(three).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage = \n                    \"\\n\" +\n                    \"Verification in order failure\" +\n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(999);\"; \n            assertContains(expectedMessage, actualMessage);     \n        }\n    }   ",
        "begin_line": 113,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 44)",
            "(line 116,col 9)-(line 116,col 45)",
            "(line 117,col 9)-(line 117,col 54)",
            "(line 118,col 9)-(line 118,col 46)",
            "(line 119,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintTooManyInvocations()",
        "snippet": "    @Test\n    public void shouldPrintTooManyInvocations() {\n        inOrder.verify(one).simpleMethod(1);\n        inOrder.verify(one).simpleMethod(11);\n        try {\n            inOrder.verify(two, times(1)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage = \n                    \"\\n\" +\n                    \"Verification in order failure:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(2);\" +\n                    \"\\n\" +\n                    \"Wanted 1 time:\" +\n                    \"\\n\" +\n                    \"-> at\"; \n            assertContains(expectedMessage, actualMessage);      \n\n            String expectedCause =\n                \"\\n\" +\n                \"But was 2 times. Undesired invocation:\" +\n                \"\\n\" +\n                \"-> at\";\n            assertContains(expectedCause, e.getMessage());\n        }\n    }  ",
        "begin_line": 135,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 44)",
            "(line 138,col 9)-(line 138,col 45)",
            "(line 139,col 9)-(line 161,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintTooLittleInvocations()",
        "snippet": "    @Test\n    public void shouldPrintTooLittleInvocations() {\n        two.simpleMethod(2);\n        \n        inOrder.verify(one, atLeastOnce()).simpleMethod(anyInt());\n        inOrder.verify(two, times(2)).simpleMethod(2);\n        inOrder.verify(three, atLeastOnce()).simpleMethod(3);\n        \n        try {\n            inOrder.verify(two, times(2)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage = \n                    \"\\n\" +\n                    \"Verification in order failure:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(2);\" +\n                    \"\\n\" +\n                    \"Wanted 2 times:\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedMessage, actualMessage);\n            \n            String expectedCause = \n                \"\\n\" +\n                \"But was 1 time:\" +\n                \"\\n\" +\n                \"-> at\";\n            \n            assertContains(expectedCause, e.getMessage());\n        }\n    }   ",
        "begin_line": 164,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 28)",
            "(line 168,col 9)-(line 168,col 66)",
            "(line 169,col 9)-(line 169,col 54)",
            "(line 170,col 9)-(line 170,col 61)",
            "(line 172,col 9)-(line 195,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest.shouldVerifyUsingMatchers()",
        "snippet": "    @Test\n    public void shouldVerifyUsingMatchers() throws Exception {\n        List list = Mockito.mock(List.class);\n        HashMap map = Mockito.mock(HashMap.class);\n        \n        list.add(\"test\");\n        list.add(1, \"test two\");\n        \n        map.put(\"test\", 100);\n        map.put(\"test two\", 200);\n        \n        verify(list).add(anyObject());\n        verify(list).add(anyInt(), eq(\"test two\"));\n        \n        verify(map, times(2)).put(anyObject(), anyObject());\n        verify(map).put(eq(\"test two\"), eq(200));\n        \n        verifyNoMoreInteractions(list, map);\n    }",
        "begin_line": 22,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 45)",
            "(line 25,col 9)-(line 25,col 50)",
            "(line 27,col 9)-(line 27,col 25)",
            "(line 28,col 9)-(line 28,col 32)",
            "(line 30,col 9)-(line 30,col 29)",
            "(line 31,col 9)-(line 31,col 33)",
            "(line 33,col 9)-(line 33,col 38)",
            "(line 34,col 9)-(line 34,col 51)",
            "(line 36,col 9)-(line 36,col 60)",
            "(line 37,col 9)-(line 37,col 49)",
            "(line 39,col 9)-(line 39,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest.shouldVerifyMultipleMocks()",
        "snippet": "    @Test\n    public void shouldVerifyMultipleMocks() throws Exception {\n        List list = mock(List.class);\n        Map map = mock(Map.class);\n        Set set = mock(Set.class);\n\n        list.add(\"one\");\n        list.add(\"one\");\n        list.add(\"two\");\n        \n        map.put(\"one\", 1);\n        map.put(\"one\", 1);\n        \n        verify(list, times(2)).add(\"one\");\n        verify(list, times(1)).add(\"two\");\n        verify(list, times(0)).add(\"three\");\n        \n        verify(map, times(2)).put(anyObject(), anyInt());\n        \n        verifyNoMoreInteractions(list, map);\n        verifyZeroInteractions(set);\n    }",
        "begin_line": 42,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 37)",
            "(line 45,col 9)-(line 45,col 34)",
            "(line 46,col 9)-(line 46,col 34)",
            "(line 48,col 9)-(line 48,col 24)",
            "(line 49,col 9)-(line 49,col 24)",
            "(line 50,col 9)-(line 50,col 24)",
            "(line 52,col 9)-(line 52,col 26)",
            "(line 53,col 9)-(line 53,col 26)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 44)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 61,col 9)-(line 61,col 44)",
            "(line 62,col 9)-(line 62,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldVerifyAtMostXTimes()",
        "snippet": "    @Test\n    public void shouldVerifyAtMostXTimes() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        verify(mock, atMost(2)).clear();\n        verify(mock, atMost(3)).clear();\n        \n        try {\n            verify(mock, atMost(1)).clear();\n            fail();\n        } catch (MockitoAssertionError e) {}\n    }",
        "begin_line": 25,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 21)",
            "(line 28,col 9)-(line 28,col 21)",
            "(line 30,col 9)-(line 30,col 40)",
            "(line 31,col 9)-(line 31,col 40)",
            "(line 33,col 9)-(line 36,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldWorkWithArgumentMatchers()",
        "snippet": "    @Test\n    public void shouldWorkWithArgumentMatchers() throws Exception {\n        mock.add(\"one\");\n        verify(mock, atMost(5)).add(anyString());\n        \n        try {\n            verify(mock, atMost(0)).add(anyString());\n            fail();\n        } catch (MockitoAssertionError e) {}\n    }",
        "begin_line": 39,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 24)",
            "(line 42,col 9)-(line 42,col 49)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldNotAllowNegativeNumber()",
        "snippet": "    @Test\n    public void shouldNotAllowNegativeNumber() throws Exception {\n        try {\n            verify(mock, atMost(-1)).clear();\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Negative value is not allowed here\", e.getMessage());\n        }\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldPrintDecentMessage()",
        "snippet": "    @Test\n    public void shouldPrintDecentMessage() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        try {\n            verify(mock, atMost(1)).clear();\n            fail();\n        } catch (MockitoAssertionError e) {\n            assertEquals(\"\\nWanted at most 1 time but was 2\", e.getMessage());\n        }\n    }",
        "begin_line": 60,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 21)",
            "(line 63,col 9)-(line 63,col 21)",
            "(line 65,col 9)-(line 70,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldNotAllowInOrderMode()",
        "snippet": "    @Test\n    public void shouldNotAllowInOrderMode() throws Exception {\n        mock.clear();\n        InOrder inOrder = inOrder(mock);\n        \n        try {\n            inOrder.verify(mock, atMost(1)).clear();\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"AtMost is not implemented to work with InOrder\", e.getMessage());\n        }\n    }",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 21)",
            "(line 76,col 9)-(line 76,col 40)",
            "(line 78,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldMarkInteractionsAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkInteractionsAsVerified() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        verify(mock, atMost(3)).clear();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 21)",
            "(line 89,col 9)-(line 89,col 21)",
            "(line 91,col 9)-(line 91,col 40)",
            "(line 92,col 9)-(line 92,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldDetectUnverifiedInMarkInteractionsAsVerified()",
        "snippet": "    @Test\n    public void shouldDetectUnverifiedInMarkInteractionsAsVerified() throws Exception {\n        mock.clear();\n        mock.clear();\n        undesiredInteraction();\n        \n        verify(mock, atMost(3)).clear();\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch(NoInteractionsWanted e) {\n            assertContains(\"undesiredInteraction(\", e.getMessage());\n        }\n    }",
        "begin_line": 95,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 21)",
            "(line 98,col 9)-(line 98,col 21)",
            "(line 99,col 9)-(line 99,col 31)",
            "(line 101,col 9)-(line 101,col 40)",
            "(line 102,col 9)-(line 107,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.undesiredInteraction()",
        "snippet": "    private void undesiredInteraction() {\n        mock.add(\"\");\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() throws Exception {\n        mock.clear();\n        verify(mock).clear();\n\n        mock.add(\"test\");\n        verify(mock).add(\"test\");\n\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 25,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 21)",
            "(line 28,col 9)-(line 28,col 29)",
            "(line 30,col 9)-(line 30,col 25)",
            "(line 31,col 9)-(line 31,col 33)",
            "(line 33,col 9)-(line 33,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldFailVerification()",
        "snippet": "    @Test(expected=WantedButNotInvoked.class)\n    public void shouldFailVerification() throws Exception {\n        verify(mock).clear();\n    }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldFailVerificationOnMethodArgument()",
        "snippet": "    @Test\n    public void shouldFailVerificationOnMethodArgument() throws Exception {\n        mock.clear();\n        mock.add(\"foo\");\n\n        verify(mock).clear();\n        try {\n            verify(mock).add(\"bar\");\n            fail();\n        } catch (AssertionError expected) {}\n    }",
        "begin_line": 41,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 21)",
            "(line 44,col 9)-(line 44,col 24)",
            "(line 46,col 9)-(line 46,col 29)",
            "(line 47,col 9)-(line 50,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldFailOnWrongMethod()",
        "snippet": "    @Test\n    public void shouldFailOnWrongMethod() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        mockTwo.add(\"add\");\n\n        verify(mock, atLeastOnce()).clear();\n        verify(mockTwo, atLeastOnce()).add(\"add\");\n        try {\n            verify(mockTwo, atLeastOnce()).add(\"foo\");\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 21)",
            "(line 56,col 9)-(line 56,col 21)",
            "(line 58,col 9)-(line 58,col 27)",
            "(line 60,col 9)-(line 60,col 44)",
            "(line 61,col 9)-(line 61,col 50)",
            "(line 62,col 9)-(line 65,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldDetectRedundantInvocation()",
        "snippet": "    @Test\n    public void shouldDetectRedundantInvocation() throws Exception {\n        mock.clear();\n        mock.add(\"foo\");\n        mock.add(\"bar\");\n\n        verify(mock).clear();\n        verify(mock).add(\"foo\");\n\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 68,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 21)",
            "(line 71,col 9)-(line 71,col 24)",
            "(line 72,col 9)-(line 72,col 24)",
            "(line 74,col 9)-(line 74,col 29)",
            "(line 75,col 9)-(line 75,col 32)",
            "(line 77,col 9)-(line 80,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldDetectWhenInvokedMoreThanOnce()",
        "snippet": "    @Test\n    public void shouldDetectWhenInvokedMoreThanOnce() throws Exception {\n        mock.add(\"foo\");\n        mock.clear();\n        mock.clear();\n        \n        verify(mock).add(\"foo\");\n\n        try {\n            verify(mock).clear();\n            fail();\n        } catch (TooManyActualInvocations e) {}\n    }",
        "begin_line": 83,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 24)",
            "(line 86,col 9)-(line 86,col 21)",
            "(line 87,col 9)-(line 87,col 21)",
            "(line 89,col 9)-(line 89,col 32)",
            "(line 91,col 9)-(line 94,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldVerifyStubbedMethods()",
        "snippet": "    @Test\n    public void shouldVerifyStubbedMethods() throws Exception {\n        when(mock.add(\"test\")).thenReturn(Boolean.FALSE);\n        \n        mock.add(\"test\");\n        \n        verify(mock).add(\"test\");\n    }",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 57)",
            "(line 101,col 9)-(line 101,col 25)",
            "(line 103,col 9)-(line 103,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldDetectWhenOverloadedMethodCalled()",
        "snippet": "    @Test\n    public void shouldDetectWhenOverloadedMethodCalled() throws Exception {\n        IMethods mockThree = mock(IMethods.class);\n        \n        mockThree.varargs((Object[]) new Object[] {});\n        try {\n            verify(mockThree).varargs((String[]) new String[] {});\n            fail();\n        } catch(WantedButNotInvoked e) {}\n    }",
        "begin_line": 107,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 50)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 115,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n\n        mockOne.simpleMethod(1);\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockThree.simpleMethod(4);\n\n        inOrder = inOrder(mockOne, mockThree);\n    }",
        "begin_line": 25,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 39)",
            "(line 28,col 9)-(line 28,col 39)",
            "(line 29,col 9)-(line 29,col 41)",
            "(line 31,col 9)-(line 31,col 32)",
            "(line 32,col 9)-(line 32,col 32)",
            "(line 33,col 9)-(line 33,col 32)",
            "(line 34,col 9)-(line 34,col 34)",
            "(line 35,col 9)-(line 35,col 34)",
            "(line 37,col 9)-(line 37,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldMixVerificationInOrderAndOrdinaryVerification()",
        "snippet": "    @Test\n    public void shouldMixVerificationInOrderAndOrdinaryVerification() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockThree).simpleMethod(4);\n        verify(mockTwo).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 63)",
            "(line 43,col 9)-(line 43,col 50)",
            "(line 44,col 9)-(line 44,col 50)",
            "(line 45,col 9)-(line 45,col 40)",
            "(line 47,col 9)-(line 47,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowOrdinarilyVerifyingMockPassedToInOrderObject()",
        "snippet": "    @Test\n    public void shouldAllowOrdinarilyVerifyingMockPassedToInOrderObject() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n\n        verify(mockThree).simpleMethod(3);\n        verify(mockThree).simpleMethod(4);\n        verify(mockTwo).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 63)",
            "(line 54,col 9)-(line 54,col 42)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 56,col 9)-(line 56,col 40)",
            "(line 58,col 9)-(line 58,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowRedundantVerifications()",
        "snippet": "    @Test\n    public void shouldAllowRedundantVerifications() {\n        verify(mockOne, atLeastOnce()).simpleMethod(1);\n        verify(mockTwo).simpleMethod(2);\n        verify(mockThree).simpleMethod(3);\n        verify(mockThree).simpleMethod(4);\n        \n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockThree).simpleMethod(4);\n        \n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 61,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 55)",
            "(line 64,col 9)-(line 64,col 40)",
            "(line 65,col 9)-(line 65,col 42)",
            "(line 66,col 9)-(line 66,col 42)",
            "(line 68,col 9)-(line 68,col 63)",
            "(line 69,col 9)-(line 69,col 50)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 72,col 9)-(line 72,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldFailOnNoMoreInteractions() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockThree).simpleMethod(4);\n        \n        try {\n            verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 75,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 63)",
            "(line 78,col 9)-(line 78,col 50)",
            "(line 79,col 9)-(line 79,col 50)",
            "(line 81,col 9)-(line 84,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnNoMoreInteractionsOnMockVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldFailOnNoMoreInteractionsOnMockVerifiedInOrder() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        verify(mockTwo).simpleMethod(2);\n        \n        try {\n            verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 87,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 63)",
            "(line 90,col 9)-(line 90,col 50)",
            "(line 91,col 9)-(line 91,col 40)",
            "(line 93,col 9)-(line 96,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowOneMethodVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldAllowOneMethodVerifiedInOrder() {\n        verify(mockTwo).simpleMethod(2);\n        verify(mockOne, atLeastOnce()).simpleMethod(1);\n\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n    }",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 40)",
            "(line 102,col 9)-(line 102,col 55)",
            "(line 104,col 9)-(line 104,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnLastInvocationTooEarly()",
        "snippet": "    @Test\n    public void shouldFailOnLastInvocationTooEarly() {\n        inOrder.verify(mockThree).simpleMethod(4);\n        \n        verify(mockThree).simpleMethod(4);\n        verify(mockTwo).simpleMethod(2);\n        \n        try {\n            inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 50)",
            "(line 111,col 9)-(line 111,col 42)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 114,col 9)-(line 117,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldScreamWhenUnfamiliarMockPassedToInOrderObject()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldScreamWhenUnfamiliarMockPassedToInOrderObject() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(1);\n    } ",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldUseEqualsToVerifyMethodArguments()",
        "snippet": "    @Test\n    public void shouldUseEqualsToVerifyMethodArguments() {\n        mockOne = mock(IMethods.class);\n        \n        String textOne = \"test\";\n        String textTwo = new String(textOne);\n        \n        assertEquals(textOne, textTwo);\n        assertNotSame(textOne, textTwo);\n        \n        mockOne.simpleMethod(textOne);\n        mockOne.simpleMethod(textTwo);\n        \n        verify(mockOne, times(2)).simpleMethod(textOne);\n        \n        inOrder = inOrder(mockOne);\n        inOrder.verify(mockOne, times(2)).simpleMethod(textOne);\n    } ",
        "begin_line": 125,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 39)",
            "(line 129,col 9)-(line 129,col 32)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 135,col 9)-(line 135,col 38)",
            "(line 136,col 9)-(line 136,col 38)",
            "(line 138,col 9)-(line 138,col 56)",
            "(line 140,col 9)-(line 140,col 35)",
            "(line 141,col 9)-(line 141,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldUseEqualsToVerifyMethodVarargs()",
        "snippet": "    @Test\n    public void shouldUseEqualsToVerifyMethodVarargs() {\n        mockOne = mock(IMethods.class);\n        \n        String textOne = \"test\";\n        String textTwo = new String(textOne);\n        \n        assertEquals(textOne, textTwo);\n        assertNotSame(textOne, textTwo);\n        \n        mockOne.varargsObject(1, textOne, textOne);\n        mockOne.varargsObject(1, textTwo, textTwo);\n        \n        verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n        \n        inOrder = inOrder(mockOne);\n        inOrder.verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n    } ",
        "begin_line": 144,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 39)",
            "(line 148,col 9)-(line 148,col 32)",
            "(line 149,col 9)-(line 149,col 45)",
            "(line 151,col 9)-(line 151,col 39)",
            "(line 152,col 9)-(line 152,col 40)",
            "(line 154,col 9)-(line 154,col 51)",
            "(line 155,col 9)-(line 155,col 51)",
            "(line 157,col 9)-(line 157,col 69)",
            "(line 159,col 9)-(line 159,col 35)",
            "(line 160,col 9)-(line 160,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(LinkedList.class);\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectTooLittleActualInvocations()",
        "snippet": "    @Test\n    public void shouldDetectTooLittleActualInvocations() throws Exception {\n        mock.clear();\n        mock.clear();\n\n        verify(mock, times(2)).clear();\n        try {\n            verify(mock, times(100)).clear();\n            fail();\n        } catch (TooLittleActualInvocations e) {\n            assertContains(\"Wanted 100 times\", e.getMessage());\n            assertContains(\"was 2\", e.getMessage());\n        }\n    }",
        "begin_line": 31,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 21)",
            "(line 34,col 9)-(line 34,col 21)",
            "(line 36,col 9)-(line 36,col 39)",
            "(line 37,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldDetectTooManyActualInvocations() throws Exception {\n        mock.clear();\n        mock.clear();\n\n        verify(mock, times(2)).clear();\n        try {\n            verify(mock, times(1)).clear();\n            fail();\n        } catch (TooManyActualInvocations e) {\n            assertContains(\"Wanted 1 time\", e.getMessage());\n            assertContains(\"was 2 times\", e.getMessage());\n        }\n    }",
        "begin_line": 46,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 21)",
            "(line 49,col 9)-(line 49,col 21)",
            "(line 51,col 9)-(line 51,col 39)",
            "(line 52,col 9)-(line 58,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectActualInvocationsCountIsMoreThanZero()",
        "snippet": "    @Test\n    public void shouldDetectActualInvocationsCountIsMoreThanZero() throws Exception {\n        verify(mock, times(0)).clear();\n        try {\n            verify(mock, times(15)).clear();\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 61,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 39)",
            "(line 64,col 9)-(line 67,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectActuallyCalledOnce()",
        "snippet": "    @Test\n    public void shouldDetectActuallyCalledOnce() throws Exception {\n        mock.clear();\n\n        try {\n            verify(mock, times(0)).clear();\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertContains(\"Never wanted here\", e.getMessage());\n        }\n    }",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 21)",
            "(line 74,col 9)-(line 79,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldPassWhenMethodsActuallyNotCalled()",
        "snippet": "    @Test\n    public void shouldPassWhenMethodsActuallyNotCalled() throws Exception {\n        verify(mock, times(0)).clear();\n        verify(mock, times(0)).add(\"yes, I wasn't called\");\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 39)",
            "(line 85,col 9)-(line 85,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldNotCountInStubbedInvocations()",
        "snippet": "    @Test\n    public void shouldNotCountInStubbedInvocations() throws Exception {\n        when(mock.add(\"test\")).thenReturn(false);\n        when(mock.add(\"test\")).thenReturn(true);\n\n        mock.add(\"test\");\n        mock.add(\"test\");\n\n        verify(mock, times(2)).add(\"test\");\n    }",
        "begin_line": 88,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 93,col 9)-(line 93,col 25)",
            "(line 94,col 9)-(line 94,col 25)",
            "(line 96,col 9)-(line 96,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldAllowVerifyingInteractionNeverHappened()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInteractionNeverHappened() throws Exception {\n        mock.add(\"one\");\n\n        verify(mock, never()).add(\"two\");\n        verify(mock, never()).clear();\n        \n        try {\n            verify(mock, never()).add(\"one\");\n            fail();\n        } catch (NeverWantedButInvoked e) {}\n    }",
        "begin_line": 99,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 24)",
            "(line 103,col 9)-(line 103,col 41)",
            "(line 104,col 9)-(line 104,col 38)",
            "(line 106,col 9)-(line 109,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldAllowVerifyingInteractionNeverHappenedInOrder()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInteractionNeverHappenedInOrder() throws Exception {\n        mock.add(\"one\");\n        mock.add(\"two\");\n\n        InOrder inOrder = inOrder(mock);\n        \n        inOrder.verify(mock, never()).add(\"xxx\");\n        inOrder.verify(mock).add(\"one\");\n        inOrder.verify(mock, never()).add(\"one\");\n        \n        try {\n            inOrder.verify(mock, never()).add(\"two\");\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 112,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 24)",
            "(line 115,col 9)-(line 115,col 24)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 119,col 9)-(line 119,col 49)",
            "(line 120,col 9)-(line 120,col 40)",
            "(line 121,col 9)-(line 121,col 49)",
            "(line 123,col 9)-(line 126,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(LinkedList.class);\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldStubbingNotRegisterRedundantInteractions()",
        "snippet": "    @Test\n    public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {\n        when(mock.add(\"one\")).thenReturn(true);\n        when(mock.add(\"two\")).thenReturn(true);\n\n        mock.add(\"one\");\n        \n        verify(mock).add(\"one\");\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 29,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 47)",
            "(line 32,col 9)-(line 32,col 47)",
            "(line 34,col 9)-(line 34,col 24)",
            "(line 36,col 9)-(line 36,col 32)",
            "(line 37,col 9)-(line 37,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyWhenWantedNumberOfInvocationsUsed()",
        "snippet": "    @Test\n    public void shouldVerifyWhenWantedNumberOfInvocationsUsed() throws Exception {\n        mock.add(\"one\");\n        mock.add(\"one\");\n        mock.add(\"one\");\n        \n        verify(mock, times(3)).add(\"one\");\n        \n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 24)",
            "(line 43,col 9)-(line 43,col 24)",
            "(line 44,col 9)-(line 44,col 24)",
            "(line 46,col 9)-(line 46,col 42)",
            "(line 48,col 9)-(line 48,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyNoInteractionsAsManyTimesAsYouWant()",
        "snippet": "    @Test\n    public void shouldVerifyNoInteractionsAsManyTimesAsYouWant() throws Exception {\n        verifyNoMoreInteractions(mock);\n        verifyNoMoreInteractions(mock);\n        \n        verifyZeroInteractions(mock);\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 39)",
            "(line 54,col 9)-(line 54,col 39)",
            "(line 56,col 9)-(line 56,col 37)",
            "(line 57,col 9)-(line 57,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldFailZeroInteractionsVerification()",
        "snippet": "    @Test\n    public void shouldFailZeroInteractionsVerification() throws Exception {\n        mock.clear();\n        \n        try {\n            verifyZeroInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 21)",
            "(line 64,col 9)-(line 67,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldFailNoMoreInteractionsVerification()",
        "snippet": "    @Test\n    public void shouldFailNoMoreInteractionsVerification() throws Exception {\n        mock.clear();\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 70,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 21)",
            "(line 74,col 9)-(line 77,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyOneMockButFailOnOther()",
        "snippet": "    @Test\n    public void shouldVerifyOneMockButFailOnOther() throws Exception {\n        List list = mock(List.class);\n        Map map = mock(Map.class);\n\n        list.add(\"one\");\n        list.add(\"one\");\n        \n        map.put(\"one\", 1);\n        \n        verify(list, times(2)).add(\"one\");\n        \n        verifyNoMoreInteractions(list);\n        try {\n            verifyZeroInteractions(map);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 37)",
            "(line 83,col 9)-(line 83,col 34)",
            "(line 85,col 9)-(line 85,col 24)",
            "(line 86,col 9)-(line 86,col 24)",
            "(line 88,col 9)-(line 88,col 26)",
            "(line 90,col 9)-(line 90,col 42)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 96,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.verifyNoMoreInteractionsShouldScreamWhenNullPassed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void verifyNoMoreInteractionsShouldScreamWhenNullPassed() throws Exception {\n        verifyNoMoreInteractions(null);\n    }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodName()",
        "snippet": "    @Test\n    public void shouldPrintMethodName() {\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage =\n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod();\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedMessage, actualMessage);\n        }\n    }",
        "begin_line": 31,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 46,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.Foo.toString()",
        "snippet": "        public String toString() {\n            return \"foo\";\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodNameAndArguments()",
        "snippet": "    @Test\n    public void shouldPrintMethodNameAndArguments() {\n        try {\n            verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"iMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\", e.getMessage());\n        }\n    }",
        "begin_line": 55,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 62,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndWantedInLine()",
        "snippet": "    @Test\n    public void shouldPrintActualAndWantedInLine() {\n        mock.varargs(1, 2);\n\n        try {\n            verify(mock).varargs(1, 1000);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            String wanted =\n                    \"\\n\" +\n                    \"Argument(s) are different! Wanted:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(1, 1000);\";\n\n            assertContains(wanted, e.getMessage());\n            \n            String actual = \n                    \"\\n\" +\n                    \"Actual invocation has different arguments:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(1, 2);\";\n\n            assertContains(actual, e.getMessage());\n        }\n    }",
        "begin_line": 65,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 27)",
            "(line 69,col 9)-(line 88,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndWantedInMultipleLines()",
        "snippet": "    @Test\n    public void shouldPrintActualAndWantedInMultipleLines() {\n        mock.varargs(\"this is very long string\", \"this is another very long string\");\n\n        try {\n            verify(mock).varargs(\"x\", \"y\", \"z\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            String wanted =\n                    \"\\n\" +\n                    \"Argument(s) are different! Wanted:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(\" +\n                    \"\\n\" +\n                    \"    \\\"x\\\",\" +\n                    \"\\n\" +\n                    \"    \\\"y\\\",\" +\n                    \"\\n\" +\n                    \"    \\\"z\\\"\" +\n                    \"\\n\" +\n                    \");\";\n\n            assertContains(wanted, e.getMessage());\n\n            String actual =\n                    \"\\n\" +\n                    \"Actual invocation has different arguments:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(\" +\n                    \"\\n\" +\n                    \"    \\\"this is very long string\\\",\" +\n                    \"\\n\" +\n                    \"    \\\"this is another very long string\\\"\" +\n                    \"\\n\" +\n                    \");\";\n\n            assertContains(actual, e.getMessage());\n        }\n    }",
        "begin_line": 91,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 85)",
            "(line 95,col 9)-(line 128,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndWantedWhenActualMethodNameAndWantedMethodNameAreTheSame()",
        "snippet": "    @Test\n    public void shouldPrintActualAndWantedWhenActualMethodNameAndWantedMethodNameAreTheSame() {\n        mock.simpleMethod();\n\n        try {\n            verify(mock).simpleMethod(10);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"simpleMethod(10)\", e.getMessage());\n            assertContains(\"simpleMethod()\", e.getMessage());\n        }\n    }",
        "begin_line": 131,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 28)",
            "(line 135,col 9)-(line 141,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndUnverifiedWantedWhenTheDifferenceIsAboutArguments()",
        "snippet": "    @Test\n    public void shouldPrintActualAndUnverifiedWantedWhenTheDifferenceIsAboutArguments() {\n        mock.twoArgumentMethod(1, 1);\n        mock.twoArgumentMethod(2, 2);\n\n        verify(mock).twoArgumentMethod(1, 1);\n        try {\n            verify(mock).twoArgumentMethod(2, 1000);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"(2, 1000)\", e.getMessage());\n            assertContains(\"(2, 2)\", e.getMessage());\n        }\n    }",
        "begin_line": 144,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 37)",
            "(line 149,col 9)-(line 149,col 45)",
            "(line 150,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintFirstUnexpectedInvocation()",
        "snippet": "    @Test\n    public void shouldPrintFirstUnexpectedInvocation() {\n        mock.oneArg(true);\n        mock.oneArg(false);\n        mock.threeArgumentMethod(1, \"2\", \"3\");\n\n        verify(mock).oneArg(true);\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            String expectedMessage =\n                    \"\\n\" +\n                    \"No interactions wanted here:\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedMessage, e.getMessage());\n\n            String expectedCause =\n                    \"\\n\" +\n                    \"But found this interaction:\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedCause, e.getMessage());\n        }\n    }",
        "begin_line": 159,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 26)",
            "(line 162,col 9)-(line 162,col 27)",
            "(line 163,col 9)-(line 163,col 46)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 183,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions()",
        "snippet": "    @Test\n    public void shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions() {\n        mock.twoArgumentMethod(1, 2);\n        mock.threeArgumentMethod(1, \"2\", \"3\");\n\n        try {\n            verifyZeroInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            String expected =\n                    \"\\n\" +\n                    \"No interactions wanted here:\" +\n                    \"\\n\" +\n                    \"-> at\";\n\n            assertContains(expected, e.getMessage());\n\n            String expectedCause =\n                \"\\n\" +\n                \"But found this interaction:\" +\n                \"\\n\" +\n                \"-> at\";\n\n            assertContains(expectedCause, e.getMessage());\n        }\n    }",
        "begin_line": 186,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 37)",
            "(line 189,col 9)-(line 189,col 46)",
            "(line 191,col 9)-(line 210,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodNameWhenVerifyingAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldPrintMethodNameWhenVerifyingAtLeastOnce() throws Exception {\n        try {\n            verify(mock, atLeastOnce()).twoArgumentMethod(1, 2);\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"twoArgumentMethod(1, 2)\", e.getMessage());\n        }\n    }",
        "begin_line": 213,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 220,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMatcherUsed()",
        "snippet": "    @Test\n    public void shouldPrintMethodWhenMatcherUsed() throws Exception {\n        try {\n            verify(mock, atLeastOnce()).twoArgumentMethod(anyInt(), eq(100));\n            fail();\n        } catch (WantedButNotInvoked e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage =\n                \"\\n\" +\n                \"Wanted but not invoked:\" +\n                \"\\n\" +\n                \"iMethods.twoArgumentMethod(<any>, 100);\";\n            assertContains(expectedMessage, actualMessage);\n        }\n    }",
        "begin_line": 223,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 225,col 9)-(line 236,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMissingInvocationWithArrayMatcher()",
        "snippet": "    @Test\n    public void shouldPrintMethodWhenMissingInvocationWithArrayMatcher() {\n        mock.oneArray(new boolean[] { true, false, false });\n\n        try {\n            verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"[false, false, false]\", e.getMessage());\n            assertContains(\"[true, false, false]\", e.getMessage());\n        }\n    }",
        "begin_line": 239,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 60)",
            "(line 243,col 9)-(line 249,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMissingInvocationWithVarargMatcher()",
        "snippet": "    @Test\n    public void shouldPrintMethodWhenMissingInvocationWithVarargMatcher() {\n        mock.varargsString(10, \"xxx\", \"yyy\", \"zzz\");\n\n        try {\n            verify(mock).varargsString(10, \"111\", \"222\", \"333\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"111\", e.getMessage());\n            assertContains(\"\\\"xxx\\\"\", e.getMessage());\n        }\n    }",
        "begin_line": 252,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 52)",
            "(line 256,col 9)-(line 262,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMissingInvocationWithMatcher()",
        "snippet": "    @Test\n    public void shouldPrintMethodWhenMissingInvocationWithMatcher() {\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod(matches(\"burrito from Exmouth\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"matches(\\\"burrito from Exmouth\\\")\", e.getMessage());\n            assertContains(\"\\\"foo\\\"\", e.getMessage());\n        }\n    }",
        "begin_line": 265,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 33)",
            "(line 269,col 9)-(line 275,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintNullArguments()",
        "snippet": "    @Test\n    public void shouldPrintNullArguments() throws Exception {\n        mock.simpleMethod(null, (Integer) null);\n        try {\n            verify(mock).simpleMethod(\"test\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"simpleMethod(null, null);\", e.getMessage());\n        }\n    }",
        "begin_line": 278,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 48)",
            "(line 281,col 9)-(line 286,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldSayNeverWantedButInvoked()",
        "snippet": "    @Test\n    public void shouldSayNeverWantedButInvoked() throws Exception {\n        mock.simpleMethod(1);\n    \n        verify(mock, never()).simpleMethod(2);\n        try {\n            verify(mock, never()).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertContains(\"Never wanted here:\", e.getMessage());\n            assertContains(\"But invoked here:\", e.getMessage());\n        }\n    }",
        "begin_line": 289,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 29)",
            "(line 293,col 9)-(line 293,col 46)",
            "(line 294,col 9)-(line 300,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldShowRightActualMethod()",
        "snippet": "    @Test\n    public void shouldShowRightActualMethod() throws Exception {\n        mock.simpleMethod(9191);\n        mock.simpleMethod(\"foo\");\n    \n        try {\n            verify(mock).simpleMethod(\"bar\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"bar\", e.getMessage());\n            assertContains(\"foo\", e.getMessage());\n        }\n    }",
        "begin_line": 303,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 32)",
            "(line 306,col 9)-(line 306,col 33)",
            "(line 308,col 9)-(line 314,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintFieldNameWhenAnnotationsUsed()",
        "snippet": "    @Test\n    public void shouldPrintFieldNameWhenAnnotationsUsed() throws Exception {\n        iHavefunkyName.simpleMethod(10);\n    \n        try {\n            verify(iHavefunkyName).simpleMethod(20);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"iHavefunkyName.simpleMethod(20)\", e.getMessage());\n            assertContains(\"iHavefunkyName.simpleMethod(10)\", e.getMessage());\n        }\n    }",
        "begin_line": 319,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 40)",
            "(line 323,col 9)-(line 329,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintInteractionsOnMockWhenOrdinaryVerificationFail()",
        "snippet": "    @Test\n    public void shouldPrintInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {\n        mock.otherMethod();\n        mock.booleanReturningMethod();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n//            assertContains(\"\")\n        }\n    }",
        "begin_line": 332,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 27)",
            "(line 335,col 9)-(line 335,col 38)",
            "(line 337,col 9)-(line 342,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldNeverBreakMethodStringWhenNoArgsInMethod()",
        "snippet": "    @Test\n    public void shouldNeverBreakMethodStringWhenNoArgsInMethod() throws Exception {\n        try {\n            verify(veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock).simpleMethod();\n            fail();\n        } catch(WantedButNotInvoked e) {\n            assertContains(\"veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock.simpleMethod()\", e.getMessage());\n        }\n    }",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 354,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest.shouldVerifyActualNumberOfInvocationsSmallerThanWanted()",
        "snippet": "    @Test\n    public void shouldVerifyActualNumberOfInvocationsSmallerThanWanted() throws Exception {\n        mock.clear();\n        mock.clear();\n        mock.clear();\n\n        Mockito.verify(mock, times(3)).clear();\n        try {\n            Mockito.verify(mock, times(100)).clear();\n            fail();\n        } catch (TooLittleActualInvocations e) {\n            assertContains(\"mock.clear();\", e.getMessage());\n            assertContains(\"Wanted 100 times\", e.getMessage());\n            assertContains(\"was 3\", e.getMessage());\n        }\n    }",
        "begin_line": 23,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 21)",
            "(line 26,col 9)-(line 26,col 21)",
            "(line 27,col 9)-(line 27,col 21)",
            "(line 29,col 9)-(line 29,col 47)",
            "(line 30,col 9)-(line 37,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest.shouldVerifyActualNumberOfInvocationsLargerThanWanted()",
        "snippet": "    @Test\n    public void shouldVerifyActualNumberOfInvocationsLargerThanWanted() throws Exception {\n        mock.clear();\n        mock.clear();\n        mock.clear();\n        mock.clear();\n\n        Mockito.verify(mock, times(4)).clear();\n        try {\n            Mockito.verify(mock, times(1)).clear();\n            fail();\n        } catch (TooManyActualInvocations e) {\n            assertContains(\"mock.clear();\", e.getMessage());\n            assertContains(\"Wanted 1 time\", e.getMessage());\n            assertContains(\"was 4\", e.getMessage());\n        }\n    }",
        "begin_line": 40,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 21)",
            "(line 43,col 9)-(line 43,col 21)",
            "(line 44,col 9)-(line 44,col 21)",
            "(line 45,col 9)-(line 45,col 21)",
            "(line 47,col 9)-(line 47,col 47)",
            "(line 48,col 9)-(line 55,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail()",
        "snippet": "    @Test\n    public void shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {\n        firstInteraction();\n        secondInteraction();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"However, there were other interactions with this mock\", e.getMessage());\n            assertContains(\"firstInteraction(\", e.getMessage());\n            assertContains(\"secondInteraction(\", e.getMessage());\n        }\n    }",
        "begin_line": 20,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 27)",
            "(line 23,col 9)-(line 23,col 28)",
            "(line 25,col 9)-(line 32,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldNotShowAllInteractionsOnDifferentMock()",
        "snippet": "    @Test\n    public void shouldNotShowAllInteractionsOnDifferentMock() throws Exception {\n        differentMockInteraction();\n        firstInteraction();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"firstInteraction(\", e.getMessage());\n            assertNotContains(\"differentMockInteraction(\", e.getMessage());\n        }\n    }",
        "begin_line": 35,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 35)",
            "(line 38,col 9)-(line 38,col 27)",
            "(line 40,col 9)-(line 46,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions()",
        "snippet": "    @Test\n    public void shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions() throws Exception {\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"there were zero interactions with this mock.\", e.getMessage());\n        }\n    }",
        "begin_line": 49,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 56,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.differentMockInteraction()",
        "snippet": "    private void differentMockInteraction() {\n        mockTwo.simpleMethod();\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.secondInteraction()",
        "snippet": "    private void secondInteraction() {\n        mock.booleanReturningMethod();\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.firstInteraction()",
        "snippet": "    private void firstInteraction() {\n        mock.otherMethod();\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyExactNumberOfInvocationsUsingMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyExactNumberOfInvocationsUsingMatcher() {\n        mock.simpleMethod(1);\n        mock.simpleMethod(2);\n        mock.simpleMethod(3);\n        \n        verify(mock, times(3)).simpleMethod(anyInt());\n    }",
        "begin_line": 28,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 29)",
            "(line 31,col 9)-(line 31,col 29)",
            "(line 32,col 9)-(line 32,col 29)",
            "(line 34,col 9)-(line 34,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyUsingSameMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyUsingSameMatcher() {\n        Object one = new String(\"1243\");\n        Object two = new String(\"1243\");\n        Object three = new String(\"1243\");\n\n        assertNotSame(one, two);\n        assertEquals(one, two);\n        assertEquals(two, three);\n\n        mock.oneArg(one);\n        mock.oneArg(two);\n        \n        verify(mock).oneArg(same(one));\n        verify(mock, times(2)).oneArg(two);\n        \n        try {\n            verify(mock).oneArg(same(three));\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }  ",
        "begin_line": 37,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 40)",
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 42)",
            "(line 43,col 9)-(line 43,col 32)",
            "(line 44,col 9)-(line 44,col 31)",
            "(line 45,col 9)-(line 45,col 33)",
            "(line 47,col 9)-(line 47,col 25)",
            "(line 48,col 9)-(line 48,col 25)",
            "(line 50,col 9)-(line 50,col 39)",
            "(line 51,col 9)-(line 51,col 43)",
            "(line 53,col 9)-(line 56,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyUsingMixedMatchers()",
        "snippet": "    @Test\n    public void shouldVerifyUsingMixedMatchers() {\n        mock.threeArgumentMethod(11, \"\", \"01234\");\n\n        try {\n            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n\n        mock.threeArgumentMethod(8, new Object(), \"01234\");\n        \n        try {\n            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n        \n        mock.threeArgumentMethod(8, \"\", \"no match\");\n\n        try {\n            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n        \n        mock.threeArgumentMethod(8, \"\", \"123\");\n        \n        verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n    }",
        "begin_line": 59,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 50)",
            "(line 63,col 9)-(line 66,col 44)",
            "(line 68,col 9)-(line 68,col 59)",
            "(line 70,col 9)-(line 73,col 44)",
            "(line 75,col 9)-(line 75,col 52)",
            "(line 77,col 9)-(line 80,col 44)",
            "(line 82,col 9)-(line 82,col 47)",
            "(line 84,col 9)-(line 84,col 108)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n        \n        inOrder = inOrder(mockOne, mockTwo, mockThree);\n\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockTwo.simpleMethod(2);\n        mockOne.simpleMethod(4);\n    }",
        "begin_line": 26,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 39)",
            "(line 29,col 9)-(line 29,col 39)",
            "(line 30,col 9)-(line 30,col 41)",
            "(line 32,col 9)-(line 32,col 55)",
            "(line 34,col 9)-(line 34,col 32)",
            "(line 35,col 9)-(line 35,col 32)",
            "(line 36,col 9)-(line 36,col 32)",
            "(line 37,col 9)-(line 37,col 34)",
            "(line 38,col 9)-(line 38,col 32)",
            "(line 39,col 9)-(line 39,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyInOrder() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 48)",
            "(line 45,col 9)-(line 45,col 58)",
            "(line 46,col 9)-(line 46,col 50)",
            "(line 47,col 9)-(line 47,col 48)",
            "(line 48,col 9)-(line 48,col 48)",
            "(line 49,col 9)-(line 49,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrderUsingAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderUsingAtLeastOnce() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 52,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 63)",
            "(line 55,col 9)-(line 55,col 58)",
            "(line 56,col 9)-(line 56,col 50)",
            "(line 57,col 9)-(line 57,col 48)",
            "(line 58,col 9)-(line 58,col 63)",
            "(line 59,col 9)-(line 59,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrderWhenExpectingSomeInvocationsToBeCalledZeroTimes()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderWhenExpectingSomeInvocationsToBeCalledZeroTimes() {\n        inOrder.verify(mockOne, times(0)).oneArg(false);\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockTwo, times(0)).simpleMethod(22);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        inOrder.verify(mockThree, times(0)).oneArg(false);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 62,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 48)",
            "(line 66,col 9)-(line 66,col 58)",
            "(line 67,col 9)-(line 67,col 59)",
            "(line 68,col 9)-(line 68,col 50)",
            "(line 69,col 9)-(line 69,col 48)",
            "(line 70,col 9)-(line 70,col 48)",
            "(line 71,col 9)-(line 71,col 58)",
            "(line 72,col 9)-(line 72,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenFirstMockCalledTwice()",
        "snippet": "    @Test\n    public void shouldFailWhenFirstMockCalledTwice() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 48)",
            "(line 78,col 9)-(line 81,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenLastMockCalledTwice()",
        "snippet": "    @Test\n    public void shouldFailWhenLastMockCalledTwice() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(4);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 84,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 48)",
            "(line 87,col 9)-(line 87,col 58)",
            "(line 88,col 9)-(line 88,col 50)",
            "(line 89,col 9)-(line 89,col 48)",
            "(line 90,col 9)-(line 90,col 48)",
            "(line 91,col 9)-(line 94,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseOneInvocationWanted()",
        "snippet": "    @Test(expected=VerificationInOrderFailure.class)\n    public void shouldFailOnFirstMethodBecauseOneInvocationWanted() {\n        inOrder.verify(mockOne, times(0)).simpleMethod(1);\n    }",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseOneInvocationWantedAgain()",
        "snippet": "    @Test(expected=VerificationInOrderFailure.class)\n    public void shouldFailOnFirstMethodBecauseOneInvocationWantedAgain() {\n        inOrder.verify(mockOne, times(2)).simpleMethod(1);\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseFourInvocationsWanted()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseFourInvocationsWanted() {\n        inOrder.verify(mockOne, times(1)).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 107,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 58)",
            "(line 110,col 9)-(line 113,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain() {\n        inOrder.verify(mockOne, times(1)).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }    ",
        "begin_line": 116,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 58)",
            "(line 119,col 9)-(line 122,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseOneInvocationWanted()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseOneInvocationWanted() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree, atLeastOnce()).simpleMethod(3);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne, times(0)).simpleMethod(4);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 63)",
            "(line 128,col 9)-(line 128,col 58)",
            "(line 129,col 9)-(line 129,col 65)",
            "(line 130,col 9)-(line 130,col 63)",
            "(line 131,col 9)-(line 134,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseOneInvocationWantedAgain()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseOneInvocationWantedAgain() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree, atLeastOnce()).simpleMethod(3);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne, times(2)).simpleMethod(4);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }    ",
        "begin_line": 137,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 63)",
            "(line 140,col 9)-(line 140,col 58)",
            "(line 141,col 9)-(line 141,col 65)",
            "(line 142,col 9)-(line 142,col 63)",
            "(line 143,col 9)-(line 146,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseDifferentArgsWanted()",
        "snippet": "    @Test(expected=WantedButNotInvoked.class)\n    public void shouldFailOnFirstMethodBecauseDifferentArgsWanted() {\n        inOrder.verify(mockOne).simpleMethod(100);\n    }",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseDifferentMethodWanted()",
        "snippet": "    @Test(expected=WantedButNotInvoked.class)\n    public void shouldFailOnFirstMethodBecauseDifferentMethodWanted() {\n        inOrder.verify(mockOne).oneArg(true);\n    }",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseDifferentArgsWanted()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseDifferentArgsWanted() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(2)).simpleMethod(-999);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 161,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 48)",
            "(line 164,col 9)-(line 167,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseDifferentMethodWanted()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseDifferentMethodWanted() {\n        inOrder.verify(mockOne, times(1)).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(2)).oneArg(true);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }    ",
        "begin_line": 170,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 58)",
            "(line 173,col 9)-(line 176,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseDifferentArgsWanted()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseDifferentArgsWanted() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(-666);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 179,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 48)",
            "(line 182,col 9)-(line 182,col 58)",
            "(line 183,col 9)-(line 183,col 50)",
            "(line 184,col 9)-(line 184,col 48)",
            "(line 185,col 9)-(line 188,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseDifferentMethodWanted()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseDifferentMethodWanted() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).oneArg(false);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }    ",
        "begin_line": 191,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 48)",
            "(line 194,col 9)-(line 194,col 58)",
            "(line 195,col 9)-(line 195,col 50)",
            "(line 196,col 9)-(line 196,col 48)",
            "(line 197,col 9)-(line 200,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenLastMethodVerifiedFirst()",
        "snippet": "    @Test\n    public void shouldFailWhenLastMethodVerifiedFirst() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 48)",
            "(line 208,col 9)-(line 211,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenMiddleMethodVerifiedFirst()",
        "snippet": "    @Test\n    public void shouldFailWhenMiddleMethodVerifiedFirst() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 214,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 58)",
            "(line 217,col 9)-(line 220,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenMiddleMethodVerifiedFirstInAtLeastOnceMode()",
        "snippet": "    @Test\n    public void shouldFailWhenMiddleMethodVerifiedFirstInAtLeastOnceMode() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 223,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 63)",
            "(line 226,col 9)-(line 229,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnVerifyNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldFailOnVerifyNoMoreInteractions() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        \n        try {\n            verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    } ",
        "begin_line": 232,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 48)",
            "(line 235,col 9)-(line 235,col 58)",
            "(line 236,col 9)-(line 236,col 50)",
            "(line 237,col 9)-(line 237,col 48)",
            "(line 239,col 9)-(line 242,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnVerifyZeroInteractions()",
        "snippet": "    @Test(expected=NoInteractionsWanted.class)\n    public void shouldFailOnVerifyZeroInteractions() {\n        verifyZeroInteractions(mockOne);\n    }",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldScreamWhenNullPassed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void shouldScreamWhenNullPassed() {\n        inOrder(null);\n    }",
        "begin_line": 250,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 22)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() throws Exception {\n        mock.clear();\n        \n        //TODO: after 1.8 implement timeout\n        //verify(mock, atLeastOnce().timeout(100)).clear();\n    }",
        "begin_line": 18,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n        \n        inOrder = inOrder(mockOne, mockTwo, mockThree);\n\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockTwo.simpleMethod(2);\n        mockOne.simpleMethod(4);\n    }",
        "begin_line": 29,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 39)",
            "(line 32,col 9)-(line 32,col 39)",
            "(line 33,col 9)-(line 33,col 41)",
            "(line 35,col 9)-(line 35,col 55)",
            "(line 37,col 9)-(line 37,col 32)",
            "(line 38,col 9)-(line 38,col 32)",
            "(line 39,col 9)-(line 39,col 32)",
            "(line 40,col 9)-(line 40,col 34)",
            "(line 41,col 9)-(line 41,col 32)",
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderAllInvocations()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAllInvocations() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 48)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 50)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 48)",
            "(line 52,col 9)-(line 52,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderAndBeRelaxed()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAndBeRelaxed() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        \n        verifyNoMoreInteractions(mockThree);\n    }    ",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 58)",
            "(line 58,col 9)-(line 58,col 50)",
            "(line 60,col 9)-(line 60,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowFirstChunkBeforeLastInvocation()",
        "snippet": "    @Test\n    public void shouldAllowFirstChunkBeforeLastInvocation() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        \n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 58)",
            "(line 66,col 9)-(line 66,col 48)",
            "(line 68,col 9)-(line 71,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowAllChunksBeforeLastInvocation()",
        "snippet": "    @Test\n    public void shouldAllowAllChunksBeforeLastInvocation() {\n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        \n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 58)",
            "(line 77,col 9)-(line 77,col 48)",
            "(line 79,col 9)-(line 79,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyDetectFirstChunkOfInvocationThatExistInManyChunks()",
        "snippet": "    @Test\n    public void shouldVerifyDetectFirstChunkOfInvocationThatExistInManyChunks() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch(NoInteractionsWanted e) {}\n    }  ",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 58)",
            "(line 85,col 9)-(line 85,col 50)",
            "(line 86,col 9)-(line 89,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyDetectAllChunksOfInvocationThatExistInManyChunks()",
        "snippet": "    @Test\n    public void shouldVerifyDetectAllChunksOfInvocationThatExistInManyChunks() {\n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 58)",
            "(line 95,col 9)-(line 95,col 48)",
            "(line 96,col 9)-(line 96,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInteractionsFromAllChunksWhenAtLeastOnceMode()",
        "snippet": "    @Test\n    public void shouldVerifyInteractionsFromAllChunksWhenAtLeastOnceMode() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n        try {\n            inOrder.verify(mockThree).simpleMethod(3);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 99,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 63)",
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 106,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInteractionsFromFirstChunk()",
        "snippet": "    @Test\n    public void shouldVerifyInteractionsFromFirstChunk() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 109,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 58)",
            "(line 112,col 9)-(line 115,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailVerificationOfNonFirstChunk()",
        "snippet": "    @Test(expected=VerificationInOrderFailure.class)\n    public void shouldFailVerificationOfNonFirstChunk() {\n        inOrder.verify(mockTwo, times(1)).simpleMethod(2);\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldPassOnCombinationOfTimesAndAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldPassOnCombinationOfTimesAndAtLeastOnce() {\n        mockTwo.simpleMethod(2);\n        \n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 123,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 32)",
            "(line 127,col 9)-(line 127,col 58)",
            "(line 128,col 9)-(line 128,col 63)",
            "(line 129,col 9)-(line 129,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldPassOnEdgyCombinationOfTimesAndAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldPassOnEdgyCombinationOfTimesAndAtLeastOnce() {\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        \n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        \n        verifyNoMoreInteractions(mockThree);\n    }",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 32)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 137,col 9)-(line 137,col 50)",
            "(line 138,col 9)-(line 138,col 63)",
            "(line 139,col 9)-(line 139,col 50)",
            "(line 141,col 9)-(line 141,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderMockTwoAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockTwoAndThree() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo, mockThree);\n    }     ",
        "begin_line": 144,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 58)",
            "(line 147,col 9)-(line 147,col 50)",
            "(line 148,col 9)-(line 148,col 48)",
            "(line 149,col 9)-(line 149,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderMockOneAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockOneAndThree() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockThree);\n    } ",
        "begin_line": 152,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 48)",
            "(line 155,col 9)-(line 155,col 50)",
            "(line 156,col 9)-(line 156,col 48)",
            "(line 157,col 9)-(line 157,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderOnlyTwoInvocations()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderOnlyTwoInvocations() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 160,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 58)",
            "(line 163,col 9)-(line 163,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderOnlyMockTwo()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderOnlyMockTwo() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 166,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 58)",
            "(line 169,col 9)-(line 169,col 48)",
            "(line 170,col 9)-(line 170,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyMockTwoCalledTwice()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoCalledTwice() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n    }",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyMockTwoCalledAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoCalledAtLeastOnce() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n    }",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnWrongMethodCalledOnMockTwo()",
        "snippet": "    @Test(expected=WantedButNotInvoked.class)\n    public void shouldFailOnWrongMethodCalledOnMockTwo() {\n        inOrder.verify(mockTwo, atLeastOnce()).differentMethod();\n    }",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowTimesZeroButOnlyInOrder()",
        "snippet": "    @Test\n    public void shouldAllowTimesZeroButOnlyInOrder() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockOne, times(0)).simpleMethod(1);\n        \n        try {\n            verify(mockOne, times(0)).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {}\n    }",
        "begin_line": 188,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 63)",
            "(line 191,col 9)-(line 191,col 58)",
            "(line 193,col 9)-(line 196,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailTimesZeroInOrder()",
        "snippet": "    @Test\n    public void shouldFailTimesZeroInOrder() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            inOrder.verify(mockThree, times(0)).simpleMethod(3);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 199,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 58)",
            "(line 202,col 9)-(line 205,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailWhenMockTwoWantedZeroTimes()",
        "snippet": "    @Test(expected=VerificationInOrderFailure.class)\n    public void shouldFailWhenMockTwoWantedZeroTimes() {\n        inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n    }",
        "begin_line": 208,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyLastInvocation()",
        "snippet": "    @Test\n    public void shouldVerifyLastInvocation() {\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 213,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifySecondAndLastInvocation()",
        "snippet": "    @Test\n    public void shouldVerifySecondAndLastInvocation() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 218,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 63)",
            "(line 221,col 9)-(line 221,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifySecondAndLastInvocationWhenAtLeastOnceUsed()",
        "snippet": "    @Test\n    public void shouldVerifySecondAndLastInvocationWhenAtLeastOnceUsed() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 63)",
            "(line 227,col 9)-(line 227,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnLastTwoInvocationsInWrongOrder()",
        "snippet": "    @Test\n    public void shouldFailOnLastTwoInvocationsInWrongOrder() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 230,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 236,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnLastAndFirstInWrongOrder()",
        "snippet": "    @Test\n    public void shouldFailOnLastAndFirstInWrongOrder() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 239,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 48)",
            "(line 242,col 9)-(line 245,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnWrongMethodAfterLastInvocation()",
        "snippet": "    @Test\n    public void shouldFailOnWrongMethodAfterLastInvocation() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 248,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 48)",
            "(line 251,col 9)-(line 254,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockTwo.simpleMethod(2);\n        mockOne.simpleMethod(4);\n    }",
        "begin_line": 23,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 39)",
            "(line 26,col 9)-(line 26,col 39)",
            "(line 27,col 9)-(line 27,col 41)",
            "(line 29,col 9)-(line 29,col 32)",
            "(line 30,col 9)-(line 30,col 32)",
            "(line 31,col 9)-(line 31,col 32)",
            "(line 32,col 9)-(line 32,col 34)",
            "(line 33,col 9)-(line 33,col 32)",
            "(line 34,col 9)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyAllInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyAllInvocationsInOrder() {\n        InOrder inOrder = inOrder(mockOne, mockTwo, mockThree);\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)",
            "(line 40,col 9)-(line 40,col 48)",
            "(line 41,col 9)-(line 41,col 58)",
            "(line 42,col 9)-(line 42,col 50)",
            "(line 43,col 9)-(line 43,col 48)",
            "(line 44,col 9)-(line 44,col 48)",
            "(line 45,col 9)-(line 45,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyInOrderMockTwoAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockTwoAndThree() {\n        InOrder inOrder = inOrder(mockTwo, mockThree);\n        \n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo, mockThree);\n    }     ",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 54)",
            "(line 52,col 9)-(line 52,col 58)",
            "(line 53,col 9)-(line 53,col 50)",
            "(line 54,col 9)-(line 54,col 48)",
            "(line 55,col 9)-(line 55,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyInOrderMockOneAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockOneAndThree() {\n        InOrder inOrder = inOrder(mockOne, mockThree);\n        \n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockThree);\n    } ",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 54)",
            "(line 62,col 9)-(line 62,col 48)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 48)",
            "(line 65,col 9)-(line 65,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockOneInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyMockOneInOrder() {\n        InOrder inOrder = inOrder(mockOne);\n        \n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockOne).simpleMethod(4);\n        \n        verifyNoMoreInteractions(mockOne);\n    } ",
        "begin_line": 68,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 43)",
            "(line 72,col 9)-(line 72,col 48)",
            "(line 73,col 9)-(line 73,col 48)",
            "(line 75,col 9)-(line 75,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockOne()",
        "snippet": "    @Test\n    public void shouldFailVerificationForMockOne() {\n        InOrder inOrder = inOrder(mockOne);\n        \n        inOrder.verify(mockOne).simpleMethod(1);\n        try {\n            inOrder.verify(mockOne).differentMethod();\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    } ",
        "begin_line": 78,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 43)",
            "(line 82,col 9)-(line 82,col 48)",
            "(line 83,col 9)-(line 86,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockOneBecauseOfWrongOrder()",
        "snippet": "    @Test\n    public void shouldFailVerificationForMockOneBecauseOfWrongOrder() {\n        InOrder inOrder = inOrder(mockOne);\n        \n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    } ",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 43)",
            "(line 93,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 97,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwoWhenThreeTimesUsed()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoWhenThreeTimesUsed() {\n        InOrder inOrder = inOrder(mockTwo);\n        \n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockTwo);\n    } ",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 43)",
            "(line 104,col 9)-(line 104,col 58)",
            "(line 106,col 9)-(line 106,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwo()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n        \n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockTwo);\n    } ",
        "begin_line": 109,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 43)",
            "(line 113,col 9)-(line 113,col 63)",
            "(line 115,col 9)-(line 115,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockTwo()",
        "snippet": "    @Test\n    public void shouldFailVerificationForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 118,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 43)",
            "(line 122,col 9)-(line 125,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowNoMoreInvocationsForMockTwo()",
        "snippet": "    @Test\n    public void shouldThrowNoMoreInvocationsForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 128,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 43)",
            "(line 132,col 9)-(line 135,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowTooLittleInvocationsForMockTwo()",
        "snippet": "    @Test\n    public void shouldThrowTooLittleInvocationsForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 43)",
            "(line 142,col 9)-(line 145,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowTooManyInvocationsForMockTwo()",
        "snippet": "    @Test\n    public void shouldThrowTooManyInvocationsForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 148,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 43)",
            "(line 152,col 9)-(line 155,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldAllowThreeTimesOnMockTwo()",
        "snippet": "    @Test\n    public void shouldAllowThreeTimesOnMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 43)",
            "(line 162,col 9)-(line 162,col 58)",
            "(line 163,col 9)-(line 163,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwoCompletely()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoCompletely() {\n        InOrder inOrder = inOrder(mockTwo, mockThree);\n\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo, mockThree);\n    }",
        "begin_line": 166,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 54)",
            "(line 170,col 9)-(line 170,col 58)",
            "(line 171,col 9)-(line 171,col 50)",
            "(line 172,col 9)-(line 172,col 48)",
            "(line 173,col 9)-(line 173,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldAllowTwoTimesOnMockTwo()",
        "snippet": "    @Test\n    public void shouldAllowTwoTimesOnMockTwo() {\n        InOrder inOrder = inOrder(mockTwo, mockThree);\n\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 176,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 54)",
            "(line 180,col 9)-(line 180,col 58)",
            "(line 181,col 9)-(line 184,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n        \n        inOrder = inOrder(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 39)",
            "(line 28,col 9)-(line 28,col 39)",
            "(line 29,col 9)-(line 29,col 41)",
            "(line 31,col 9)-(line 31,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldVerifySingleMockInOrderAndNotInOrder()",
        "snippet": "    @Test\n    public void shouldVerifySingleMockInOrderAndNotInOrder() {\n        mockOne = mock(IMethods.class);\n        inOrder = inOrder(mockOne);\n        \n        mockOne.simpleMethod(1);\n        mockOne.simpleMethod(2);\n        \n        verify(mockOne).simpleMethod(2);\n        verify(mockOne).simpleMethod(1);\n        \n        inOrder.verify(mockOne).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    } ",
        "begin_line": 34,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 39)",
            "(line 37,col 9)-(line 37,col 35)",
            "(line 39,col 9)-(line 39,col 32)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 40)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 49,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldMessagesPointToProperMethod()",
        "snippet": "    @Test\n    public void shouldMessagesPointToProperMethod() {\n        mockTwo.differentMethod();\n        mockOne.simpleMethod();\n        \n        try {\n            inOrder.verify(mockOne, atLeastOnce()).differentMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"differentMethod()\", e.getMessage());\n        }\n    }",
        "begin_line": 52,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 34)",
            "(line 55,col 9)-(line 55,col 31)",
            "(line 57,col 9)-(line 62,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldVerifyInOrderWhenTwoChunksAreEqual()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderWhenTwoChunksAreEqual() {\n        mockOne.simpleMethod();\n        mockOne.simpleMethod();\n        mockTwo.differentMethod();\n        mockOne.simpleMethod();\n        mockOne.simpleMethod();\n        \n        inOrder.verify(mockOne, times(2)).simpleMethod();\n        inOrder.verify(mockTwo).differentMethod();\n        inOrder.verify(mockOne, times(2)).simpleMethod();\n        try {\n            inOrder.verify(mockOne, atLeastOnce()).simpleMethod();\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 65,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 31)",
            "(line 68,col 9)-(line 68,col 31)",
            "(line 69,col 9)-(line 69,col 34)",
            "(line 70,col 9)-(line 70,col 31)",
            "(line 71,col 9)-(line 71,col 31)",
            "(line 73,col 9)-(line 73,col 57)",
            "(line 74,col 9)-(line 74,col 50)",
            "(line 75,col 9)-(line 75,col 57)",
            "(line 76,col 9)-(line 79,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldVerifyInOrderUsingMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderUsingMatcher() {\n        mockOne.simpleMethod(1);\n        mockOne.simpleMethod(2);\n        mockTwo.differentMethod();\n        mockOne.simpleMethod(3);\n        mockOne.simpleMethod(4);\n        \n        verify(mockOne, times(4)).simpleMethod(anyInt());\n        \n        inOrder.verify(mockOne, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).differentMethod();\n        inOrder.verify(mockOne, times(2)).simpleMethod(anyInt());\n        try {\n            inOrder.verify(mockOne, times(3)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 82,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 32)",
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 32)",
            "(line 88,col 9)-(line 88,col 32)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 92,col 9)-(line 92,col 65)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 65)",
            "(line 95,col 9)-(line 98,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.packageprotected.MockingPackageProtectedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/packageprotected/MockingPackageProtectedTest.java",
        "signature": "org.mockitousage.packageprotected.MockingPackageProtectedTest.shouldMockPackageProtectedClasses()",
        "snippet": "    @Test\n    public void shouldMockPackageProtectedClasses() {\n        mock(PackageProtected.class);\n        mock(Foo.class);\n        mock(Bar.class);\n    }",
        "begin_line": 18,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 37)",
            "(line 21,col 9)-(line 21,col 24)",
            "(line 22,col 9)-(line 22,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldRequireArgumentsWhenVerifyingNoMoreInteractions()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldRequireArgumentsWhenVerifyingNoMoreInteractions() {\n        verifyNoMoreInteractions();\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldRequireArgumentsWhenVerifyingZeroInteractions()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldRequireArgumentsWhenVerifyingZeroInteractions() {\n        verifyZeroInteractions();\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotCreateInOrderObjectWithoutMocks()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotCreateInOrderObjectWithoutMocks() {\n        inOrder();\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 18)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowVerifyingInOrderUnfamilarMocks()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowVerifyingInOrderUnfamilarMocks() {\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mockTwo).simpleMethod();\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 40)",
            "(line 46,col 9)-(line 46,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldReportMissingMethodInvocationWhenStubbing()",
        "snippet": "    @Test(expected=MissingMethodInvocationException.class)\n    public void shouldReportMissingMethodInvocationWhenStubbing() {\n        when(mock.simpleMethod()).thenReturn(\"this stubbing is required to make sure Stubbable is pulled\");\n        when(\"\".toString()).thenReturn(\"x\");\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 107)",
            "(line 52,col 9)-(line 52,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingInvalidCheckedException()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new Exception());\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullThrowable()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowable() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new Throwable[] {null});\n    }    ",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullThrowableVararg()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowableVararg() throws Exception {\n        when(mock.simpleMethod()).thenThrow(null);\n    }    ",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullConsecutiveThrowable()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullConsecutiveThrowable() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new RuntimeException(), null);\n    }    ",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowMockingFinalClasses()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowMockingFinalClasses() throws Exception {\n        mock(FinalClass.class); \n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowMockingPrimitves()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowMockingPrimitves() throws Exception {\n        mock(Integer.TYPE); \n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.ObjectLikeInterface.equals(java.lang.Object)",
        "snippet": "        boolean equals(Object o);",
        "begin_line": 89,
        "end_line": 89,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.ObjectLikeInterface.toString()",
        "snippet": "        String toString();",
        "begin_line": 90,
        "end_line": 90,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.ObjectLikeInterface.hashCode()",
        "snippet": "        int hashCode();",
        "begin_line": 91,
        "end_line": 91,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotMockObjectMethodsOnInterface()",
        "snippet": "    @Test\n    public void shouldNotMockObjectMethodsOnInterface() throws Exception {\n        ObjectLikeInterface inter = mock(ObjectLikeInterface.class);\n        \n        inter.equals(null);\n        inter.toString();\n        inter.hashCode();\n        \n        verifyZeroInteractions(inter);\n    }",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 68)",
            "(line 98,col 9)-(line 98,col 27)",
            "(line 99,col 9)-(line 99,col 25)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 102,col 9)-(line 102,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotMockObjectMethodsOnClass()",
        "snippet": "    public void shouldNotMockObjectMethodsOnClass() throws Exception {\n        Object clazz = mock(ObjectLikeInterface.class);\n        \n        clazz.equals(null);\n        clazz.toString();\n        clazz.hashCode();\n        \n        verifyZeroInteractions(clazz);\n    }",
        "begin_line": 105,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 55)",
            "(line 108,col 9)-(line 108,col 27)",
            "(line 109,col 9)-(line 109,col 25)",
            "(line 110,col 9)-(line 110,col 25)",
            "(line 112,col 9)-(line 112,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.Foo.finalMethod()",
        "snippet": "        public final String finalMethod() {\n            return null;\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.tryDescriptiveMessagesOnMisuse()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    public void tryDescriptiveMessagesOnMisuse() {\n        Foo foo = mock(Foo.class);\n        \n//        when(foo.finalMethod()).thenReturn(\"foo\");\n//        doReturn(\"foo\").when(foo).finalMethod();\n//        verify(foo).finalMethod();\n        \n//        doReturn(\"foo\");\n//        doReturn(\"bar\");\n        \n//        verifyNoMoreInteractions();\n//        verifyNoMoreInteractions(null);\n//        verifyNoMoreInteractions(\"\");\n//        verifyZeroInteractions();\n//        verifyZeroInteractions(null);\n//        verifyZeroInteractions(\"\");\n//\n//        inOrder();\n//        inOrder(null);\n//        inOrder(\"test\");\n//        InOrder inOrder = inOrder(mock(List.class));\n//        inOrder.verify(mock).simpleMethod();\n\n//        verify(null);\n//        verify(mock.booleanReturningMethod());\n\n//        verify(mock).varargs(\"test\", anyString());\n\n//        when(\"x\").thenReturn(\"x\");\n\n//        when(mock.simpleMethod());\n//        when(mock.differentMethod()).thenReturn(\"\");\n    } ",
        "begin_line": 27,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenWholeMethodPassedToVerify()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldScreamWhenWholeMethodPassedToVerify() {\n        verify(mock.booleanReturningMethod());\n    }   ",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions() {\n        verifyNoMoreInteractions(mock.byteReturningMethod());\n    }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenInOrderCreatedWithDodgyMock()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldScreamWhenInOrderCreatedWithDodgyMock() {\n        inOrder(\"not a mock\");\n    }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenInOrderCreatedWithNulls()",
        "snippet": "    @Test(expected=NullInsteadOfMockException.class)\n    public void shouldScreamWhenInOrderCreatedWithNulls() {\n        inOrder(mock, null);\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamNullPassedToVerify()",
        "snippet": "    @Test(expected=NullInsteadOfMockException.class)\n    public void shouldScreamNullPassedToVerify() {\n        verify(null);\n    }  ",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions()",
        "snippet": "    @Test(expected=NullInsteadOfMockException.class)\n    public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions() {\n        verifyNoMoreInteractions(null, \"blah\");\n    } ",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenNullPassedToVerifyNoMoreInteractions()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions() {\n        verifyNoMoreInteractions(null);\n    }",
        "begin_line": 93,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.WithFinal.finalMethod(java.lang.Object)",
        "snippet": "        final Object finalMethod(Object object) {\n            return null;\n        }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 13)-(line 22,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.misplacedArgumentMatcher()",
        "snippet": "    private void misplacedArgumentMatcher() {\n        anyObject();\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.shouldFailFastWhenArgumentMatchersAbused()",
        "snippet": "    @Test\n    public void shouldFailFastWhenArgumentMatchersAbused() {\n        misplacedArgumentMatcher();\n        try {\n            mock(IMethods.class);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"Misplaced argument matcher\", e.getMessage());\n        }\n    }",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 35)",
            "(line 40,col 9)-(line 45,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers()",
        "snippet": "    @Test\n    public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {\n        verify(withFinal).finalMethod(anyObject());\n        try {\n            verify(withFinal);\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 51)",
            "(line 51,col 9)-(line 54,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.RestrictedObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java",
        "signature": "org.mockitousage.misuse.RestrictedObjectMethodsTest.shouldNotAllowVerifyingRestrictedMethods()",
        "snippet": "    @Ignore\n    @Test\n    public void shouldNotAllowVerifyingRestrictedMethods() {\n        //TODO: after 1.8 exception message should mention those methods are not verifiable\n        verify(mock).toString();\n        verify(mock).hashCode();\n        verify(mock).equals(null);\n    }",
        "begin_line": 19,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 32)",
            "(line 24,col 9)-(line 24,col 32)",
            "(line 25,col 9)-(line 25,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java",
        "signature": "org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldValidateExplicitly()",
        "snippet": "    @Test\n    public void shouldValidateExplicitly() {\n        verify(mock);\n        try {\n            Mockito.validateMockitoUsage();\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 21)",
            "(line 26,col 9)-(line 29,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java",
        "signature": "org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldDetectUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbing() {\n        when(mock.simpleMethod());\n        try {\n            Mockito.validateMockitoUsage();\n            fail();\n        } catch (UnfinishedStubbingException e) {}\n    }",
        "begin_line": 32,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 34)",
            "(line 35,col 9)-(line 38,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java",
        "signature": "org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldDetectMisplacedArgumentMatcher()",
        "snippet": "    @Test\n    public void shouldDetectMisplacedArgumentMatcher() {\n        anyObject();\n        try {\n            Mockito.validateMockitoUsage();\n            fail();\n        } catch (InvalidUseOfMatchersException e) {}\n    }",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)",
            "(line 44,col 9)-(line 47,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingFinalMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingFinalMethodsTest.java",
        "signature": "org.mockitousage.misuse.DetectingFinalMethodsTest.WithFinal.foo()",
        "snippet": "        final int foo() {\n            return 0;\n        }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 18,col 13)-(line 18,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingFinalMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingFinalMethodsTest.java",
        "signature": "org.mockitousage.misuse.DetectingFinalMethodsTest.shouldFailWithUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldFailWithUnfinishedVerification() {\n        withFinal = mock(WithFinal.class);\n        verify(withFinal).foo();\n        try {\n            verify(withFinal).foo();\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 24,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 42)",
            "(line 27,col 9)-(line 27,col 32)",
            "(line 28,col 9)-(line 31,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingFinalMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingFinalMethodsTest.java",
        "signature": "org.mockitousage.misuse.DetectingFinalMethodsTest.shouldFailWithUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldFailWithUnfinishedStubbing() {\n        withFinal = mock(WithFinal.class);\n        try {\n            when(withFinal.foo()).thenReturn(null);\n            fail();\n        } catch (MissingMethodInvocationException e) {}\n    }",
        "begin_line": 34,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 42)",
            "(line 37,col 9)-(line 40,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnVerify()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnVerify() {\n        // first test\n        mock.booleanReturningMethod();\n        verify(mock).booleanReturningMethod();\n        \n        // second test\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 38)",
            "(line 24,col 9)-(line 24,col 46)",
            "(line 27,col 9)-(line 27,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnMock()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnMock() {\n        mock.booleanReturningMethod();\n        mock(IMethods.class);\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 38)",
            "(line 33,col 9)-(line 33,col 29)",
            "(line 34,col 9)-(line 34,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnInOrder()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnInOrder() {\n        mock.booleanReturningMethod();\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).booleanReturningMethod();\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 37,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 38)",
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnDoReturn()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnDoReturn() {\n        mock.booleanReturningMethod();\n        doReturn(false).when(mock).booleanReturningMethod();\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 38)",
            "(line 48,col 9)-(line 48,col 60)",
            "(line 49,col 9)-(line 49,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnVerifyNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnVerifyNoMoreInteractions() {\n        mock.booleanReturningMethod();\n        IMethods mock2 = mock(IMethods.class);\n        verifyNoMoreInteractions(mock2);\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 52,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 38)",
            "(line 55,col 9)-(line 55,col 46)",
            "(line 56,col 9)-(line 56,col 40)",
            "(line 57,col 9)-(line 57,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.assertOngoingStubbingIsReset()",
        "snippet": "    private void assertOngoingStubbingIsReset() {\n        try {\n            //In real, there might be a call to real object or a final method call\n            //I'm modelling it with null\n            when(null).thenReturn(\"anything\");\n            fail();\n        } catch (MissingMethodInvocationException e) {}\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 66,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit45RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit45RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit45RunnerTest.shouldInitMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInitMocksUsingRunner() {\n        list.add(\"test\");\n        verify(list).add(\"test\");\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 25)",
            "(line 26,col 9)-(line 26,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit44RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit44RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit44RunnerTest.shouldInitMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInitMocksUsingRunner() {\n        list.add(\"test\");\n        verify(list).add(\"test\");\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 25)",
            "(line 26,col 9)-(line 26,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnitRunnerTestCase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnitRunnerTestCase.java",
        "signature": "org.mockitousage.junitrunner.JUnitRunnerTestCase.shouldInitMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInitMocksUsingRunner() {\n        list.add(\"test\");\n        map.clear();\n        \n        verify(list).add(\"test\");\n        verify(map).clear();\n    }",
        "begin_line": 20,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 25)",
            "(line 23,col 9)-(line 23,col 20)",
            "(line 25,col 9)-(line 25,col 33)",
            "(line 26,col 9)-(line 26,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java",
        "signature": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest.cleanStackTraces()",
        "snippet": "    public void cleanStackTraces() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java",
        "signature": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest.shouldLogUnusedStubbingWarningWhenTestFails()",
        "snippet": "    @Ignore\n    @Test\n    public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {\n        when(mock.simpleMethod()).thenReturn(\"foo\");\n        \n        fail();\n    }",
        "begin_line": 26,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 52)",
            "(line 31,col 9)-(line 31,col 15)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        inOrder = inOrder(mock, mockTwo);\n        \n        first();\n        second();\n        third();\n        fourth();\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 41)",
            "(line 32,col 9)-(line 32,col 16)",
            "(line 33,col 9)-(line 33,col 17)",
            "(line 34,col 9)-(line 34,col 16)",
            "(line 35,col 9)-(line 35,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.first()",
        "snippet": "    private void first() {\n        mock.simpleMethod(1);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.second()",
        "snippet": "    private void second() {\n        mockTwo.simpleMethod(2);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.third()",
        "snippet": "    private void third() {\n        mock.simpleMethod(3);\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.fourth()",
        "snippet": "    private void fourth() {\n        mockTwo.simpleMethod(4);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointStackTraceToPreviousVerified()",
        "snippet": "    @Test\n    public void shouldPointStackTraceToPreviousVerified() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mock).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"fourth(\", e.getMessage());\n        }\n    }",
        "begin_line": 51,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 67)",
            "(line 54,col 9)-(line 54,col 55)",
            "(line 56,col 9)-(line 61,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToThirdMethod()",
        "snippet": "    @Test\n    public void shouldPointToThirdMethod() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"third(\", e.getMessage());\n        }\n    }",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 67)",
            "(line 68,col 9)-(line 73,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToSecondMethod()",
        "snippet": "    @Test\n    public void shouldPointToSecondMethod() {\n        inOrder.verify(mock).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"second(\", e.getMessage());\n        }\n    }",
        "begin_line": 76,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 52)",
            "(line 79,col 9)-(line 79,col 55)",
            "(line 81,col 9)-(line 86,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToFirstMethodBecauseOfTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToFirstMethodBecauseOfTooManyActualInvocations() {\n        try {\n            inOrder.verify(mock, times(0)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"first(\", e.getMessage());\n        }\n    }    ",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 96,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToSecondMethodBecauseOfTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToSecondMethodBecauseOfTooManyActualInvocations() {\n        inOrder.verify(mock).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"second(\", e.getMessage());\n        }\n    }",
        "begin_line": 99,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 52)",
            "(line 103,col 9)-(line 108,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToFourthMethodBecauseOfTooLittleActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToFourthMethodBecauseOfTooLittleActualInvocations() {\n        inOrder.verify(mock).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).simpleMethod(anyInt());\n        inOrder.verify(mock).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(3)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"fourth(\", e.getMessage());\n        }\n    }",
        "begin_line": 111,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 117,col 9)-(line 122,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.cleanStackTrace()",
        "snippet": "    @Before\n    public void cleanStackTrace() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner()",
        "snippet": "    @Test\n    public void makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner() {\n        //mess up the state:\n        verify(mock);\n    }",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayWantedButNotInvoked()",
        "snippet": "    @Test\n    public void shouldSayWantedButNotInvoked() {\n        verify(mock).otherMethod();\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails()",
        "snippet": "    @Test\n    public void shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails() {\n        mock.otherMethod();\n        mock.booleanObjectReturningMethod();\n        \n        verify(mock).simpleMethod();\n    }    ",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 27)",
            "(line 49,col 9)-(line 49,col 44)",
            "(line 51,col 9)-(line 51,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldShowActualAndExpected()",
        "snippet": "    @Test\n    public void shouldShowActualAndExpected() {\n        mock.simpleMethod(\"blah\");\n        verify(mock).simpleMethod();\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 34)",
            "(line 57,col 9)-(line 57,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocations()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocations() {\n        mock.simpleMethod();\n        verify(mock, times(2)).simpleMethod();\n    }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 28)",
            "(line 63,col 9)-(line 63,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooManyInvocations()",
        "snippet": "    @Test\n    public void shouldSayTooManyInvocations() {\n        mock.simpleMethod();\n        mock.simpleMethod();\n        verify(mock, times(1)).simpleMethod();\n    }",
        "begin_line": 66,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 28)",
            "(line 69,col 9)-(line 69,col 28)",
            "(line 70,col 9)-(line 70,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayWantedButNotInvokedInOrder()",
        "snippet": "    @Test\n    public void shouldSayWantedButNotInvokedInOrder() {\n        mock.simpleMethod();\n        mock.otherMethod();\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).otherMethod();\n        inOrder.verify(mock).simpleMethod();\n    }",
        "begin_line": 73,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 28)",
            "(line 76,col 9)-(line 76,col 27)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 78,col 9)-(line 78,col 43)",
            "(line 79,col 9)-(line 79,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocationsInOrder() {\n        mock.simpleMethod();\n        mock.otherMethod();\n        mock.otherMethod();\n\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).simpleMethod();\n        inOrder.verify(mock, times(3)).otherMethod();\n    }",
        "begin_line": 82,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 28)",
            "(line 85,col 9)-(line 85,col 27)",
            "(line 86,col 9)-(line 86,col 27)",
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 44)",
            "(line 90,col 9)-(line 90,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooManyInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldSayTooManyInvocationsInOrder() {\n        mock.otherMethod();\n        mock.otherMethod();\n        \n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock, times(1)).otherMethod();\n    }",
        "begin_line": 93,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 27)",
            "(line 96,col 9)-(line 96,col 27)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayNeverWantedButInvokedHere()",
        "snippet": "    @Test\n    public void shouldSayNeverWantedButInvokedHere() {\n        mock.otherMethod();\n        \n        verify(mock, never()).otherMethod();\n    }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 27)",
            "(line 106,col 9)-(line 106,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInAtLeastModeInOrder()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocationsInAtLeastModeInOrder() {\n        mock.simpleMethod();\n\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock, atLeast(2)).simpleMethod();\n    }",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 28)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 114,col 9)-(line 114,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInAtLeastMode()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocationsInAtLeastMode() {\n        mock.simpleMethod();\n        \n        verify(mock, atLeast(2)).simpleMethod();\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 28)",
            "(line 121,col 9)-(line 121,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldSayNoMoreInteractions() {\n        mock.simpleMethod();\n        \n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 28)",
            "(line 128,col 9)-(line 128,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayUnstubbedMethodWasInvokedHere()",
        "snippet": "    @Test\n    public void shouldSayUnstubbedMethodWasInvokedHere() {\n        mock = mock(IMethods.class, RETURNS_SMART_NULLS);\n        \n        IMethods m = mock.iMethodsReturningMethod();\n        \n        m.simpleMethod();\n    }",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 57)",
            "(line 135,col 9)-(line 135,col 52)",
            "(line 137,col 9)-(line 137,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldPointOutUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldPointOutUnfinishedStubbing() {\n        when(mock.simpleMethod());\n        \n        verify(mock).simpleMethod();\n    }    ",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 34)",
            "(line 144,col 9)-(line 144,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenMissingMockCall()",
        "snippet": "    @Test\n    public void shouldMentionFinalAndObjectMethodsWhenMissingMockCall() {\n        when(mock.equals(null)).thenReturn(false);\n    }",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenVerifying()",
        "snippet": "    @Test\n    public void shouldMentionFinalAndObjectMethodsWhenVerifying() {\n        verify(mock).equals(null);\n        verify(mock).simpleMethod();\n    }",
        "begin_line": 152,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 34)",
            "(line 155,col 9)-(line 155,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher()",
        "snippet": "    @Test\n    public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher() {\n        when(mock.equals(anyObject())).thenReturn(false);\n    }",
        "begin_line": 158,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldShowExampleOfCorrectArgumentCapturing()",
        "snippet": "    @Test\n    public void shouldShowExampleOfCorrectArgumentCapturing() {\n        ArgumentCaptor<String> argument = new ArgumentCaptor<String>();\n        argument.capture();\n        argument.getValue();\n    }",
        "begin_line": 163,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 71)",
            "(line 166,col 9)-(line 166,col 27)",
            "(line 167,col 9)-(line 167,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenNullPassedInsteadOfAnInterface()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassedInsteadOfAnInterface() {\n        mock(IMethods.class, withSettings().extraInterfaces(List.class, null));\n    }",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenNonInterfacePassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNonInterfacePassed() {\n        mock(IMethods.class, withSettings().extraInterfaces(LinkedList.class));\n    }",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraIsTheSame()",
        "snippet": "    @Test\n    public void shouldScreamWhenExtraIsTheSame() {\n        mock(IMethods.class, withSettings().extraInterfaces(IMethods.class));\n    }",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraInterfacesEmpty()",
        "snippet": "    @Test\n    public void shouldScreamWhenExtraInterfacesEmpty() {\n        mock(IMethods.class, withSettings().extraInterfaces());\n    }",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraInterfacesIsANullArray()",
        "snippet": "    @Test\n    public void shouldScreamWhenExtraInterfacesIsANullArray() {\n        mock(IMethods.class, withSettings().extraInterfaces((Class[]) null));\n    }",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        inOrder = inOrder(mock, mockTwo);\n        \n        firstChunk();\n        secondChunk();\n        thirdChunk();\n        fourthChunk();\n    }",
        "begin_line": 27,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 41)",
            "(line 31,col 9)-(line 31,col 21)",
            "(line 32,col 9)-(line 32,col 22)",
            "(line 33,col 9)-(line 33,col 21)",
            "(line 34,col 9)-(line 34,col 22)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.firstChunk()",
        "snippet": "    private void firstChunk() {\n        mock.simpleMethod(1);\n        mock.simpleMethod(1);\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 29)",
            "(line 39,col 9)-(line 39,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.secondChunk()",
        "snippet": "    private void secondChunk() {\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)",
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.thirdChunk()",
        "snippet": "    private void thirdChunk() {\n        mock.simpleMethod(3);\n        mock.simpleMethod(3);\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 29)",
            "(line 47,col 9)-(line 47,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.fourthChunk()",
        "snippet": "    private void fourthChunk() {\n        mockTwo.simpleMethod(4);\n        mockTwo.simpleMethod(4);\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 32)",
            "(line 51,col 9)-(line 51,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointStackTraceToPreviousInvocation()",
        "snippet": "    @Test\n    public void shouldPointStackTraceToPreviousInvocation() {\n        inOrder.verify(mock, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mockTwo, times(2)).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mock).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"secondChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 54,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 62)",
            "(line 57,col 9)-(line 57,col 65)",
            "(line 59,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToThirdInteractionBecauseAtLeastOnceUsed()",
        "snippet": "    @Test\n    public void shouldPointToThirdInteractionBecauseAtLeastOnceUsed() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"thirdChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 67)",
            "(line 71,col 9)-(line 76,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToThirdChunkWhenTooLittleActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToThirdChunkWhenTooLittleActualInvocations() {\n        inOrder.verify(mock, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mockTwo, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"thirdChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 79,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 62)",
            "(line 82,col 9)-(line 82,col 65)",
            "(line 83,col 9)-(line 83,col 67)",
            "(line 85,col 9)-(line 90,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToFourthChunkBecauseTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToFourthChunkBecauseTooManyActualInvocations() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"fourthChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 93,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 67)",
            "(line 97,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.misplacedArgumentMatcherHere()",
        "snippet": "    private void misplacedArgumentMatcherHere() {\n        anyString();\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldPointOutMisplacedMatcher()",
        "snippet": "    @Test\n    public void shouldPointOutMisplacedMatcher() {\n        misplacedArgumentMatcherHere();\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"-> at \", e.getMessage());\n            assertContains(\"misplacedArgumentMatcherHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 32,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 39)",
            "(line 35,col 9)-(line 41,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.unfinishedStubbingHere()",
        "snippet": "    private void unfinishedStubbingHere() {\n        when(mock.simpleMethod());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldPointOutUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldPointOutUnfinishedStubbing() {\n        unfinishedStubbingHere();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (UnfinishedStubbingException e) {\n            assertContains(\"-> at \", e.getMessage());\n            assertContains(\"unfinishedStubbingHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 33)",
            "(line 52,col 9)-(line 58,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldShowWhereIsUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldShowWhereIsUnfinishedVerification() throws Exception {\n        unfinishedVerificationHere();\n        try {\n            mock(IMethods.class);\n            fail();\n        } catch (UnfinishedVerificationException e) {\n            assertContains(\"unfinishedVerificationHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 61,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 69,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.unfinishedVerificationHere()",
        "snippet": "    private void unfinishedVerificationHere() {\n        verify(mock);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerify()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceOnVerify() {\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerify\"));\n        }\n    }",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerifyNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceOnVerifyNoMoreInteractions() {\n        mock.oneArg(true);\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyNoMoreInteractions\"));\n        }\n    }",
        "begin_line": 46,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 26)",
            "(line 49,col 9)-(line 54,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerifyZeroInteractions()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceOnVerifyZeroInteractions() {\n        mock.oneArg(true);\n        try {\n            verifyZeroInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyZeroInteractions\"));\n        }\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 26)",
            "(line 60,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceOnMockitoException()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceOnMockitoException() {\n        verify(mock);\n        try {\n            verify(mock).oneArg(true); \n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceOnMockitoException\"));\n        }\n    }",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 21)",
            "(line 71,col 9)-(line 76,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenVerifyingInOrder()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceWhenVerifyingInOrder() {\n        InOrder inOrder = inOrder(mock);\n        mock.oneArg(true);\n        mock.oneArg(false);\n        \n        inOrder.verify(mock).oneArg(false);\n        try {\n            inOrder.verify(mock).oneArg(true);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenVerifyingInOrder\"));\n        }\n    }",
        "begin_line": 79,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 40)",
            "(line 82,col 9)-(line 82,col 26)",
            "(line 83,col 9)-(line 83,col 27)",
            "(line 85,col 9)-(line 85,col 43)",
            "(line 86,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenInOrderThrowsMockitoException()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceWhenInOrderThrowsMockitoException() {\n        try {\n            inOrder();\n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenInOrderThrowsMockitoException\"));\n        }\n    }",
        "begin_line": 94,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 101,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenInOrderVerifies()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceWhenInOrderVerifies() {\n        try {\n            InOrder inOrder = inOrder(mock);\n            inOrder.verify(null);\n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenInOrderVerifies\"));\n        }\n    }",
        "begin_line": 104,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceWhenThrowingExceptionFromMockHandler()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceWhenThrowingExceptionFromMockHandler() {\n        try {\n            when(mock.oneArg(true)).thenThrow(new Exception());\n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStackTraceWhenThrowingExceptionFromMockHandler\"));\n        }\n    }",
        "begin_line": 115,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 122,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldShowProperExceptionStackTrace()",
        "snippet": "    @Test\n    public void shouldShowProperExceptionStackTrace() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new RuntimeException());\n\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldShowProperExceptionStackTrace\"));\n        }\n    }",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 68)",
            "(line 129,col 9)-(line 134,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesTest.callMethodOnMock(java.lang.String)",
        "snippet": "    private void callMethodOnMock(String param) {\n        mock.simpleMethod(param);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesTest.verifyTheMock(int, java.lang.String)",
        "snippet": "    private void verifyTheMock(int times, String param) {\n        verify(mock, times(times)).simpleMethod(param);\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesTest.shouldShowActualAndExpectedWhenArgumentsAreDifferent()",
        "snippet": "    @Test\n    public void shouldShowActualAndExpectedWhenArgumentsAreDifferent() {\n        callMethodOnMock(\"foo\");\n        try {\n            verifyTheMock(1, \"not foo\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"callMethodOnMock(\", e.getMessage());\n            assertContains(\"verifyTheMock(\", e.getMessage());\n        }\n    }",
        "begin_line": 27,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 32)",
            "(line 30,col 9)-(line 36,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        first();\n        second();\n        third();\n        fourth();\n    }",
        "begin_line": 26,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 16)",
            "(line 29,col 9)-(line 29,col 17)",
            "(line 30,col 9)-(line 30,col 16)",
            "(line 31,col 9)-(line 31,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.first()",
        "snippet": "    private void first() {\n        mock.simpleMethod(1);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.second()",
        "snippet": "    private void second() {\n        mockTwo.simpleMethod(2);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.third()",
        "snippet": "    private void third() {\n        mock.simpleMethod(3);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.fourth()",
        "snippet": "    private void fourth() {\n        mockTwo.simpleMethod(4);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.shouldPointToTooManyInvocationsChunkOnError()",
        "snippet": "    @Test\n    public void shouldPointToTooManyInvocationsChunkOnError() {\n        try {\n            verify(mock, times(0)).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertContains(\"first(\", e.getMessage());\n        }\n    }   ",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 54,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.shouldNotPointStackTracesToRunnersCode()",
        "snippet": "    @Test\n    public void shouldNotPointStackTracesToRunnersCode() {\n        try {\n            verify(mock, times(0)).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertNotContains(\".runners.\", e.getMessage());\n        }\n    }   ",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java",
        "signature": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        one = mock(IMethods.class);\n        two = mock(IMethods.class);\n        three = mock(IMethods.class);\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 35)",
            "(line 24,col 9)-(line 24,col 35)",
            "(line 25,col 9)-(line 25,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java",
        "signature": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldStubUsingMatchers()",
        "snippet": "    @Test\n    public void shouldStubUsingMatchers() {\n        when(one.simpleMethod(2)).thenReturn(\"2\");\n        when(two.simpleMethod(anyString())).thenReturn(\"any\");\n        when(three.simpleMethod(startsWith(\"test\"))).thenThrow(new RuntimeException());\n\n        assertEquals(null, one.simpleMethod(1));\n        assertEquals(\"2\", one.simpleMethod(2));\n        \n        assertEquals(\"any\", two.simpleMethod(\"two\"));\n        assertEquals(\"any\", two.simpleMethod(\"two again\"));\n        \n        assertEquals(null, three.simpleMethod(\"three\"));\n        assertEquals(null, three.simpleMethod(\"three again\"));\n       \n        try {\n            three.simpleMethod(\"test three again\");\n            fail();\n        } catch (RuntimeException e) {}\n    }",
        "begin_line": 28,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 50)",
            "(line 31,col 9)-(line 31,col 62)",
            "(line 32,col 9)-(line 32,col 87)",
            "(line 34,col 9)-(line 34,col 48)",
            "(line 35,col 9)-(line 35,col 47)",
            "(line 37,col 9)-(line 37,col 53)",
            "(line 38,col 9)-(line 38,col 59)",
            "(line 40,col 9)-(line 40,col 56)",
            "(line 41,col 9)-(line 41,col 62)",
            "(line 43,col 9)-(line 46,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java",
        "signature": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void shouldVerifyUsingMatchers() {\n        stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\n        when(three.varargsObject(5, \"first arg\", \"second arg\")).thenReturn(\"stubbed\");\n\n        try {\n            one.oneArg(true);\n            fail();\n        } catch (RuntimeException e) {}\n\n        one.simpleMethod(100);\n        two.simpleMethod(\"test Mockito\");\n        three.varargsObject(10, \"first arg\", \"second arg\");\n        \n        assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n\n        verify(one).oneArg(eq(true));\n        verify(one).simpleMethod(anyInt());\n        verify(two).simpleMethod(startsWith(\"test\"));\n        verify(three).varargsObject(5, \"first arg\", \"second arg\");\n        verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"second\"));\n        \n        verifyNoMoreInteractions(one, two, three);\n        \n        try {\n            verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 49,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 72)",
            "(line 53,col 9)-(line 53,col 86)",
            "(line 55,col 9)-(line 58,col 39)",
            "(line 60,col 9)-(line 60,col 30)",
            "(line 61,col 9)-(line 61,col 41)",
            "(line 62,col 9)-(line 62,col 59)",
            "(line 64,col 9)-(line 64,col 83)",
            "(line 66,col 9)-(line 66,col 37)",
            "(line 67,col 9)-(line 67,col 43)",
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 69,col 66)",
            "(line 70,col 9)-(line 70,col 83)",
            "(line 72,col 9)-(line 72,col 50)",
            "(line 74,col 9)-(line 77,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCasting()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCasting() {\n        when(mock.objectArgMethod(any(String.class))).thenReturn(\"string\");\n        \n        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 75)",
            "(line 28,col 9)-(line 28,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldAnyBeActualAliasToAnyObject()",
        "snippet": "    @Test\n    public void shouldAnyBeActualAliasToAnyObject() {\n        mock.simpleMethod((Object) null);\n\n        verify(mock).simpleMethod(anyObject());\n        verify(mock).simpleMethod(any(Object.class));\n    }",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 41)",
            "(line 35,col 9)-(line 35,col 47)",
            "(line 36,col 9)-(line 36,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfLists()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfLists() {\n        //Below yields compiler warning:\n        //when(mock.listArgMethod(anyList())).thenReturn(\"list\");\n        when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n        \n        assertEquals(\"list\", mock.listArgMethod(new LinkedList<String>()));\n        assertEquals(\"list\", mock.listArgMethod(Collections.<String>emptyList()));\n    }",
        "begin_line": 39,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 77)",
            "(line 45,col 9)-(line 45,col 75)",
            "(line 46,col 9)-(line 46,col 82)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfSets()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfSets() {\n        //Below yields compiler warning:\n        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n        when(mock.setArgMethod(anySetOf(String.class))).thenReturn(\"set\");\n        \n        assertEquals(\"set\", mock.setArgMethod(new HashSet<String>()));\n        assertEquals(\"set\", mock.setArgMethod(Collections.<String>emptySet()));\n    }",
        "begin_line": 49,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 74)",
            "(line 55,col 9)-(line 55,col 70)",
            "(line 56,col 9)-(line 56,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfCollections()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n        //Below yields compiler warning:\n        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"col\");\n        \n        assertEquals(\"col\", mock.collectionArgMethod(new ArrayList<String>()));\n        assertEquals(\"col\", mock.collectionArgMethod(Collections.<String>emptyList()));\n    }",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 88)",
            "(line 65,col 9)-(line 65,col 79)",
            "(line 66,col 9)-(line 66,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Person.Person(int)",
        "snippet": "        public Person(int age) {\n            this.age = age;\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Person.getAge()",
        "snippet": "        public int getAge() {\n            return age;\n        }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 13)-(line 27,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "Foo(IMethods)",
        "snippet": "        public Foo(IMethods methods) {\n            this.methods = methods;\n        }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 13)-(line 36,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Foo.bar()",
        "snippet": "        public void bar() {\n            Person person = new Person(12);\n            methods.simpleMethod(person);\n        }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 43)",
            "(line 41,col 13)-(line 41,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.shouldUseAssertor()",
        "snippet": "    @Ignore(\"assertion idea is not for current release I guess\")\n    @Test\n    public void shouldUseAssertor() {\n        Foo foo = new Foo(mock);\n        foo.bar();\n        verify(mock).simpleMethod(argThat(new Assertion<Person>() {\n            public void asserts(Person person) {\n                assertEquals(12, person.getAge());\n            }\n        }));\n    }",
        "begin_line": 47,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 32)",
            "(line 51,col 9)-(line 51,col 18)",
            "(line 52,col 9)-(line 56,col 12)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Anonymous-b1d23d6a-b9ac-4a53-8e0e-5584dbb0cf9c.asserts(org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Person)",
        "snippet": "            public void asserts(Person person) {\n                assertEquals(12, person.getAge());\n            }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 17)-(line 54,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.argThat(org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Assertion<T>)",
        "snippet": "    public static <T> T argThat(Assertion<T> assertion) {\n        return null;\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java",
        "signature": "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.Assertion.asserts(T)",
        "snippet": "        void asserts(T object);",
        "begin_line": 64,
        "end_line": 64,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList()",
        "snippet": "    @Test\n    public void shouldAllowAnyList() {\n        when(mock.forList(anyList())).thenReturn(\"x\");\n        \n        assertEquals(\"x\", mock.forList(null));\n        assertEquals(\"x\", mock.forList(Arrays.asList(\"x\", \"y\")));\n        \n        verify(mock, times(2)).forList(anyList());\n    }",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 54)",
            "(line 34,col 9)-(line 34,col 46)",
            "(line 35,col 9)-(line 35,col 65)",
            "(line 37,col 9)-(line 37,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyCollection()",
        "snippet": "    @Test\n    public void shouldAllowAnyCollection() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"x\");\n        \n        assertEquals(\"x\", mock.forCollection(null));\n        assertEquals(\"x\", mock.forCollection(Arrays.asList(\"x\", \"y\")));\n        \n        verify(mock, times(2)).forCollection(anyCollection());\n    }",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 66)",
            "(line 44,col 9)-(line 44,col 52)",
            "(line 45,col 9)-(line 45,col 71)",
            "(line 47,col 9)-(line 47,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap()",
        "snippet": "    @Test\n    public void shouldAllowAnyMap() {\n        when(mock.forMap(anyMap())).thenReturn(\"x\");\n        \n        assertEquals(\"x\", mock.forMap(null));\n        assertEquals(\"x\", mock.forMap(new HashMap<String, String>()));\n        \n        verify(mock, times(2)).forMap(anyMap());\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 52)",
            "(line 54,col 9)-(line 54,col 45)",
            "(line 55,col 9)-(line 55,col 70)",
            "(line 57,col 9)-(line 57,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnySet()",
        "snippet": "    @Test\n    public void shouldAllowAnySet() {\n        when(mock.forSet(anySet())).thenReturn(\"x\");\n        \n        assertEquals(\"x\", mock.forSet(null));\n        assertEquals(\"x\", mock.forSet(new HashSet<String>()));\n        \n        verify(mock, times(2)).forSet(anySet());\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 52)",
            "(line 64,col 9)-(line 64,col 45)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 67,col 9)-(line 67,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.GenericMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/GenericMatchersTest.java",
        "signature": "org.mockitousage.matchers.GenericMatchersTest.Foo.sort(java.util.List<java.lang.String>)",
        "snippet": "        List<String> sort(List<String> otherList);",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.GenericMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/GenericMatchersTest.java",
        "signature": "org.mockitousage.matchers.GenericMatchersTest.Foo.convertDate(java.util.Date)",
        "snippet": "        String convertDate(Date date);",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.GenericMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/GenericMatchersTest.java",
        "signature": "org.mockitousage.matchers.GenericMatchersTest.shouldCompile()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void shouldCompile() {\n        when(sorter.convertDate(new Date())).thenReturn(\"one\");\n        when(sorter.convertDate((Date) anyObject())).thenReturn(\"two\");\n\n        //following requires warning suppression but allows setting anyList()\n        when(sorter.sort(anyList())).thenReturn(null);\n    }",
        "begin_line": 26,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 63)",
            "(line 30,col 9)-(line 30,col 71)",
            "(line 33,col 9)-(line 33,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.shouldDetectWrongNumberOfMatchersWhenStubbing()",
        "snippet": "    @Test\n    public void shouldDetectWrongNumberOfMatchersWhenStubbing() {\n        Mockito.when(mock.threeArgumentMethod(1, \"2\", \"3\")).thenReturn(null);\n        try {\n            Mockito.when(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).thenReturn(null);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {}\n    }",
        "begin_line": 27,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 77)",
            "(line 30,col 9)-(line 33,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.shouldDetectStupidUseOfMatchersWhenVerifying()",
        "snippet": "    @Test\n    public void shouldDetectStupidUseOfMatchersWhenVerifying() {\n        mock.oneArg(true);\n        eq(\"that's the stupid way\");\n        eq(\"of using matchers\");\n        try {\n            Mockito.verify(mock).oneArg(true);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {}\n    }",
        "begin_line": 36,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 26)",
            "(line 39,col 9)-(line 39,col 36)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 41,col 9)-(line 44,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.shouldScreamWhenMatchersAreInvalid()",
        "snippet": "    @Test\n    public void shouldScreamWhenMatchersAreInvalid() {\n        mock.simpleMethod(AdditionalMatchers.not(eq(\"asd\")));\n        try {\n            mock.simpleMethod(AdditionalMatchers.not(\"jkl\"));\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"No matchers found for Not(?).\", e.getMessage());\n        }\n\n        try {\n            mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), \"asd\"));\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"2 matchers expected, 1 recorded.\", e.getMessage());\n        }\n\n        try {\n            mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"3 matchers expected, 1 recorded.\", e.getMessage());\n        }\n    }",
        "begin_line": 47,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 61)",
            "(line 50,col 9)-(line 55,col 9)",
            "(line 57,col 9)-(line 62,col 9)",
            "(line 64,col 9)-(line 69,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.andOverloaded()",
        "snippet": "    @Test\n    public void andOverloaded() {\n        when(mock.oneArg(and(eq(false), eq(false)))).thenReturn(\"0\");\n        when(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).thenReturn(\"1\");\n        when(mock.oneArg(and(eq('a'), eq('a')))).thenReturn(\"2\");\n        when(mock.oneArg(and(eq((double) 1), eq((double) 1)))).thenReturn(\"3\");\n        when(mock.oneArg(and(eq((float) 1), eq((float) 1)))).thenReturn(\"4\");\n        when(mock.oneArg(and(eq((int) 1), eq((int) 1)))).thenReturn(\"5\");\n        when(mock.oneArg(and(eq((long) 1), eq((long) 1)))).thenReturn(\"6\");\n        when(mock.oneArg(and(eq((short) 1), eq((short) 1)))).thenReturn(\"7\");\n        when(mock.oneArg(and(Matchers.contains(\"a\"), Matchers.contains(\"d\")))).thenReturn(\"8\");\n        when(mock.oneArg(and(isA(Class.class), eq(Object.class)))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArg(false));\n        assertEquals(null, mock.oneArg(true));\n\n        assertEquals(\"1\", mock.oneArg((byte) 1));\n        assertEquals(\"2\", mock.oneArg('a'));\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"4\", mock.oneArg((float) 1));\n        assertEquals(\"5\", mock.oneArg((int) 1));\n        assertEquals(\"6\", mock.oneArg((long) 1));\n        assertEquals(\"7\", mock.oneArg((short) 1));\n\n        assertEquals(\"8\", mock.oneArg(\"abcde\"));\n        assertEquals(null, mock.oneArg(\"aaaaa\"));\n\n        assertEquals(\"9\", mock.oneArg(Object.class));\n    }",
        "begin_line": 34,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 69)",
            "(line 37,col 9)-(line 37,col 75)",
            "(line 38,col 9)-(line 38,col 65)",
            "(line 39,col 9)-(line 39,col 79)",
            "(line 40,col 9)-(line 40,col 77)",
            "(line 41,col 9)-(line 41,col 73)",
            "(line 42,col 9)-(line 42,col 75)",
            "(line 43,col 9)-(line 43,col 77)",
            "(line 44,col 9)-(line 44,col 95)",
            "(line 45,col 9)-(line 45,col 83)",
            "(line 47,col 9)-(line 47,col 46)",
            "(line 48,col 9)-(line 48,col 46)",
            "(line 50,col 9)-(line 50,col 49)",
            "(line 51,col 9)-(line 51,col 44)",
            "(line 52,col 9)-(line 52,col 51)",
            "(line 53,col 9)-(line 53,col 50)",
            "(line 54,col 9)-(line 54,col 48)",
            "(line 55,col 9)-(line 55,col 49)",
            "(line 56,col 9)-(line 56,col 50)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 59,col 9)-(line 59,col 49)",
            "(line 61,col 9)-(line 61,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.orOverloaded()",
        "snippet": "    @Test\n    public void orOverloaded() {\n        when(mock.oneArg(or(eq(false), eq(true)))).thenReturn(\"0\");\n        when(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).thenReturn(\"1\");\n        when(mock.oneArg(or(eq((char) 1), eq((char) 2)))).thenReturn(\"2\");\n        when(mock.oneArg(or(eq((double) 1), eq((double) 2)))).thenReturn(\"3\");\n        when(mock.oneArg(or(eq((float) 1), eq((float) 2)))).thenReturn(\"4\");\n        when(mock.oneArg(or(eq((int) 1), eq((int) 2)))).thenReturn(\"5\");\n        when(mock.oneArg(or(eq((long) 1), eq((long) 2)))).thenReturn(\"6\");\n        when(mock.oneArg(or(eq((short) 1), eq((short) 2)))).thenReturn(\"7\");\n        when(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).thenReturn(\"8\");\n        when(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArg(true));\n        assertEquals(\"0\", mock.oneArg(false));\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(\"2\", mock.oneArg((char) 1));\n        assertEquals(\"3\", mock.oneArg((double) 2));\n        assertEquals(\"4\", mock.oneArg((float) 1));\n        assertEquals(\"5\", mock.oneArg((int) 2));\n        assertEquals(\"6\", mock.oneArg((long) 1));\n        assertEquals(\"7\", mock.oneArg((short) 1));\n\n        assertEquals(\"8\", mock.oneArg(\"jkl\"));\n        assertEquals(\"8\", mock.oneArg(\"asd\"));\n        assertEquals(null, mock.oneArg(\"asdjkl\"));\n\n        assertEquals(\"9\", mock.oneArg(Object.class));\n        assertEquals(null, mock.oneArg(String.class));\n    }",
        "begin_line": 64,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 67)",
            "(line 67,col 9)-(line 67,col 74)",
            "(line 68,col 9)-(line 68,col 74)",
            "(line 69,col 9)-(line 69,col 78)",
            "(line 70,col 9)-(line 70,col 76)",
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 74)",
            "(line 73,col 9)-(line 73,col 76)",
            "(line 74,col 9)-(line 74,col 68)",
            "(line 75,col 9)-(line 75,col 85)",
            "(line 77,col 9)-(line 77,col 45)",
            "(line 78,col 9)-(line 78,col 46)",
            "(line 80,col 9)-(line 80,col 49)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 51)",
            "(line 83,col 9)-(line 83,col 50)",
            "(line 84,col 9)-(line 84,col 48)",
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 50)",
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 50)",
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.notOverloaded()",
        "snippet": "    @Test\n    public void notOverloaded() {\n        when(mock.oneArg(not(eq(false)))).thenReturn(\"0\");\n        when(mock.oneArg(not(eq((byte) 1)))).thenReturn(\"1\");\n        when(mock.oneArg(not(eq('a')))).thenReturn(\"2\");\n        when(mock.oneArg(not(eq((double) 1)))).thenReturn(\"3\");\n        when(mock.oneArg(not(eq((float) 1)))).thenReturn(\"4\");\n        when(mock.oneArg(not(eq((int) 1)))).thenReturn(\"5\");\n        when(mock.oneArg(not(eq((long) 1)))).thenReturn(\"6\");\n        when(mock.oneArg(not(eq((short) 1)))).thenReturn(\"7\");\n        when(mock.oneArg(not(Matchers.contains(\"a\")))).thenReturn(\"8\");\n        when(mock.oneArg(not(isA(Class.class)))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArg(true));\n        assertEquals(null, mock.oneArg(false));\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(\"2\", mock.oneArg('b'));\n        assertEquals(\"3\", mock.oneArg((double) 2));\n        assertEquals(\"4\", mock.oneArg((float) 2));\n        assertEquals(\"5\", mock.oneArg((int) 2));\n        assertEquals(\"6\", mock.oneArg((long) 2));\n        assertEquals(\"7\", mock.oneArg((short) 2));\n        assertEquals(\"8\", mock.oneArg(\"bcde\"));\n\n        assertEquals(\"9\", mock.oneArg(new Object()));\n        assertEquals(null, mock.oneArg(Class.class));\n    }",
        "begin_line": 96,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 58)",
            "(line 99,col 9)-(line 99,col 61)",
            "(line 100,col 9)-(line 100,col 56)",
            "(line 101,col 9)-(line 101,col 63)",
            "(line 102,col 9)-(line 102,col 62)",
            "(line 103,col 9)-(line 103,col 60)",
            "(line 104,col 9)-(line 104,col 61)",
            "(line 105,col 9)-(line 105,col 62)",
            "(line 106,col 9)-(line 106,col 71)",
            "(line 107,col 9)-(line 107,col 65)",
            "(line 109,col 9)-(line 109,col 45)",
            "(line 110,col 9)-(line 110,col 47)",
            "(line 112,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 115,col 9)-(line 115,col 50)",
            "(line 116,col 9)-(line 116,col 48)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 118,col 9)-(line 118,col 50)",
            "(line 119,col 9)-(line 119,col 47)",
            "(line 121,col 9)-(line 121,col 53)",
            "(line 122,col 9)-(line 122,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessOrEqualOverloaded()",
        "snippet": "    @Test\n    public void lessOrEqualOverloaded() {\n        when(mock.oneArg(leq((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(leq((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(leq((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(leq((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(leq((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(leq((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(leq(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 1));\n        assertEquals(null, mock.oneArg((byte) 2));\n\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"7\", mock.oneArg((short) 0));\n        assertEquals(\"4\", mock.oneArg((float) -5));\n        assertEquals(\"5\", mock.oneArg((int) -2));\n        assertEquals(\"6\", mock.oneArg((long) -3));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"1.1\")));\n    }",
        "begin_line": 125,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 57)",
            "(line 128,col 9)-(line 128,col 59)",
            "(line 129,col 9)-(line 129,col 58)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 131,col 9)-(line 131,col 57)",
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 68)",
            "(line 135,col 9)-(line 135,col 49)",
            "(line 136,col 9)-(line 136,col 50)",
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 50)",
            "(line 140,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 49)",
            "(line 142,col 9)-(line 142,col 50)",
            "(line 144,col 9)-(line 144,col 62)",
            "(line 145,col 9)-(line 145,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessThanOverloaded()",
        "snippet": "    @Test\n    public void lessThanOverloaded() {\n        when(mock.oneArg(lt((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(lt((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(lt((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(lt((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(lt((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(lt((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(lt(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 0));\n        assertEquals(null, mock.oneArg((byte) 1));\n\n        assertEquals(\"3\", mock.oneArg((double) 0));\n        assertEquals(\"7\", mock.oneArg((short) 0));\n        assertEquals(\"4\", mock.oneArg((float) -4));\n        assertEquals(\"5\", mock.oneArg((int) -34));\n        assertEquals(\"6\", mock.oneArg((long) -6));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"23\")));\n    }",
        "begin_line": 148,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 56)",
            "(line 151,col 9)-(line 151,col 58)",
            "(line 152,col 9)-(line 152,col 57)",
            "(line 153,col 9)-(line 153,col 55)",
            "(line 154,col 9)-(line 154,col 56)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 156,col 67)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 50)",
            "(line 161,col 9)-(line 161,col 51)",
            "(line 162,col 9)-(line 162,col 50)",
            "(line 163,col 9)-(line 163,col 51)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 50)",
            "(line 167,col 9)-(line 167,col 62)",
            "(line 168,col 9)-(line 168,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterOrEqualMatcherOverloaded()",
        "snippet": "    @Test\n    public void greaterOrEqualMatcherOverloaded() {\n        when(mock.oneArg(geq((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(geq((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(geq((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(geq((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(geq((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(geq((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(geq(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(null, mock.oneArg((byte) 0));\n\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"7\", mock.oneArg((short) 2));\n        assertEquals(\"4\", mock.oneArg((float) 3));\n        assertEquals(\"5\", mock.oneArg((int) 4));\n        assertEquals(\"6\", mock.oneArg((long) 5));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.00\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n    }",
        "begin_line": 171,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 57)",
            "(line 174,col 9)-(line 174,col 59)",
            "(line 175,col 9)-(line 175,col 58)",
            "(line 176,col 9)-(line 176,col 56)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 178,col 58)",
            "(line 179,col 9)-(line 179,col 68)",
            "(line 181,col 9)-(line 181,col 49)",
            "(line 182,col 9)-(line 182,col 50)",
            "(line 184,col 9)-(line 184,col 51)",
            "(line 185,col 9)-(line 185,col 50)",
            "(line 186,col 9)-(line 186,col 50)",
            "(line 187,col 9)-(line 187,col 48)",
            "(line 188,col 9)-(line 188,col 49)",
            "(line 190,col 9)-(line 190,col 63)",
            "(line 191,col 9)-(line 191,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterThanMatcherOverloaded()",
        "snippet": "    @Test\n    public void greaterThanMatcherOverloaded() {\n        when(mock.oneArg(gt((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(gt((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(gt((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(gt((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(gt((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(gt((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(gt(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(null, mock.oneArg((byte) 1));\n\n        assertEquals(\"3\", mock.oneArg((double) 2));\n        assertEquals(\"7\", mock.oneArg((short) 2));\n        assertEquals(\"4\", mock.oneArg((float) 3));\n        assertEquals(\"5\", mock.oneArg((int) 2));\n        assertEquals(\"6\", mock.oneArg((long) 5));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n    }",
        "begin_line": 194,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 56)",
            "(line 197,col 9)-(line 197,col 58)",
            "(line 198,col 9)-(line 198,col 57)",
            "(line 199,col 9)-(line 199,col 55)",
            "(line 200,col 9)-(line 200,col 56)",
            "(line 201,col 9)-(line 201,col 57)",
            "(line 202,col 9)-(line 202,col 67)",
            "(line 204,col 9)-(line 204,col 49)",
            "(line 205,col 9)-(line 205,col 50)",
            "(line 207,col 9)-(line 207,col 51)",
            "(line 208,col 9)-(line 208,col 50)",
            "(line 209,col 9)-(line 209,col 50)",
            "(line 210,col 9)-(line 210,col 48)",
            "(line 211,col 9)-(line 211,col 49)",
            "(line 213,col 9)-(line 213,col 62)",
            "(line 214,col 9)-(line 214,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.compareToMatcher()",
        "snippet": "    @Test\n    public void compareToMatcher() {\n        when(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).thenReturn(\"0\");\n\n        assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n    }",
        "begin_line": 217,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 72)",
            "(line 221,col 9)-(line 221,col 63)",
            "(line 222,col 9)-(line 222,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.anyStringMatcher()",
        "snippet": "    @Test\n    public void anyStringMatcher() {\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        \n        assertEquals(\"1\", mock.oneArg(\"\"));\n        assertEquals(\"1\", mock.oneArg(\"any string\"));\n        assertEquals(null, mock.oneArg((Object) null));\n    }",
        "begin_line": 225,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 55)",
            "(line 229,col 9)-(line 229,col 43)",
            "(line 230,col 9)-(line 230,col 53)",
            "(line 231,col 9)-(line 231,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.anyMatcher()",
        "snippet": "    @Test\n    public void anyMatcher() {\n        when(mock.oneArg(anyBoolean())).thenReturn(\"0\");\n        when(mock.oneArg(anyByte())).thenReturn(\"1\");\n        when(mock.oneArg(anyChar())).thenReturn(\"2\");\n        when(mock.oneArg(anyDouble())).thenReturn(\"3\");\n        when(mock.oneArg(anyFloat())).thenReturn(\"4\");\n        when(mock.oneArg(anyInt())).thenReturn(\"5\");\n        when(mock.oneArg(anyLong())).thenReturn(\"6\");\n        when(mock.oneArg(anyShort())).thenReturn(\"7\");\n        when(mock.oneArg((String) anyObject())).thenReturn(\"8\");\n        when(mock.oneArg(anyObject())).thenReturn(\"9\");\n        \n        assertEquals(\"0\", mock.oneArg(true));\n        assertEquals(\"0\", mock.oneArg(false));\n\n        assertEquals(\"1\", mock.oneArg((byte) 1));\n        assertEquals(\"2\", mock.oneArg((char) 1));\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"4\", mock.oneArg((float) 889));\n        assertEquals(\"5\", mock.oneArg((int) 1));\n        assertEquals(\"6\", mock.oneArg((long) 1));\n        assertEquals(\"7\", mock.oneArg((short) 1));\n        assertEquals(\"8\", mock.oneArg(\"Test\"));\n\n        assertEquals(\"9\", mock.oneArg(new Object()));\n        assertEquals(\"9\", mock.oneArg(new HashMap()));\n    }",
        "begin_line": 234,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 56)",
            "(line 237,col 9)-(line 237,col 53)",
            "(line 238,col 9)-(line 238,col 53)",
            "(line 239,col 9)-(line 239,col 55)",
            "(line 240,col 9)-(line 240,col 54)",
            "(line 241,col 9)-(line 241,col 52)",
            "(line 242,col 9)-(line 242,col 53)",
            "(line 243,col 9)-(line 243,col 54)",
            "(line 244,col 9)-(line 244,col 64)",
            "(line 245,col 9)-(line 245,col 55)",
            "(line 247,col 9)-(line 247,col 45)",
            "(line 248,col 9)-(line 248,col 46)",
            "(line 250,col 9)-(line 250,col 49)",
            "(line 251,col 9)-(line 251,col 49)",
            "(line 252,col 9)-(line 252,col 51)",
            "(line 253,col 9)-(line 253,col 52)",
            "(line 254,col 9)-(line 254,col 48)",
            "(line 255,col 9)-(line 255,col 49)",
            "(line 256,col 9)-(line 256,col 50)",
            "(line 257,col 9)-(line 257,col 47)",
            "(line 259,col 9)-(line 259,col 53)",
            "(line 260,col 9)-(line 260,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.shouldArrayEqualsDealWithNullArray()",
        "snippet": "    @Test\n    public void shouldArrayEqualsDealWithNullArray() throws Exception {\n        Object[] nullArray = null;\n        when(mock.oneArray(aryEq(nullArray))).thenReturn(\"null\");\n\n        assertEquals(\"null\", mock.oneArray(nullArray));\n\n        mock = mock(IMethods.class);\n\n        try {\n            verify(mock).oneArray(aryEq(nullArray));\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"oneArray(null)\", e.getMessage());\n        }\n    }",
        "begin_line": 263,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 34)",
            "(line 266,col 9)-(line 266,col 65)",
            "(line 268,col 9)-(line 268,col 55)",
            "(line 270,col 9)-(line 270,col 36)",
            "(line 272,col 9)-(line 277,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments() {        \n        List list = Mockito.mock(List.class);\n        \n        list.add(\"test\"); // testing fix for issue 20\n        list.contains(new Object[] {\"1\"});\n        \n        Mockito.verify(list).contains(new Object[] {\"1\", \"2\", \"3\"});    \n    }",
        "begin_line": 280,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 45)",
            "(line 284,col 9)-(line 284,col 25)",
            "(line 285,col 9)-(line 285,col 42)",
            "(line 287,col 9)-(line 287,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.arrayEqualsMatcher()",
        "snippet": "    @Test\n    public void arrayEqualsMatcher() {\n        when(mock.oneArray(aryEq(new boolean[] { true, false, false }))).thenReturn(\"0\");\n        when(mock.oneArray(aryEq(new byte[] { 1 }))).thenReturn(\"1\");\n        when(mock.oneArray(aryEq(new char[] { 1 }))).thenReturn(\"2\");\n        when(mock.oneArray(aryEq(new double[] { 1 }))).thenReturn(\"3\");\n        when(mock.oneArray(aryEq(new float[] { 1 }))).thenReturn(\"4\");\n        when(mock.oneArray(aryEq(new int[] { 1 }))).thenReturn(\"5\");\n        when(mock.oneArray(aryEq(new long[] { 1 }))).thenReturn(\"6\");\n        when(mock.oneArray(aryEq(new short[] { 1 }))).thenReturn(\"7\");\n        when(mock.oneArray(aryEq(new String[] { \"Test\" }))).thenReturn(\"8\");\n        when(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n        assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n        assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n        assertEquals(\"3\", mock.oneArray(new double[] { 1 }));\n        assertEquals(\"4\", mock.oneArray(new float[] { 1 }));\n        assertEquals(\"5\", mock.oneArray(new int[] { 1 }));\n        assertEquals(\"6\", mock.oneArray(new long[] { 1 }));\n        assertEquals(\"7\", mock.oneArray(new short[] { 1 }));\n        assertEquals(\"8\", mock.oneArray(new String[] { \"Test\" }));\n        assertEquals(\"9\", mock.oneArray(new Object[] { \"Test\", new Integer(4) }));\n\n        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(999) }));\n        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(4), \"x\" }));\n\n        assertEquals(null, mock.oneArray(new boolean[] { true, false }));\n        assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));\n    }",
        "begin_line": 290,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 89)",
            "(line 293,col 9)-(line 293,col 69)",
            "(line 294,col 9)-(line 294,col 69)",
            "(line 295,col 9)-(line 295,col 71)",
            "(line 296,col 9)-(line 296,col 70)",
            "(line 297,col 9)-(line 297,col 68)",
            "(line 298,col 9)-(line 298,col 69)",
            "(line 299,col 9)-(line 299,col 70)",
            "(line 300,col 9)-(line 300,col 76)",
            "(line 301,col 9)-(line 301,col 92)",
            "(line 303,col 9)-(line 303,col 79)",
            "(line 304,col 9)-(line 304,col 59)",
            "(line 305,col 9)-(line 305,col 59)",
            "(line 306,col 9)-(line 306,col 61)",
            "(line 307,col 9)-(line 307,col 60)",
            "(line 308,col 9)-(line 308,col 58)",
            "(line 309,col 9)-(line 309,col 59)",
            "(line 310,col 9)-(line 310,col 60)",
            "(line 311,col 9)-(line 311,col 66)",
            "(line 312,col 9)-(line 312,col 82)",
            "(line 314,col 9)-(line 314,col 85)",
            "(line 315,col 9)-(line 315,col 88)",
            "(line 317,col 9)-(line 317,col 73)",
            "(line 318,col 9)-(line 318,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterOrEqualMatcher()",
        "snippet": "    @Test\n    public void greaterOrEqualMatcher() {\n        when(mock.oneArg(geq(7))).thenReturn(\">= 7\");\n        when(mock.oneArg(lt(7))).thenReturn(\"< 7\");\n\n        assertEquals(\">= 7\", mock.oneArg(7));\n        assertEquals(\">= 7\", mock.oneArg(8));\n        assertEquals(\">= 7\", mock.oneArg(9));\n\n        assertEquals(\"< 7\", mock.oneArg(6));\n        assertEquals(\"< 7\", mock.oneArg(6));\n    }",
        "begin_line": 321,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 53)",
            "(line 324,col 9)-(line 324,col 51)",
            "(line 326,col 9)-(line 326,col 45)",
            "(line 327,col 9)-(line 327,col 45)",
            "(line 328,col 9)-(line 328,col 45)",
            "(line 330,col 9)-(line 330,col 44)",
            "(line 331,col 9)-(line 331,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterThanMatcher()",
        "snippet": "    @Test\n    public void greaterThanMatcher() {\n        when(mock.oneArg(gt(7))).thenReturn(\"> 7\");\n        when(mock.oneArg(leq(7))).thenReturn(\"<= 7\");\n\n        assertEquals(\"> 7\", mock.oneArg(8));\n        assertEquals(\"> 7\", mock.oneArg(9));\n        assertEquals(\"> 7\", mock.oneArg(10));\n\n        assertEquals(\"<= 7\", mock.oneArg(7));\n        assertEquals(\"<= 7\", mock.oneArg(6));\n    }",
        "begin_line": 334,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 51)",
            "(line 337,col 9)-(line 337,col 53)",
            "(line 339,col 9)-(line 339,col 44)",
            "(line 340,col 9)-(line 340,col 44)",
            "(line 341,col 9)-(line 341,col 45)",
            "(line 343,col 9)-(line 343,col 45)",
            "(line 344,col 9)-(line 344,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessOrEqualMatcher()",
        "snippet": "    @Test\n    public void lessOrEqualMatcher() {\n        when(mock.oneArg(leq(7))).thenReturn(\"<= 7\");\n        when(mock.oneArg(gt(7))).thenReturn(\"> 7\");\n\n        assertEquals(\"<= 7\", mock.oneArg(7));\n        assertEquals(\"<= 7\", mock.oneArg(6));\n        assertEquals(\"<= 7\", mock.oneArg(5));\n\n        assertEquals(\"> 7\", mock.oneArg(8));\n        assertEquals(\"> 7\", mock.oneArg(9));\n    }",
        "begin_line": 347,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 53)",
            "(line 350,col 9)-(line 350,col 51)",
            "(line 352,col 9)-(line 352,col 45)",
            "(line 353,col 9)-(line 353,col 45)",
            "(line 354,col 9)-(line 354,col 45)",
            "(line 356,col 9)-(line 356,col 44)",
            "(line 357,col 9)-(line 357,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessThanMatcher()",
        "snippet": "    @Test\n    public void lessThanMatcher() {\n        when(mock.oneArg(lt(7))).thenReturn(\"< 7\");\n        when(mock.oneArg(geq(7))).thenReturn(\">= 7\");\n\n        assertEquals(\"< 7\", mock.oneArg(5));\n        assertEquals(\"< 7\", mock.oneArg(6));\n        assertEquals(\"< 7\", mock.oneArg(4));\n\n        assertEquals(\">= 7\", mock.oneArg(7));\n        assertEquals(\">= 7\", mock.oneArg(8));\n    }",
        "begin_line": 360,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 51)",
            "(line 363,col 9)-(line 363,col 53)",
            "(line 365,col 9)-(line 365,col 44)",
            "(line 366,col 9)-(line 366,col 44)",
            "(line 367,col 9)-(line 367,col 44)",
            "(line 369,col 9)-(line 369,col 45)",
            "(line 370,col 9)-(line 370,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.orMatcher()",
        "snippet": "    @Test\n    public void orMatcher() {\n        when(mock.oneArg(anyInt())).thenReturn(\"other\");\n        when(mock.oneArg(or(eq(7), eq(9)))).thenReturn(\"7 or 9\");\n\n        assertEquals(\"other\", mock.oneArg(10));\n        assertEquals(\"7 or 9\", mock.oneArg(7));\n        assertEquals(\"7 or 9\", mock.oneArg(9));\n    }",
        "begin_line": 373,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 56)",
            "(line 376,col 9)-(line 376,col 65)",
            "(line 378,col 9)-(line 378,col 47)",
            "(line 379,col 9)-(line 379,col 47)",
            "(line 380,col 9)-(line 380,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.nullMatcher()",
        "snippet": "    @Test\n    public void nullMatcher() {\n        when(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).thenReturn(\"1\");\n        when(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n        assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n    }",
        "begin_line": 383,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 80)",
            "(line 386,col 9)-(line 386,col 85)",
            "(line 388,col 9)-(line 388,col 65)",
            "(line 389,col 9)-(line 389,col 73)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.notNullMatcher()",
        "snippet": "    @Test\n    public void notNullMatcher() {\n        when(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).thenReturn(\"1\");\n        when(mock.threeArgumentMethod(eq(1), not(isNotNull()), eq(\"\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n        assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n    }",
        "begin_line": 392,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 81)",
            "(line 395,col 9)-(line 395,col 88)",
            "(line 397,col 9)-(line 397,col 73)",
            "(line 398,col 9)-(line 398,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.findMatcher()",
        "snippet": "    @Test\n    public void findMatcher() {\n        when(mock.oneArg(find(\"([a-z]+)\\\\d\"))).thenReturn(\"1\");\n\n        assertEquals(\"1\", mock.oneArg(\"ab12\"));\n        assertEquals(null, mock.oneArg(\"12345\"));\n        assertEquals(null, mock.oneArg((Object) null));\n    }",
        "begin_line": 401,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 63)",
            "(line 405,col 9)-(line 405,col 47)",
            "(line 406,col 9)-(line 406,col 49)",
            "(line 407,col 9)-(line 407,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.matchesMatcher()",
        "snippet": "    @Test\n    public void matchesMatcher() {\n        when(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).thenReturn(\"1\");\n        when(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"a12\"));\n        assertEquals(\"2\", mock.oneArg(\"131\"));\n        assertEquals(null, mock.oneArg(\"blah\"));\n    }",
        "begin_line": 410,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 67)",
            "(line 413,col 9)-(line 413,col 64)",
            "(line 415,col 9)-(line 415,col 46)",
            "(line 416,col 9)-(line 416,col 46)",
            "(line 417,col 9)-(line 417,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.containsMatcher()",
        "snippet": "    @Test\n    public void containsMatcher() {\n        when(mock.oneArg(Matchers.contains(\"ell\"))).thenReturn(\"1\");\n        when(mock.oneArg(Matchers.contains(\"ld\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"hello\"));\n        assertEquals(\"2\", mock.oneArg(\"world\"));\n        assertEquals(null, mock.oneArg(\"xlx\"));\n    }",
        "begin_line": 420,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 68)",
            "(line 423,col 9)-(line 423,col 67)",
            "(line 425,col 9)-(line 425,col 48)",
            "(line 426,col 9)-(line 426,col 48)",
            "(line 427,col 9)-(line 427,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.startsWithMatcher()",
        "snippet": "    @Test\n    public void startsWithMatcher() {\n        when(mock.oneArg(startsWith(\"ab\"))).thenReturn(\"1\");\n        when(mock.oneArg(startsWith(\"bc\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n        assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n        assertEquals(null, mock.oneArg(\"ba quake\"));\n    }",
        "begin_line": 430,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 60)",
            "(line 433,col 9)-(line 433,col 60)",
            "(line 435,col 9)-(line 435,col 51)",
            "(line 436,col 9)-(line 436,col 51)",
            "(line 437,col 9)-(line 437,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.endsWithMatcher()",
        "snippet": "    @Test\n    public void endsWithMatcher() {\n        when(mock.oneArg(Matchers.endsWith(\"ab\"))).thenReturn(\"1\");\n        when(mock.oneArg(Matchers.endsWith(\"bc\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"xab\"));\n        assertEquals(\"2\", mock.oneArg(\"xbc\"));\n        assertEquals(null, mock.oneArg(\"ac\"));\n    }",
        "begin_line": 440,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 67)",
            "(line 443,col 9)-(line 443,col 67)",
            "(line 445,col 9)-(line 445,col 46)",
            "(line 446,col 9)-(line 446,col 46)",
            "(line 447,col 9)-(line 447,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.deltaMatcher()",
        "snippet": "    @Test\n    public void deltaMatcher() {\n        when(mock.oneArg(eq(1.0D, 0.1D))).thenReturn(\"1\");\n        when(mock.oneArg(eq(2.0D, 0.1D))).thenReturn(\"2\");\n        when(mock.oneArg(eq(1.0F, 0.1F))).thenReturn(\"3\");\n        when(mock.oneArg(eq(2.0F, 0.1F))).thenReturn(\"4\");\n        when(mock.oneArg(eq(2.0F, 0.1F))).thenReturn(\"4\");\n\n        assertEquals(\"1\", mock.oneArg(1.0));\n        assertEquals(\"1\", mock.oneArg(0.91));\n        assertEquals(\"1\", mock.oneArg(1.09));\n        assertEquals(\"2\", mock.oneArg(2.0));\n\n        assertEquals(\"3\", mock.oneArg(1.0F));\n        assertEquals(\"3\", mock.oneArg(0.91F));\n        assertEquals(\"3\", mock.oneArg(1.09F));\n        assertEquals(\"4\", mock.oneArg(2.1F));\n\n        assertEquals(null, mock.oneArg(2.2F));\n    }",
        "begin_line": 450,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 58)",
            "(line 453,col 9)-(line 453,col 58)",
            "(line 454,col 9)-(line 454,col 58)",
            "(line 455,col 9)-(line 455,col 58)",
            "(line 456,col 9)-(line 456,col 58)",
            "(line 458,col 9)-(line 458,col 44)",
            "(line 459,col 9)-(line 459,col 45)",
            "(line 460,col 9)-(line 460,col 45)",
            "(line 461,col 9)-(line 461,col 44)",
            "(line 463,col 9)-(line 463,col 45)",
            "(line 464,col 9)-(line 464,col 46)",
            "(line 465,col 9)-(line 465,col 46)",
            "(line 466,col 9)-(line 466,col 45)",
            "(line 468,col 9)-(line 468,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.deltaMatcherPrintsItself()",
        "snippet": "    @Test\n    public void deltaMatcherPrintsItself() {\n        try {\n            verify(mock).oneArg(eq(1.0D, 0.1D));\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"eq(1.0, 0.1)\", e.getMessage());\n        }\n    }",
        "begin_line": 471,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 478,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.sameMatcher()",
        "snippet": "    @Test\n    public void sameMatcher() {\n        Object one = new String(\"1243\");\n        Object two = new String(\"1243\");\n        Object three = new String(\"1243\");\n\n        assertNotSame(one, two);\n        assertEquals(one, two);\n        assertEquals(two, three);\n\n        when(mock.oneArg(same(one))).thenReturn(\"1\");\n        when(mock.oneArg(same(two))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(one));\n        assertEquals(\"2\", mock.oneArg(two));\n        assertEquals(null, mock.oneArg(three));\n    }",
        "begin_line": 481,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 40)",
            "(line 484,col 9)-(line 484,col 40)",
            "(line 485,col 9)-(line 485,col 42)",
            "(line 487,col 9)-(line 487,col 32)",
            "(line 488,col 9)-(line 488,col 31)",
            "(line 489,col 9)-(line 489,col 33)",
            "(line 491,col 9)-(line 491,col 53)",
            "(line 492,col 9)-(line 492,col 53)",
            "(line 494,col 9)-(line 494,col 44)",
            "(line 495,col 9)-(line 495,col 44)",
            "(line 496,col 9)-(line 496,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAnyXMatchersAcceptNull()",
        "snippet": "    @Test\n    public void shouldAnyXMatchersAcceptNull() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        assertEquals(\"0\", mock.oneArg((Object) null));\n        assertEquals(\"1\", mock.oneArg((String) null));\n        assertEquals(\"2\", mock.forList(null));\n        assertEquals(\"3\", mock.forMap(null));\n        assertEquals(\"4\", mock.forCollection(null));\n        assertEquals(\"5\", mock.forSet(null));\n    }",
        "begin_line": 26,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 55)",
            "(line 29,col 9)-(line 29,col 55)",
            "(line 30,col 9)-(line 30,col 54)",
            "(line 31,col 9)-(line 31,col 52)",
            "(line 32,col 9)-(line 32,col 66)",
            "(line 33,col 9)-(line 33,col 52)",
            "(line 35,col 9)-(line 35,col 54)",
            "(line 36,col 9)-(line 36,col 54)",
            "(line 37,col 9)-(line 37,col 46)",
            "(line 38,col 9)-(line 38,col 45)",
            "(line 39,col 9)-(line 39,col 52)",
            "(line 40,col 9)-(line 40,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAnyPrimiteWraperMatchersAcceptNull()",
        "snippet": "    @Test\n    public void shouldAnyPrimiteWraperMatchersAcceptNull() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        assertEquals(\"0\", mock.forInteger(null));\n        assertEquals(\"1\", mock.forCharacter(null));\n        assertEquals(\"2\", mock.forShort(null));\n        assertEquals(\"3\", mock.forByte(null));\n        assertEquals(\"4\", mock.forBoolean(null));\n        assertEquals(\"5\", mock.forLong(null));\n        assertEquals(\"6\", mock.forFloat(null));\n        assertEquals(\"7\", mock.forDouble(null));\n    }",
        "begin_line": 43,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 56)",
            "(line 46,col 9)-(line 46,col 59)",
            "(line 47,col 9)-(line 47,col 56)",
            "(line 48,col 9)-(line 48,col 54)",
            "(line 49,col 9)-(line 49,col 60)",
            "(line 50,col 9)-(line 50,col 54)",
            "(line 51,col 9)-(line 51,col 56)",
            "(line 52,col 9)-(line 52,col 58)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 51)",
            "(line 56,col 9)-(line 56,col 47)",
            "(line 57,col 9)-(line 57,col 46)",
            "(line 58,col 9)-(line 58,col 49)",
            "(line 59,col 9)-(line 59,col 46)",
            "(line 60,col 9)-(line 60,col 47)",
            "(line 61,col 9)-(line 61,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.ContainsX.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object o) {\n            return ((String) o).contains(\"X\");\n        }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 13)-(line 22,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.ContainsX.describeTo(org.hamcrest.Description)",
        "snippet": "        public void describeTo(Description d) {\n            d.appendText(\"contains 'X'\");\n        }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 13)-(line 26,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.shouldAcceptHamcrestMatcher()",
        "snippet": "    @Test\n    public void shouldAcceptHamcrestMatcher() {\n        when(mock.simpleMethod(argThat(new ContainsX()))).thenReturn(\"X\");\n        assertNull(mock.simpleMethod(\"blah\"));\n        assertEquals(\"X\", mock.simpleMethod(\"blah X blah\"));\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 74)",
            "(line 35,col 9)-(line 35,col 46)",
            "(line 36,col 9)-(line 36,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.shouldVerifyUsingHamcrestMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyUsingHamcrestMatcher() {\n        mock.simpleMethod(\"blah\");\n        \n        try {\n            verify(mock).simpleMethod(argThat(new ContainsX()));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"contains 'X'\", e.getMessage());\n        }\n    }",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 34)",
            "(line 43,col 9)-(line 48,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java",
        "signature": "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest.shouldAllowMixingRawArgumentsWithMatchers()",
        "snippet": "    @Ignore(\"prototyping new feature that allows to avoid eq() matchers when raw args passed\")\n    @Test\n    public void shouldAllowMixingRawArgumentsWithMatchers() {\n        mock.varargs(\"1\", \"2\", \"3\");\n        verify(mock).varargs(\"1\", anyString(), \"3\");\n        \n        verify(mock).varargs(anyBoolean(), false);\n    }",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 36)",
            "(line 39,col 9)-(line 39,col 52)",
            "(line 41,col 9)-(line 41,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Person.Person(java.lang.Integer)",
        "snippet": "        public Person(Integer age) {\n            this.age = age;\n        }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 13)-(line 24,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Person.getAge()",
        "snippet": "        public int getAge() {\n            return age;\n        }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 28,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Emailer.Emailer(org.mockitousage.matchers.CapturingArgumentsTest.EmailService)",
        "snippet": "        public Emailer(EmailService service) {\n            this.service = service;\n        }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 13)-(line 37,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Emailer.email(java.lang.Integer...)",
        "snippet": "        public void email(Integer ... personId) {\n            for (Integer i : personId) {\n                Person person = new Person(i);\n                service.sendEmailTo(person);\n            }\n        }",
        "begin_line": 40,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 44,col 13)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.EmailService.sendEmailTo(org.mockitousage.matchers.CapturingArgumentsTest.Person)",
        "snippet": "        boolean sendEmailTo(Person person);",
        "begin_line": 49,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnCapturedArgument()",
        "snippet": "    @Test\n    public void shouldAllowAssertionsOnCapturedArgument() {\n        //when\n        emailer.email(12);\n        \n        //then\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        verify(emailService).sendEmailTo(argument.capture());\n        \n        assertEquals(12, argument.getValue().getAge());\n    }",
        "begin_line": 55,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 26)",
            "(line 61,col 9)-(line 61,col 71)",
            "(line 62,col 9)-(line 62,col 61)",
            "(line 64,col 9)-(line 64,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnAllCapturedArguments()",
        "snippet": "    @Test\n    public void shouldAllowAssertionsOnAllCapturedArguments() {\n        //when\n        emailer.email(11, 12);\n        \n        //then\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n        List<Person> allValues = argument.getAllValues();\n        \n        assertEquals(11, allValues.get(0).getAge());\n        assertEquals(12, allValues.get(1).getAge());\n    }",
        "begin_line": 67,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 30)",
            "(line 73,col 9)-(line 73,col 71)",
            "(line 74,col 9)-(line 74,col 76)",
            "(line 75,col 9)-(line 75,col 57)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnLastArgument()",
        "snippet": "    @Test\n    public void shouldAllowAssertionsOnLastArgument() {\n        //when\n        emailer.email(11, 12, 13);\n        \n        //then\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n        \n        assertEquals(13, argument.getValue().getAge());\n    }",
        "begin_line": 81,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 34)",
            "(line 87,col 9)-(line 87,col 71)",
            "(line 88,col 9)-(line 88,col 76)",
            "(line 90,col 9)-(line 90,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldPrintCaptorMatcher()",
        "snippet": "    @Test\n    public void shouldPrintCaptorMatcher() {\n        //given\n        ArgumentCaptor<Person> person = new ArgumentCaptor<Person>();\n        \n        try {\n            //when\n            verify(emailService).sendEmailTo(person.capture());\n            fail();\n        } catch(WantedButNotInvoked e) {\n            //then\n            assertContains(\"<Capturing argument>\", e.getMessage());\n        }\n    }",
        "begin_line": 93,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 69)",
            "(line 98,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnCapturedNull()",
        "snippet": "    @Test\n    public void shouldAllowAssertionsOnCapturedNull() {\n        //when\n        emailService.sendEmailTo(null);\n        \n        //then\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        verify(emailService).sendEmailTo(argument.capture());\n        assertEquals(null, argument.getValue());\n    }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 39)",
            "(line 114,col 9)-(line 114,col 71)",
            "(line 115,col 9)-(line 115,col 61)",
            "(line 116,col 9)-(line 116,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowCapturingForStubbing()",
        "snippet": "    @Test\n    public void shouldAllowCapturingForStubbing() {\n        //given\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        when(emailService.sendEmailTo(argument.capture())).thenReturn(false);\n        \n        //when\n        emailService.sendEmailTo(new Person(10));\n        \n        //then\n        assertEquals(10, argument.getValue().getAge());\n    }",
        "begin_line": 119,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 71)",
            "(line 123,col 9)-(line 123,col 77)",
            "(line 126,col 9)-(line 126,col 49)",
            "(line 129,col 9)-(line 129,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.shouldSaySomethingSmartWhenMisused()",
        "snippet": "    @Test\n    public void shouldSaySomethingSmartWhenMisused() {\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        try {\n            argument.getValue();\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 132,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 71)",
            "(line 135,col 9)-(line 138,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java",
        "signature": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.shouldNotThrowCCE()",
        "snippet": "    @Test\n    public void shouldNotThrowCCE() {\n        mock.simpleMethod(new Object());\n\n        try {\n            // calling overloaded method so that matcher will be called with\n            // different type\n            verify(mock).simpleMethod(argThat(isStringWithTextFoo()));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n    }",
        "begin_line": 21,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 40)",
            "(line 25,col 9)-(line 30,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java",
        "signature": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.isStringWithTextFoo()",
        "snippet": "    private ArgumentMatcher<String> isStringWithTextFoo() {\n        return new ArgumentMatcher<String>() {\n            @Override\n            public boolean matches(Object argument) {\n                // casting that should not be thrown:\n                String str = (String) argument;\n                return str.equals(\"foo\");\n            }\n        };\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 41,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java",
        "signature": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.Anonymous-5f8e0e6f-8e28-44a5-b139-6046b5fa457e.matches(java.lang.Object)",
        "snippet": "            @Override\n            public boolean matches(Object argument) {\n                // casting that should not be thrown:\n                String str = (String) argument;\n                return str.equals(\"foo\");\n            }",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 17)-(line 38,col 47)",
            "(line 39,col 17)-(line 39,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.Parent.Parent(int, java.lang.String)",
        "snippet": "        public Parent(int parentField, String protectedParentField) {\n            this.parentField = parentField;\n            this.protectedParentField = protectedParentField;\n        }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 22,col 13)-(line 22,col 43)",
            "(line 23,col 13)-(line 23,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.Child.Child(int, java.lang.String, int, java.lang.Object)",
        "snippet": "        public Child(int parentField, String protectedParentField, int childFieldOne, Object childFieldTwo) {\n            super(parentField, protectedParentField);\n            this.childFieldOne = childFieldOne;\n            this.childFieldTwo = childFieldTwo;\n        } ",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 31,col 13)-(line 31,col 53)",
            "(line 32,col 13)-(line 32,col 47)",
            "(line 33,col 13)-(line 33,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.MockMe.run(org.mockitousage.matchers.ReflectionMatchersTest.Child)",
        "snippet": "        void run(Child child);",
        "begin_line": 38,
        "end_line": 38,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(MockMe.class);\n        \n        Child actual = new Child(1, \"foo\", 2, \"bar\");\n        mock.run(actual);\n    }",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 34)",
            "(line 47,col 9)-(line 47,col 53)",
            "(line 48,col 9)-(line 48,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqual()",
        "snippet": "    @Test\n    public void shouldMatchWhenFieldValuesEqual() throws Exception {\n        Child wanted = new Child(1, \"foo\", 2, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 54,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchWhenFieldValuesDiffer()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchWhenFieldValuesDiffer() throws Exception {\n        Child wanted = new Child(1, \"foo\", 2, \"bar XXX\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchAgain()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchAgain() throws Exception {\n        Child wanted = new Child(1, \"foo\", 999, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchYetAgain()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchYetAgain() throws Exception {\n        Child wanted = new Child(1, \"XXXXX\", 2, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 55)",
            "(line 72,col 9)-(line 72,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatch()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatch() throws Exception {\n        Child wanted = new Child(234234, \"foo\", 2, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 58)",
            "(line 78,col 9)-(line 78,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqualWithOneFieldExcluded()",
        "snippet": "    @Test\n    public void shouldMatchWhenFieldValuesEqualWithOneFieldExcluded() throws Exception {\n        Child wanted = new Child(1, \"foo\", 2, \"excluded\");\n        verify(mock).run(refEq(wanted, \"childFieldTwo\"));\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 58)",
            "(line 84,col 9)-(line 84,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded()",
        "snippet": "    @Test\n    public void shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded() throws Exception {\n        Child wanted = new Child(234234, \"foo\", 2, \"excluded\");\n        verify(mock).run(refEq(wanted, \"childFieldTwo\", \"parentField\"));\n        verify(mock).run(refEq(wanted, \"parentField\", \"childFieldTwo\"));\n    }",
        "begin_line": 87,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 63)",
            "(line 90,col 9)-(line 90,col 72)",
            "(line 91,col 9)-(line 91,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchWithFieldsExclusion()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchWithFieldsExclusion() throws Exception {\n        Child wanted = new Child(234234, \"foo\", 2, \"excluded\");\n        verify(mock).run(refEq(wanted, \"childFieldTwo\"));\n    }    ",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 63)",
            "(line 97,col 9)-(line 97,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.ContainsFoo.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            return ((String) arg).contains(\"foo\");\n        }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 13)-(line 21,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.IsAnyBoolean.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            return true;\n        }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 13)-(line 27,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.IsSorZ.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            Character character = (Character) arg;\n            return character.equals('s') || character.equals('z');\n        }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 50)",
            "(line 34,col 13)-(line 34,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.IsZeroOrOne.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            Number number = (Number) arg;\n            if (number.intValue() == 0 || number.intValue() == 1) {\n                return true;\n            }\n            return false;\n        }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 41)",
            "(line 41,col 13)-(line 43,col 13)",
            "(line 44,col 13)-(line 44,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomBooleanMatcher()",
        "snippet": "    @Test\n    public void shouldUseCustomBooleanMatcher() {\n        when(mock.oneArg(booleanThat(new IsAnyBoolean()))).thenReturn(\"foo\");\n        \n        assertEquals(\"foo\", mock.oneArg(true));\n        assertEquals(\"foo\", mock.oneArg(false));\n        \n        assertEquals(null, mock.oneArg(\"x\"));\n    }",
        "begin_line": 55,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 77)",
            "(line 59,col 9)-(line 59,col 47)",
            "(line 60,col 9)-(line 60,col 48)",
            "(line 62,col 9)-(line 62,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomCharMatcher()",
        "snippet": "    @Test\n    public void shouldUseCustomCharMatcher() {\n        when(mock.oneArg(charThat(new IsSorZ()))).thenReturn(\"foo\");\n      \n        assertEquals(\"foo\", mock.oneArg('s'));\n        assertEquals(\"foo\", mock.oneArg('z'));\n        assertEquals(null, mock.oneArg('x'));\n    }",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 68)",
            "(line 69,col 9)-(line 69,col 46)",
            "(line 70,col 9)-(line 70,col 46)",
            "(line 71,col 9)-(line 71,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Article.Article(int, java.lang.String)",
        "snippet": "        public Article(int pageNumber, String headline) {\n            super();\n            this.pageNumber = pageNumber;\n            this.headline = headline;\n        }",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 13)-(line 80,col 20)",
            "(line 81,col 13)-(line 81,col 41)",
            "(line 82,col 13)-(line 82,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Article.getPageNumber()",
        "snippet": "        public int getPageNumber() {\n            return pageNumber;\n        }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 13)-(line 86,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Article.getHeadline()",
        "snippet": "        public String getHeadline() {\n            return headline;\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomPrimitiveNumberMatchers()",
        "snippet": "    @Test\n    public void shouldUseCustomPrimitiveNumberMatchers() {\n        when(mock.oneArg(byteThat(new IsZeroOrOne<Byte>()))).thenReturn(\"byte\");\n        when(mock.oneArg(shortThat(new IsZeroOrOne<Short>()))).thenReturn(\"short\");\n        when(mock.oneArg(intThat(new IsZeroOrOne<Integer>()))).thenReturn(\"int\");\n        when(mock.oneArg(longThat(new IsZeroOrOne<Long>()))).thenReturn(\"long\");\n        when(mock.oneArg(floatThat(new IsZeroOrOne<Float>()))).thenReturn(\"float\");\n        when(mock.oneArg(doubleThat(new IsZeroOrOne<Double>()))).thenReturn(\"double\");\n        \n        assertEquals(\"byte\", mock.oneArg((byte) 0));\n        assertEquals(\"short\", mock.oneArg((short) 1));\n        assertEquals(\"int\", mock.oneArg(0));\n        assertEquals(\"long\", mock.oneArg(1L));\n        assertEquals(\"float\", mock.oneArg(0F));\n        assertEquals(\"double\", mock.oneArg(1.0));\n        \n        assertEquals(null, mock.oneArg(2));\n        assertEquals(null, mock.oneArg(\"foo\"));\n    }",
        "begin_line": 94,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 80)",
            "(line 97,col 9)-(line 97,col 83)",
            "(line 98,col 9)-(line 98,col 81)",
            "(line 99,col 9)-(line 99,col 80)",
            "(line 100,col 9)-(line 100,col 83)",
            "(line 101,col 9)-(line 101,col 86)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 44)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 107,col 47)",
            "(line 108,col 9)-(line 108,col 49)",
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 111,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomObjectMatcher()",
        "snippet": "    @Test\n    public void shouldUseCustomObjectMatcher() {\n        when(mock.oneArg(argThat(new ContainsFoo()))).thenReturn(\"foo\");\n        \n        assertEquals(\"foo\", mock.oneArg(\"foo\"));\n        assertEquals(null, mock.oneArg(\"bar\"));\n    }",
        "begin_line": 114,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 72)",
            "(line 118,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 119,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldCustomMatcherPrintDescriptionBasedOnName()",
        "snippet": "    @Test\n    public void shouldCustomMatcherPrintDescriptionBasedOnName() {\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod(containsTest());\n            fail();\n        } catch (AssertionError e) {\n            assertContains(\"<String that contains xxx>\", e.getMessage());\n        }\n    }",
        "begin_line": 122,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 33)",
            "(line 126,col 9)-(line 131,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.containsTest()",
        "snippet": "    private String containsTest() {\n        return argThat(new StringThatContainsXxx());\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.StringThatContainsXxx.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object argument) {\n            String arg = (String) argument;\n            return arg.contains(\"xxx\");\n        }",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 13)-(line 140,col 43)",
            "(line 141,col 13)-(line 141,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldAnonymousCustomMatcherPrintDefaultDescription()",
        "snippet": "    @Test\n    public void shouldAnonymousCustomMatcherPrintDefaultDescription() {\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod((String) argThat(new ArgumentMatcher<Object>() {\n                @Override public boolean matches(Object argument) {\n                    return false;\n                }}));\n            fail();\n        } catch (AssertionError e) {\n            assertContains(\"<custom argument matcher>\", e.getMessage());\n            assertContains(\"foo\", e.getMessage());\n        }\n    }",
        "begin_line": 145,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 33)",
            "(line 149,col 9)-(line 158,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Anonymous-6d684082-a85b-4e1d-9082-e04a348807ba.matches(java.lang.Object)",
        "snippet": "                @Override public boolean matches(Object argument) {\n                    return false;\n                }}));",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 21)-(line 152,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AssertingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AssertingMatchersTest.java",
        "signature": "org.mockitousage.matchers.AssertingMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AssertingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AssertingMatchersTest.java",
        "signature": "org.mockitousage.matchers.AssertingMatchersTest.Article.Article(int, java.lang.String)",
        "snippet": "        public Article(int pageNumber, String headline) {\n            super();\n            this.pageNumber = pageNumber;\n            this.headline = headline;\n        }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 20)",
            "(line 35,col 13)-(line 35,col 41)",
            "(line 36,col 13)-(line 36,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AssertingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AssertingMatchersTest.java",
        "signature": "org.mockitousage.matchers.AssertingMatchersTest.Article.getPageNumber()",
        "snippet": "        public int getPageNumber() {\n            return pageNumber;\n        }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AssertingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AssertingMatchersTest.java",
        "signature": "org.mockitousage.matchers.AssertingMatchersTest.Article.getHeadline()",
        "snippet": "        public String getHeadline() {\n            return headline;\n        }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 13)-(line 44,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AssertingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AssertingMatchersTest.java",
        "signature": "org.mockitousage.matchers.AssertingMatchersTest.shouldUseCustomCharMatcher1()",
        "snippet": "    @Test\n    public void shouldUseCustomCharMatcher1() {\n        mock.simpleMethod(new Article(12, \"Fabulous article\"));\n        \n        Article articleOnPage12 = argThat(new ArgumentMatcher<Article>() {\n            public boolean matches(Object argument) {\n                Article o = (Article) argument;\n                assertEquals(12, o.getPageNumber());\n                return true;\n            }} );\n        \n        verify(mock).simpleMethod(articleOnPage12);\n        \n        //Assertors?\n        \n//        verify(mock).simpleMethod(argThat(new ArgumentAssertor<Article>() {\n//            public void assertArgument(Object argument) {\n//                Article o = (Article) argument;\n//                assertEquals(\"two\", o.getHeadline());\n//            }} ));\n    }",
        "begin_line": 48,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 63)",
            "(line 52,col 9)-(line 57,col 17)",
            "(line 59,col 9)-(line 59,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AssertingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AssertingMatchersTest.java",
        "signature": "org.mockitousage.matchers.AssertingMatchersTest.Anonymous-2804a092-dcdd-4a07-b419-8af8cfde6a7f.matches(java.lang.Object)",
        "snippet": "            public boolean matches(Object argument) {\n                Article o = (Article) argument;\n                assertEquals(12, o.getPageNumber());\n                return true;\n            }} );",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 17)-(line 54,col 47)",
            "(line 55,col 17)-(line 55,col 52)",
            "(line 56,col 17)-(line 56,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.Foo.len(java.lang.String)",
        "snippet": "        public int len(String text) {\n            return text.length();\n        }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 13)-(line 21,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.Foo.size(java.util.Map)",
        "snippet": "        public int size(Map map) {\n            return map.size();\n        }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 13)-(line 25,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.Foo.size(java.util.Collection)",
        "snippet": "        public int size(Collection collection) {\n            return collection.size();\n        }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 13)-(line 29,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.shouldNotThrowNPE()",
        "snippet": "    @Test\n    public void shouldNotThrowNPE() throws Exception {\n        Foo foo = new Foo();\n        Foo spy = spy(foo);\n        \n        spy.len(anyString());\n        spy.size(anyMap());\n        spy.size(anyList());\n        spy.size(anyCollection());\n        spy.size(anySet());\n    }",
        "begin_line": 33,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 28)",
            "(line 36,col 9)-(line 36,col 27)",
            "(line 38,col 9)-(line 38,col 29)",
            "(line 39,col 9)-(line 39,col 27)",
            "(line 40,col 9)-(line 40,col 28)",
            "(line 41,col 9)-(line 41,col 34)",
            "(line 42,col 9)-(line 42,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.pleaseMakeStackTracesClean()",
        "snippet": "    @Before\n    public void pleaseMakeStackTracesClean() {\n        makeStackTracesClean();\n    }",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.InheritMe.getInherited()",
        "snippet": "        protected String getInherited() {\n            return inherited;\n        }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 13)-(line 25,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.getName()",
        "snippet": "        public String getName() {\n            return guessName().name;\n        }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.guessName()",
        "snippet": "        Name guessName() {\n            return defaultName;\n        }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 13)-(line 37,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.howMuchDidYouInherit()",
        "snippet": "        public String howMuchDidYouInherit() {\n            return getInherited();\n        }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.getNameButDelegateToMethodThatThrows()",
        "snippet": "        public String getNameButDelegateToMethodThatThrows() {\n            throwSomeException();\n            return guessName().name;\n        }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 33)",
            "(line 46,col 13)-(line 46,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.throwSomeException()",
        "snippet": "        private void throwSomeException() {\n            throw new RuntimeException(\"boo\");\n        }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 13)-(line 50,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Name.Name(java.lang.String)",
        "snippet": "        public Name(String name) {\n            this.name = name;\n        }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 13)-(line 58,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldCallRealMethdsEvenDelegatedToOtherSelfMethod()",
        "snippet": "    @Test\n    public void shouldCallRealMethdsEvenDelegatedToOtherSelfMethod() {\n        // when\n        String name = spy.getName();\n\n        // then\n        assertEquals(\"Default name\", name);\n    }",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 36)",
            "(line 70,col 9)-(line 70,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldAllowStubbingOfMethodsThatDelegateToOtherMethods()",
        "snippet": "    @Test\n    public void shouldAllowStubbingOfMethodsThatDelegateToOtherMethods() {\n        // when\n        when(spy.getName()).thenReturn(\"foo\");\n        \n        // then\n        assertEquals(\"foo\", spy.getName());\n    }",
        "begin_line": 73,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 46)",
            "(line 79,col 9)-(line 79,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods()",
        "snippet": "    @Test\n    public void shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods() {\n        // when\n        doThrow(new RuntimeException(\"appetite for destruction\"))\n            .when(spy).getNameButDelegateToMethodThatThrows();\n        \n        // then\n        try {\n            spy.getNameButDelegateToMethodThatThrows();\n            fail();\n        } catch(Exception e) {\n            assertEquals(\"appetite for destruction\", e.getMessage());\n        }\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 86,col 62)",
            "(line 89,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldStackTraceGetFilteredOnUserExceptions()",
        "snippet": "    @Test\n    public void shouldStackTraceGetFilteredOnUserExceptions() {\n        try {\n            // when\n            spy.getNameButDelegateToMethodThatThrows();\n            fail();\n        } catch (Throwable t) {\n            // then\n            assertThat(t, ExtraMatchers.hasMethodsInStackTrace(\n                    \"throwSomeException\",\n                    \"getNameButDelegateToMethodThatThrows\",\n                    \"shouldStackTraceGetFilteredOnUserExceptions\"\n                    ));\n        }\n    }",
        "begin_line": 97,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.verifyTheStackTrace()",
        "snippet": "    public void verifyTheStackTrace() {\n        spy.getNameButDelegateToMethodThatThrows();\n    }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "    @Test //manual verification",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() {\n        // when\n        spy.getName();\n\n        // then\n        verify(spy).guessName();\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 22)",
            "(line 124,col 9)-(line 124,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() {\n        // given\n        when(spy.guessName()).thenReturn(new Name(\"John\"));\n        // when\n        String name = spy.getName();\n        // then\n        assertEquals(\"John\", name);\n    }",
        "begin_line": 127,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 59)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 134,col 9)-(line 134,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldDealWithPrivateFieldsOfSubclasses()",
        "snippet": "    @Test\n    public void shouldDealWithPrivateFieldsOfSubclasses() {\n        assertEquals(\"100$\", spy.howMuchDidYouInherit());\n    }",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        assertEquals(\"one\", spy.get(0));\n        assertEquals(\"two\", spy.get(1));\n        \n        verify(spy).add(\"one\");\n        verify(spy).add(\"two\");\n    }",
        "begin_line": 29,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 23)",
            "(line 32,col 9)-(line 32,col 23)",
            "(line 34,col 9)-(line 34,col 40)",
            "(line 35,col 9)-(line 35,col 40)",
            "(line 37,col 9)-(line 37,col 31)",
            "(line 38,col 9)-(line 38,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() {\n        spy.add(\"one\");\n        when(spy.get(0))\n            .thenReturn(\"1\")\n            .thenReturn(\"1 again\");\n               \n        assertEquals(\"1\", spy.get(0));\n        assertEquals(\"1 again\", spy.get(0));\n        assertEquals(\"one\", spy.iterator().next());\n        \n        assertEquals(1, spy.size());\n    }",
        "begin_line": 41,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 23)",
            "(line 44,col 9)-(line 46,col 35)",
            "(line 48,col 9)-(line 48,col 38)",
            "(line 49,col 9)-(line 49,col 44)",
            "(line 50,col 9)-(line 50,col 51)",
            "(line 52,col 9)-(line 52,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldAllowOverridingStubs()",
        "snippet": "    @Test\n    public void shouldAllowOverridingStubs() {\n        when(spy.contains(anyObject())).thenReturn(true);\n        when(spy.contains(\"foo\")).thenReturn(false);\n        \n        assertTrue(spy.contains(\"bar\"));\n        assertFalse(spy.contains(\"foo\"));\n    }",
        "begin_line": 55,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 57)",
            "(line 58,col 9)-(line 58,col 52)",
            "(line 60,col 9)-(line 60,col 40)",
            "(line 61,col 9)-(line 61,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStubVoid()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void shouldStubVoid() {\n        stubVoid(spy)\n            .toReturn()\n            .toThrow(new RuntimeException())\n            .on().clear();\n\n        spy.add(\"one\");\n        spy.clear();\n        try {\n            spy.clear();\n            fail();\n        } catch (RuntimeException e) {}\n            \n        assertEquals(1, spy.size());\n    }",
        "begin_line": 64,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 70,col 26)",
            "(line 72,col 9)-(line 72,col 23)",
            "(line 73,col 9)-(line 73,col 20)",
            "(line 74,col 9)-(line 77,col 39)",
            "(line 79,col 9)-(line 79,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStubWithDoReturnAndVerify()",
        "snippet": "    @Test\n    public void shouldStubWithDoReturnAndVerify() {\n        doReturn(\"foo\")\n        .doReturn(\"bar\")\n        .when(spy).get(0);\n        \n        assertEquals(\"foo\", spy.get(0));\n        assertEquals(\"bar\", spy.get(0));\n        \n        verify(spy, times(2)).get(0);\n        verifyNoMoreInteractions(spy);\n    }",
        "begin_line": 82,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 26)",
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 91,col 9)-(line 91,col 37)",
            "(line 92,col 9)-(line 92,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyInOrder() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        InOrder inOrder = inOrder(spy);\n        inOrder.verify(spy).add(\"one\");\n        inOrder.verify(spy).add(\"two\");\n        \n        verifyNoMoreInteractions(spy);\n    }",
        "begin_line": 95,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 23)",
            "(line 98,col 9)-(line 98,col 23)",
            "(line 100,col 9)-(line 100,col 39)",
            "(line 101,col 9)-(line 101,col 39)",
            "(line 102,col 9)-(line 102,col 39)",
            "(line 104,col 9)-(line 104,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyInOrderAndFail()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAndFail() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        InOrder inOrder = inOrder(spy);\n        inOrder.verify(spy).add(\"two\");\n        try {\n            inOrder.verify(spy).add(\"one\");\n            fail();\n        } catch (VerificationInOrderFailure f) {}\n    }",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 23)",
            "(line 110,col 9)-(line 110,col 23)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 117,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNumberOfTimes()",
        "snippet": "    @Test\n    public void shouldVerifyNumberOfTimes() {\n        spy.add(\"one\");\n        spy.add(\"one\");\n        \n        verify(spy, times(2)).add(\"one\");\n        verifyNoMoreInteractions(spy);\n    }",
        "begin_line": 120,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 23)",
            "(line 123,col 9)-(line 123,col 23)",
            "(line 125,col 9)-(line 125,col 41)",
            "(line 126,col 9)-(line 126,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNumberOfTimesAndFail()",
        "snippet": "    @Test\n    public void shouldVerifyNumberOfTimesAndFail() {\n        spy.add(\"one\");\n        spy.add(\"one\");\n        \n        try {\n            verify(spy, times(3)).add(\"one\");\n            fail();\n        } catch (TooLittleActualInvocations e) {}\n    }",
        "begin_line": 129,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 23)",
            "(line 132,col 9)-(line 132,col 23)",
            "(line 134,col 9)-(line 137,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNoMoreInteractionsAndFail()",
        "snippet": "    @Test\n    public void shouldVerifyNoMoreInteractionsAndFail() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        verify(spy).add(\"one\");\n        try {\n            verifyNoMoreInteractions(spy);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 140,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 23)",
            "(line 143,col 9)-(line 143,col 23)",
            "(line 145,col 9)-(line 145,col 31)",
            "(line 146,col 9)-(line 149,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldToString()",
        "snippet": "    @Test\n    public void shouldToString() {\n        spy.add(\"foo\");\n        assertEquals(\"[foo]\" , spy.toString());\n    }",
        "begin_line": 152,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 23)",
            "(line 155,col 9)-(line 155,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldDealWithAnonymousClasses()",
        "snippet": "    @Test\n    public void shouldDealWithAnonymousClasses() {\n        try {\n            spy(new Foo() {});\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"cannot mock\", e.getMessage());\n        }\n    }",
        "begin_line": 160,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldSayNiceMessageWhenSpyingOnPrivateClass()",
        "snippet": "    @Test\n    public void shouldSayNiceMessageWhenSpyingOnPrivateClass() throws Exception {\n        List real = Arrays.asList(new String[] {\"first\", \"second\"});\n        try {\n            spy(real);\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"Most likely it is a private class that is not visible by Mockito\", e.getMessage());\n        }\n    }",
        "begin_line": 170,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 68)",
            "(line 173,col 9)-(line 178,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.setup()",
        "snippet": "    @Before \n    public void setup() {\n        mock = mock(LinkedList.class);\n        mockTwo = mock(HashMap.class);\n    }",
        "begin_line": 28,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 38)",
            "(line 31,col 9)-(line 31,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubWithThrowable()",
        "snippet": "    @Test\n    public void shouldStubWithThrowable() throws Exception {\n        IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n        when(mock.add(\"throw\")).thenThrow(expected);\n        \n        try {\n            mock.add(\"throw\");\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertEquals(expected, e);\n        }\n    }",
        "begin_line": 34,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 91)",
            "(line 37,col 9)-(line 37,col 52)",
            "(line 39,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldSetThrowableToVoidMethod()",
        "snippet": "    @Test\n    public void shouldSetThrowableToVoidMethod() throws Exception {\n        IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n        \n        stubVoid(mock).toThrow(expected).on().clear();\n        try {\n            mock.clear();\n            fail();\n        } catch (Exception e) {\n            assertEquals(expected, e);\n        }\n    } ",
        "begin_line": 47,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 91)",
            "(line 51,col 9)-(line 51,col 54)",
            "(line 52,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldLastStubbingVoidBeImportant()",
        "snippet": "    @Test\n    public void shouldLastStubbingVoidBeImportant() throws Exception {\n        stubVoid(mock).toThrow(new ExceptionOne()).on().clear();\n        stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();\n        \n        try {\n            mock.clear();\n            fail();\n        } catch (ExceptionTwo e) {}\n    }",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 64)",
            "(line 63,col 9)-(line 63,col 64)",
            "(line 65,col 9)-(line 68,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation()",
        "snippet": "    @Test\n    public void shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation() throws Exception {\n        when(mock.get(1)).thenThrow(new ExceptionOne());\n        \n        try {\n            when(mock.get(1)).thenThrow(new ExceptionTwo());\n            fail();\n        } catch (ExceptionOne e) {}\n    }   ",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 56)",
            "(line 75,col 9)-(line 78,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldAllowSettingCheckedException()",
        "snippet": "    @Test\n    public void shouldAllowSettingCheckedException() throws Exception {\n        Reader reader = mock(Reader.class);\n        IOException ioException = new IOException();\n        \n        when(reader.read()).thenThrow(ioException);\n        \n        try {\n            reader.read();\n            fail();\n        } catch (Exception e) {\n            assertEquals(ioException, e);\n        }\n    }",
        "begin_line": 81,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 43)",
            "(line 84,col 9)-(line 84,col 52)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 88,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldAllowSettingError()",
        "snippet": "    @Test\n    public void shouldAllowSettingError() throws Exception {\n        Error error = new Error();\n        \n        when(mock.add(\"quake\")).thenThrow(error);\n        \n        try {\n            mock.add(\"quake\");\n            fail();\n        } catch (Error e) {\n            assertEquals(error, e);\n        }\n    }    ",
        "begin_line": 96,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 34)",
            "(line 100,col 9)-(line 100,col 49)",
            "(line 102,col 9)-(line 107,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingInvalidCheckedException()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n        when(mock.add(\"monkey island\")).thenThrow(new Exception());\n    }",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingNullThrowable()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowable() throws Exception {\n        when(mock.add(\"monkey island\")).thenThrow(null);\n    }    ",
        "begin_line": 115,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldMixThrowablesAndReturnsOnDifferentMocks()",
        "snippet": "    @Test\n    public void shouldMixThrowablesAndReturnsOnDifferentMocks() throws Exception {\n        when(mock.add(\"ExceptionOne\")).thenThrow(new ExceptionOne());\n        when(mock.getLast()).thenReturn(\"last\");\n        stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();\n        \n        stubVoid(mockTwo).toThrow(new ExceptionThree()).on().clear();\n        when(mockTwo.containsValue(\"ExceptionFour\")).thenThrow(new ExceptionFour());\n        when(mockTwo.get(\"Are you there?\")).thenReturn(\"Yes!\");\n\n        assertNull(mockTwo.get(\"foo\"));\n        assertTrue(mockTwo.keySet().isEmpty());\n        assertEquals(\"Yes!\", mockTwo.get(\"Are you there?\"));\n        try {\n            mockTwo.clear();\n            fail();\n        } catch (ExceptionThree e) {}\n        try {\n            mockTwo.containsValue(\"ExceptionFour\");\n            fail();\n        } catch (ExceptionFour e) {}\n        \n        assertNull(mock.getFirst());\n        assertEquals(\"last\", mock.getLast());\n        try {\n            mock.add(\"ExceptionOne\");\n            fail();\n        } catch (ExceptionOne e) {}\n        try {\n            mock.clear();\n            fail();\n        } catch (ExceptionTwo e) {}\n    }",
        "begin_line": 120,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 69)",
            "(line 123,col 9)-(line 123,col 48)",
            "(line 124,col 9)-(line 124,col 64)",
            "(line 126,col 9)-(line 126,col 69)",
            "(line 127,col 9)-(line 127,col 84)",
            "(line 128,col 9)-(line 128,col 63)",
            "(line 130,col 9)-(line 130,col 39)",
            "(line 131,col 9)-(line 131,col 47)",
            "(line 132,col 9)-(line 132,col 60)",
            "(line 133,col 9)-(line 136,col 37)",
            "(line 137,col 9)-(line 140,col 36)",
            "(line 142,col 9)-(line 142,col 36)",
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 151,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubbingWithThrowableBeVerifiable()",
        "snippet": "    @Test\n    public void shouldStubbingWithThrowableBeVerifiable() {\n        when(mock.size()).thenThrow(new RuntimeException());\n        stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n        \n        try {\n            mock.size();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        try {\n            mock.clone();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        verify(mock).size();\n        verify(mock).clone();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 154,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 60)",
            "(line 157,col 9)-(line 157,col 68)",
            "(line 159,col 9)-(line 162,col 39)",
            "(line 164,col 9)-(line 167,col 39)",
            "(line 169,col 9)-(line 169,col 28)",
            "(line 170,col 9)-(line 170,col 29)",
            "(line 171,col 9)-(line 171,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubbingWithThrowableFailVerification()",
        "snippet": "    @Test\n    public void shouldStubbingWithThrowableFailVerification() {\n        when(mock.size()).thenThrow(new RuntimeException());\n        stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n        \n        verifyZeroInteractions(mock);\n        \n        mock.add(\"test\");\n        \n        try {\n            verify(mock).size();\n            fail();\n        } catch (WantedButNotInvoked e) {}\n        \n        try {\n            verify(mock).clone();\n            fail();\n        } catch (WantedButNotInvoked e) {}\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 174,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 68)",
            "(line 179,col 9)-(line 179,col 37)",
            "(line 181,col 9)-(line 181,col 25)",
            "(line 183,col 9)-(line 186,col 42)",
            "(line 188,col 9)-(line 191,col 42)",
            "(line 193,col 9)-(line 196,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnAllKindsOfPrimitives()",
        "snippet": "    @Test\n    public void shouldReturnAllKindsOfPrimitives() throws Exception {\n        assertEquals((byte) 0, mock.byteReturningMethod());\n        assertEquals((short) 0, mock.shortReturningMethod());\n        assertEquals(0, mock.intReturningMethod());\n        assertEquals(0L, mock.longReturningMethod());\n        assertEquals(0.0F, mock.floatReturningMethod(), 0.0F);\n        assertEquals(0.0D, mock.doubleReturningMethod(), 0.0D);\n        assertEquals((char) 0, mock.charReturningMethod());\n        assertEquals(false, mock.booleanReturningMethod());\n        assertEquals(null, mock.objectReturningMethod());\n    }",
        "begin_line": 22,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 59)",
            "(line 25,col 9)-(line 25,col 61)",
            "(line 26,col 9)-(line 26,col 51)",
            "(line 27,col 9)-(line 27,col 53)",
            "(line 28,col 9)-(line 28,col 62)",
            "(line 29,col 9)-(line 29,col 63)",
            "(line 30,col 9)-(line 30,col 59)",
            "(line 31,col 9)-(line 31,col 59)",
            "(line 32,col 9)-(line 32,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnTheSameValuesForWrapperClasses()",
        "snippet": "    @Test\n    public void shouldReturnTheSameValuesForWrapperClasses() throws Exception {\n        assertEquals(new Byte((byte) 0), mock.byteObjectReturningMethod());\n        assertEquals(new Short((short) 0), mock.shortObjectReturningMethod());\n        assertEquals(new Integer(0), mock.integerReturningMethod());\n        assertEquals(new Long(0L), mock.longObjectReturningMethod());\n        assertEquals(new Float(0.0F), mock.floatObjectReturningMethod(), 0.0F);\n        assertEquals(new Double(0.0D), mock.doubleObjectReturningMethod(), 0.0D);\n        assertEquals(new Character((char) 0), mock.charObjectReturningMethod());\n        assertEquals(new Boolean(false), mock.booleanObjectReturningMethod());\n    }",
        "begin_line": 35,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 75)",
            "(line 38,col 9)-(line 38,col 78)",
            "(line 39,col 9)-(line 39,col 68)",
            "(line 40,col 9)-(line 40,col 69)",
            "(line 41,col 9)-(line 41,col 79)",
            "(line 42,col 9)-(line 42,col 81)",
            "(line 43,col 9)-(line 43,col 80)",
            "(line 44,col 9)-(line 44,col 78)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnEmptyCollections()",
        "snippet": "    @Test \n    public void shouldReturnEmptyCollections() {\n        CollectionsServer mock = Mockito.mock(CollectionsServer.class);\n        \n        assertTrue(mock.list().isEmpty());\n        assertTrue(mock.linkedList().isEmpty());\n        assertTrue(mock.map().isEmpty());\n        assertTrue(mock.hashSet().isEmpty());\n    }",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 71)",
            "(line 51,col 9)-(line 51,col 42)",
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 41)",
            "(line 54,col 9)-(line 54,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnMutableEmptyCollection()",
        "snippet": "    @Test \n    public void shouldReturnMutableEmptyCollection() {\n        CollectionsServer mock = Mockito.mock(CollectionsServer.class);\n        \n        List list = mock.list();\n        list.add(\"test\");\n       \n        assertTrue(mock.list().isEmpty());\n    }",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 71)",
            "(line 61,col 9)-(line 61,col 32)",
            "(line 62,col 9)-(line 62,col 25)",
            "(line 64,col 9)-(line 64,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.list()",
        "snippet": "        List list() {\n            return null;\n        }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 13)-(line 69,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.linkedList()",
        "snippet": "        LinkedList linkedList() {\n            return null;\n        }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 13)-(line 73,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.map()",
        "snippet": "        Map map() {\n            return null;\n        }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 13)-(line 77,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.hashSet()",
        "snippet": "        java.util.HashSet hashSet() {\n            return null;\n        }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.TestedObject.setValue(java.lang.String)",
        "snippet": "        void setValue(String value) {\n            this.value = value;\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.TestedObject.getValue()",
        "snippet": "        String getValue() {\n            return \"HARD_CODED_RETURN_VALUE\";\n        }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 13)-(line 27,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.TestedObject.callInternalMethod()",
        "snippet": "        String callInternalMethod() {\n            return getValue();\n        }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 13)-(line 31,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldAllowCallingInternalMethod()",
        "snippet": "    @Test\n    public void shouldAllowCallingInternalMethod() {\n        when(mock.getValue()).thenReturn(\"foo\");\n        when(mock.callInternalMethod()).thenCallRealMethod();\n        \n        assertEquals(\"foo\", mock.callInternalMethod());\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 61)",
            "(line 40,col 9)-(line 40,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldReturnRealValue()",
        "snippet": "    @Test\n    public void shouldReturnRealValue() {\n        when(mock.getValue()).thenCallRealMethod();\n\n        Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 51)",
            "(line 47,col 9)-(line 47,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldExecuteRealMethod()",
        "snippet": "    @Test\n    public void shouldExecuteRealMethod() {\n        doCallRealMethod().when(mock).setValue(anyString());\n\n        mock.setValue(\"REAL_VALUE\");\n\n        Assert.assertEquals(\"REAL_VALUE\", mock.value);\n    }",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 60)",
            "(line 54,col 9)-(line 54,col 36)",
            "(line 56,col 9)-(line 56,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldCallRealMethodByDefault()",
        "snippet": "    @Test\n    public void shouldCallRealMethodByDefault() {\n        TestedObject mock = mock(TestedObject.class, CALLS_REAL_METHODS);\n\n        Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\n    }",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 73)",
            "(line 63,col 9)-(line 63,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldNotCallRealMethodWhenStubbedLater()",
        "snippet": "    @Test\n    public void shouldNotCallRealMethodWhenStubbedLater() {\n        TestedObject mock = mock(TestedObject.class);\n\n        when(mock.getValue()).thenCallRealMethod();\n        when(mock.getValue()).thenReturn(\"FAKE_VALUE\");\n\n        Assert.assertEquals(\"FAKE_VALUE\", mock.getValue());\n    }",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 53)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 55)",
            "(line 73,col 9)-(line 73,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningMockValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningMockValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningMockValuesTest.should()",
        "snippet": "    @Test\n    public void should() throws Exception {\n        \n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswer()",
        "snippet": "    @Test\n    public void shouldAnswer() throws Exception {\n        when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                String arg = (String) invocation.getArguments()[0];\n\n                return invocation.getMethod().getName() + \"-\" + arg;\n            }\n        });\n\n        assertEquals(\"simpleMethod-test\", mock.simpleMethod(\"test\"));\n    }",
        "begin_line": 22,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 30,col 11)",
            "(line 32,col 9)-(line 32,col 69)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-ed922ab2-8fac-42e0-be6e-0d9e6c9cfa8a.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                String arg = (String) invocation.getArguments()[0];\n\n                return invocation.getMethod().getName() + \"-\" + arg;\n            }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 26,col 17)-(line 26,col 67)",
            "(line 28,col 17)-(line 28,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerConsecutively()",
        "snippet": "    @Test\n    public void shouldAnswerConsecutively() throws Exception {\n        when(mock.simpleMethod())\n                .thenAnswer(new Answer<String>() {\n                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName();\n                    }\n                })\n                .thenReturn(\"Hello\")\n                .thenAnswer(new Answer<String>() {\n                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName() + \"-1\";\n                    }\n                });\n\n        assertEquals(\"simpleMethod\", mock.simpleMethod());\n        assertEquals(\"Hello\", mock.simpleMethod());\n        assertEquals(\"simpleMethod-1\", mock.simpleMethod());\n        assertEquals(\"simpleMethod-1\", mock.simpleMethod());\n    }",
        "begin_line": 35,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 48,col 19)",
            "(line 50,col 9)-(line 50,col 58)",
            "(line 51,col 9)-(line 51,col 51)",
            "(line 52,col 9)-(line 52,col 60)",
            "(line 53,col 9)-(line 53,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-b73229b4-03a0-4ef0-9d27-e30f5d534345.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName() + \"-1\";\n                    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 25)-(line 46,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-1842effa-4f5f-419e-8342-b072cd941dea.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName();\n                    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 25)-(line 40,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shoudAnswerVoidMethod()",
        "snippet": "    @Test\n    public void shoudAnswerVoidMethod() throws Exception {\n        RecordCall recordCall = new RecordCall();\n\n        stubVoid(mock).toAnswer(recordCall).on().voidMethod();\n\n        mock.voidMethod();\n        assertTrue(recordCall.isCalled());\n    }",
        "begin_line": 56,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 49)",
            "(line 60,col 9)-(line 60,col 62)",
            "(line 62,col 9)-(line 62,col 26)",
            "(line 63,col 9)-(line 63,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerVoidMethodConsecutively()",
        "snippet": "    @Test\n    public void shouldAnswerVoidMethodConsecutively() throws Exception {\n        RecordCall call1 = new RecordCall();\n        RecordCall call2 = new RecordCall();\n\n        stubVoid(mock).toAnswer(call1)\n                .toThrow(new UnsupportedOperationException())\n                .toAnswer(call2)\n                .on().voidMethod();\n\n        mock.voidMethod();\n        assertTrue(call1.isCalled());\n        assertFalse(call2.isCalled());\n\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (UnsupportedOperationException e) {\n        }\n\n        mock.voidMethod();\n        assertTrue(call2.isCalled());\n\n    }",
        "begin_line": 66,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 44)",
            "(line 69,col 9)-(line 69,col 44)",
            "(line 71,col 9)-(line 74,col 35)",
            "(line 76,col 9)-(line 76,col 26)",
            "(line 77,col 9)-(line 77,col 37)",
            "(line 78,col 9)-(line 78,col 38)",
            "(line 80,col 9)-(line 84,col 9)",
            "(line 86,col 9)-(line 86,col 26)",
            "(line 87,col 9)-(line 87,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.RecordCall.isCalled()",
        "snippet": "        public boolean isCalled() {\n            return called;\n        }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 13)-(line 95,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.RecordCall.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "        public Object answer(InvocationOnMock invocation) throws Throwable {\n            called = true;\n            return null;\n        }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 99,col 13)-(line 99,col 26)",
            "(line 100,col 13)-(line 100,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValues()",
        "snippet": "    @Test\n    public void shouldReturnConsecutiveValues() throws Exception {\n        when(mock.simpleMethod())\n            .thenReturn(\"one\")\n            .thenReturn(\"two\")\n            .thenReturn(\"three\");\n        \n        assertEquals(\"one\", mock.simpleMethod());\n        assertEquals(\"two\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n    }",
        "begin_line": 20,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 25,col 33)",
            "(line 27,col 9)-(line 27,col 49)",
            "(line 28,col 9)-(line 28,col 49)",
            "(line 29,col 9)-(line 29,col 51)",
            "(line 30,col 9)-(line 30,col 51)",
            "(line 31,col 9)-(line 31,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValuesForTwoNulls()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    public void shouldReturnConsecutiveValuesForTwoNulls() throws Exception {\n        when(mock.simpleMethod()).thenReturn(null, null);\n        \n        assertNull(mock.simpleMethod());        \n        assertNull(mock.simpleMethod());        \n    }",
        "begin_line": 34,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 57)",
            "(line 39,col 9)-(line 39,col 40)",
            "(line 40,col 9)-(line 40,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValuesSetByShortenThenReturnMethod()",
        "snippet": "    @Test\n    public void shouldReturnConsecutiveValuesSetByShortenThenReturnMethod() throws Exception {        \n        when(mock.simpleMethod())\n            .thenReturn(\"one\", \"two\", \"three\");\n        \n        assertEquals(\"one\", mock.simpleMethod());\n        assertEquals(\"two\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n    }",
        "begin_line": 43,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 46,col 47)",
            "(line 48,col 9)-(line 48,col 49)",
            "(line 49,col 9)-(line 49,col 49)",
            "(line 50,col 9)-(line 50,col 51)",
            "(line 51,col 9)-(line 51,col 51)",
            "(line 52,col 9)-(line 52,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods()",
        "snippet": "    @Test\n    public void shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods()\n            throws Exception {\n        when(mock.simpleMethod())\n            .thenReturn(\"zero\")\n            .thenReturn(\"one\", \"two\")\n            .thenThrow(new NullPointerException(), new RuntimeException())\n            .thenReturn(\"three\")\n            .thenThrow(new IllegalArgumentException());\n\n        assertEquals(\"zero\", mock.simpleMethod());\n        assertEquals(\"one\", mock.simpleMethod());\n        assertEquals(\"two\", mock.simpleMethod());\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        assertEquals(\"three\", mock.simpleMethod());\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n    }",
        "begin_line": 55,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 63,col 55)",
            "(line 65,col 9)-(line 65,col 50)",
            "(line 66,col 9)-(line 66,col 49)",
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 71,col 43)",
            "(line 72,col 9)-(line 75,col 39)",
            "(line 76,col 9)-(line 76,col 51)",
            "(line 77,col 9)-(line 80,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldThrowConsecutively()",
        "snippet": "    @Test\n    public void shouldThrowConsecutively() throws Exception {\n        when(mock.simpleMethod())\n            .thenThrow(new RuntimeException())\n            .thenThrow(new IllegalArgumentException())\n            .thenThrow(new NullPointerException());\n\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n    }",
        "begin_line": 83,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 88,col 51)",
            "(line 90,col 9)-(line 93,col 39)",
            "(line 95,col 9)-(line 98,col 47)",
            "(line 100,col 9)-(line 103,col 43)",
            "(line 105,col 9)-(line 108,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldThrowConsecutivelySetByShortenThenThrowMethod()",
        "snippet": "    @Test\n    public void shouldThrowConsecutivelySetByShortenThenThrowMethod() throws Exception {\n        when(mock.simpleMethod())\n            .thenThrow(new RuntimeException(), new IllegalArgumentException(), new NullPointerException());\n\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n    }",
        "begin_line": 111,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 114,col 107)",
            "(line 116,col 9)-(line 119,col 39)",
            "(line 121,col 9)-(line 124,col 47)",
            "(line 126,col 9)-(line 129,col 43)",
            "(line 131,col 9)-(line 134,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldMixConsecutiveReturnsWithExcepions()",
        "snippet": "    @Test\n    public void shouldMixConsecutiveReturnsWithExcepions() throws Exception {\n        when(mock.simpleMethod())\n            .thenThrow(new IllegalArgumentException())\n            .thenReturn(\"one\")\n            .thenThrow(new NullPointerException())\n            .thenReturn(null);\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        assertEquals(\"one\", mock.simpleMethod());\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        assertEquals(null, mock.simpleMethod());\n        assertEquals(null, mock.simpleMethod());\n    }",
        "begin_line": 137,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 143,col 30)",
            "(line 145,col 9)-(line 148,col 47)",
            "(line 150,col 9)-(line 150,col 49)",
            "(line 152,col 9)-(line 155,col 43)",
            "(line 157,col 9)-(line 157,col 48)",
            "(line 158,col 9)-(line 158,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldValidateConsecutiveException()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldValidateConsecutiveException() throws Exception {\n        when(mock.simpleMethod())\n            .thenReturn(\"one\")\n            .thenThrow(new Exception());\n    }",
        "begin_line": 161,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 165,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldStubVoidMethodAndContinueThrowing()",
        "snippet": "    @Test\n    public void shouldStubVoidMethodAndContinueThrowing() throws Exception {\n        stubVoid(mock)\n            .toThrow(new IllegalArgumentException())\n            .toReturn()\n            .toThrow(new NullPointerException())\n            .on().voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        mock.voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (NullPointerException e) {}        \n    }",
        "begin_line": 168,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 174,col 31)",
            "(line 176,col 9)-(line 179,col 47)",
            "(line 181,col 9)-(line 181,col 26)",
            "(line 183,col 9)-(line 186,col 43)",
            "(line 188,col 9)-(line 191,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldStubVoidMethod()",
        "snippet": "    @Test\n    public void shouldStubVoidMethod() throws Exception {\n        stubVoid(mock)\n            .toReturn()\n            .toThrow(new NullPointerException())\n            .toReturn()\n            .on().voidMethod();\n        \n        mock.voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        mock.voidMethod();\n        mock.voidMethod();\n    }",
        "begin_line": 194,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 200,col 31)",
            "(line 202,col 9)-(line 202,col 26)",
            "(line 204,col 9)-(line 207,col 43)",
            "(line 209,col 9)-(line 209,col 26)",
            "(line 210,col 9)-(line 210,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldValidateConsecutiveExceptionForVoidMethod()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldValidateConsecutiveExceptionForVoidMethod() throws Exception {\n        stubVoid(mock)\n            .toReturn()\n            .toThrow(new Exception())\n            .on().voidMethod();\n    }",
        "begin_line": 213,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 218,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(IMethods.class);\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.shouldEvaluateLatestStubbingFirst()",
        "snippet": "    @Test\n    public void shouldEvaluateLatestStubbingFirst() throws Exception {\n        when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);\n        when(mock.objectReturningMethod(200)).thenReturn(200);\n        \n        assertEquals(200, mock.objectReturningMethod(200));\n        assertEquals(100, mock.objectReturningMethod(666));\n        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n    }",
        "begin_line": 26,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 77)",
            "(line 29,col 9)-(line 29,col 62)",
            "(line 31,col 9)-(line 31,col 59)",
            "(line 32,col 9)-(line 32,col 59)",
            "(line 33,col 9)-(line 33,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.shouldStubbingBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n        when(mock.booleanReturningMethod()).thenReturn(true);\n        \n        mock.booleanReturningMethod();\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 61)",
            "(line 40,col 9)-(line 40,col 38)",
            "(line 42,col 9)-(line 45,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.shouldAllowStubbingToString()",
        "snippet": "    @Test\n    public void shouldAllowStubbingToString() throws Exception {\n        IMethods mockTwo = mock(IMethods.class);\n        when(mockTwo.toString()).thenReturn(\"test\");\n        \n        assertContains(\"Mock for IMethods\", mock.toString());\n        assertEquals(\"test\", mockTwo.toString());\n    }",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 52)",
            "(line 53,col 9)-(line 53,col 61)",
            "(line 54,col 9)-(line 54,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.shouldStubbingNotBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingNotBeTreatedAsInteraction() {\n        when(mock.simpleMethod(\"one\")).thenThrow(new RuntimeException());\n        doThrow(new RuntimeException()).when(mock).simpleMethod(\"two\");\n        \n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 73)",
            "(line 60,col 9)-(line 60,col 71)",
            "(line 62,col 9)-(line 62,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.unfinishedStubbingCleansUpTheState()",
        "snippet": "    @Test\n    public void unfinishedStubbingCleansUpTheState() {\n        try {\n            when(\"\").thenReturn(\"\");\n            fail(); \n        } catch (MissingMethodInvocationException e) {}\n\n        //anything that can cause state validation\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 70,col 55)",
            "(line 73,col 9)-(line 73,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.shouldToStringMockName()",
        "snippet": "    @Test\n    public void shouldToStringMockName() {\n        IMethods mock = mock(IMethods.class, \"mockie\");\n        IMethods mockTwo = mock(IMethods.class);\n        \n        assertContains(\"Mock for IMethods\", \"\" + mockTwo);\n        assertEquals(\"mockie\", \"\" + mock);\n    }",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 55)",
            "(line 79,col 9)-(line 79,col 48)",
            "(line 81,col 9)-(line 81,col 58)",
            "(line 82,col 9)-(line 82,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.Foo.toString()",
        "snippet": "        public final String toString() {\n            return \"foo\";\n        }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 13)-(line 87,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.shouldAllowMockingWhenToStringIsFinal()",
        "snippet": "    @Test\n    public void shouldAllowMockingWhenToStringIsFinal() throws Exception {\n        mock(Foo.class);\n    }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.resetState()",
        "snippet": "    @After public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod();\n        doReturn(\"bar\").when(mock).simpleMethod();\n        \n        assertEquals(\"bar\", mock.simpleMethod());\n    }",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 50)",
            "(line 34,col 9)-(line 34,col 50)",
            "(line 36,col 9)-(line 36,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithArgs()",
        "snippet": "    @Test\n    public void shouldStubWithArgs() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod(\"foo\");\n        doReturn(\"bar\").when(mock).simpleMethod(eq(\"one\"), anyInt());\n        \n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n        assertEquals(\"bar\", mock.simpleMethod(\"one\", 234));\n        assertEquals(null, mock.simpleMethod(\"xxx\", 234));\n    }",
        "begin_line": 39,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 69)",
            "(line 44,col 9)-(line 44,col 54)",
            "(line 45,col 9)-(line 45,col 59)",
            "(line 46,col 9)-(line 46,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithThrowable()",
        "snippet": "    @Test\n    public void shouldStubWithThrowable() throws Exception {\n        doThrow(new FooRuntimeException()).when(mock).voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (FooRuntimeException e) {}\n    }",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 67)",
            "(line 54,col 9)-(line 57,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowSettingValidCheckedException()",
        "snippet": "    @Test\n    public void shouldAllowSettingValidCheckedException() throws Exception {\n        doThrow(new IOException()).when(mock).throwsIOException(0);\n        \n        try {\n            mock.throwsIOException(0);\n            fail();\n        } catch (IOException e) {}\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 67)",
            "(line 64,col 9)-(line 67,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectInvalidCheckedException()",
        "snippet": "    @Test\n    public void shouldDetectInvalidCheckedException() throws Exception {\n        try {\n            doThrow(new FooCheckedException()).when(mock).throwsIOException(0);\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Checked exception is invalid\", e.getMessage());\n        }\n    }",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 79,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenReturnSetForVoid()",
        "snippet": "    @Test\n    public void shouldScreamWhenReturnSetForVoid() throws Exception {\n        try {\n            doReturn(\"foo\").when(mock).voidMethod();\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"Cannot stub a void method with a return value\", e.getMessage());\n        }\n    }",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 89,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenNotAMockPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNotAMockPassed() throws Exception {\n        try {\n            doReturn(\"foo\").when(\"foo\").toString();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Argument passed to when() is not a mock\", e.getMessage());\n        }\n    }",
        "begin_line": 92,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 99,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenNullPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassed() throws Exception {\n        try {\n            doReturn(\"foo\").when((Object) null).toString();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Argument passed to when() is null\", e.getMessage());\n        }\n    }    ",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 109,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbing()",
        "snippet": "    @Test\n    public void shouldAllowChainedStubbing() {\n        doReturn(\"foo\").\n        doThrow(new RuntimeException()).\n        doReturn(\"bar\")\n        .when(mock).simpleMethod();\n        \n        assertEquals(\"foo\", mock.simpleMethod());\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        assertEquals(\"bar\", mock.simpleMethod());\n        assertEquals(\"bar\", mock.simpleMethod());\n    }",
        "begin_line": 112,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 117,col 35)",
            "(line 119,col 9)-(line 119,col 49)",
            "(line 120,col 9)-(line 123,col 39)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 126,col 9)-(line 126,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbingOnVoidMethods()",
        "snippet": "    @Test\n    public void shouldAllowChainedStubbingOnVoidMethods() {\n        doNothing().\n        doNothing().\n        doThrow(new RuntimeException())\n        .when(mock).voidMethod();\n        \n        mock.voidMethod();\n        mock.voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (RuntimeException e) {}\n    }",
        "begin_line": 129,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 134,col 33)",
            "(line 136,col 9)-(line 136,col 26)",
            "(line 137,col 9)-(line 137,col 26)",
            "(line 138,col 9)-(line 141,col 39)",
            "(line 142,col 9)-(line 145,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithGenericAnswer()",
        "snippet": "    @Test\n    public void shouldStubWithGenericAnswer() {\n        doAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return \"foo\";\n            }\n        })\n        .when(mock).simpleMethod();\n        \n        assertEquals(\"foo\", mock.simpleMethod());\n    }",
        "begin_line": 148,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 155,col 35)",
            "(line 157,col 9)-(line 157,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.Anonymous-b20aff95-8075-49c1-8263-768b077c2a3a.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return \"foo\";\n            }",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 17)-(line 152,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldNotAllowDoNothingOnNonVoids()",
        "snippet": "    @Test\n    public void shouldNotAllowDoNothingOnNonVoids() {\n        try {\n            doNothing().when(mock).simpleMethod();\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"Only void methods can doNothing()\", e.getMessage());\n        }\n    }",
        "begin_line": 160,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubbingBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod();\n        mock.simpleMethod();\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 170,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 50)",
            "(line 173,col 9)-(line 173,col 28)",
            "(line 174,col 9)-(line 177,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldVerifyStubbedCall()",
        "snippet": "    @Test\n    public void shouldVerifyStubbedCall() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod();\n        mock.simpleMethod();\n        mock.simpleMethod();\n        \n        verify(mock, times(2)).simpleMethod();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 180,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 50)",
            "(line 183,col 9)-(line 183,col 28)",
            "(line 184,col 9)-(line 184,col 28)",
            "(line 186,col 9)-(line 186,col 46)",
            "(line 187,col 9)-(line 187,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowStubbingToString()",
        "snippet": "    @Test\n    public void shouldAllowStubbingToString() throws Exception {\n        doReturn(\"test\").when(mock).toString();\n        assertEquals(\"test\", mock.toString());\n    }",
        "begin_line": 190,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 47)",
            "(line 193,col 9)-(line 193,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectInvalidReturnType()",
        "snippet": "    @Test\n    public void shouldDetectInvalidReturnType() throws Exception {\n        try {\n            doReturn(\"foo\").when(mock).booleanObjectReturningMethod();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"String cannot be returned by booleanObjectReturningMethod()\" +\n                    \"\\n\" +\n                    \"booleanObjectReturningMethod() should return Boolean\",\n                    e.getMessage());\n        }\n    }",
        "begin_line": 196,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 206,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectWhenNullAssignedToBoolean()",
        "snippet": "    @Test\n    public void shouldDetectWhenNullAssignedToBoolean() throws Exception {\n        try {\n            doReturn(null).when(mock).intReturningMethod();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"null cannot be returned by intReturningMethod\", e.getMessage());\n        }\n    }",
        "begin_line": 209,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 216,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowStubbingWhenTypesMatchSignature()",
        "snippet": "    @Test\n    public void shouldAllowStubbingWhenTypesMatchSignature() throws Exception {\n        doReturn(\"foo\").when(mock).objectReturningMethodNoArgs();\n        doReturn(\"foo\").when(mock).simpleMethod();\n        doReturn(1).when(mock).intReturningMethod();\n        doReturn(new Integer(2)).when(mock).intReturningMethod();\n    }",
        "begin_line": 219,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 222,col 50)",
            "(line 223,col 9)-(line 223,col 52)",
            "(line 224,col 9)-(line 224,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(IMethods.class, Mockito.RETURNS_SMART_NULLS);\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "unstubbedMethodInvokedHere(IMethods)",
        "snippet": "    public IMethods unstubbedMethodInvokedHere(IMethods mock) {\n        return mock.iMethodsReturningMethod();\n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldSmartNPEPointToUnstubbedCall()",
        "snippet": "    @Test\n    public void shouldSmartNPEPointToUnstubbedCall() throws Exception {\n        IMethods methods = unstubbedMethodInvokedHere(mock); \n        try {\n            methods.simpleMethod();\n            fail();\n        } catch (SmartNullPointerException e) {\n            assertContains(\"unstubbedMethodInvokedHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 60)",
            "(line 33,col 9)-(line 38,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Bar.boo()",
        "snippet": "        void boo();",
        "begin_line": 42,
        "end_line": 42,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.getSomeClass()",
        "snippet": "        Foo getSomeClass() {\n            return null;\n        }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 13)-(line 47,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.getSomeInterface()",
        "snippet": "        Bar getSomeInterface() {\n            return null;\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.boo()",
        "snippet": "        void boo() {}",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldThrowSmartNPEWhenMethodReturnsClass()",
        "snippet": "    @Test\n    public void shouldThrowSmartNPEWhenMethodReturnsClass() throws Exception {\n        Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n        Foo foo = mock.getSomeClass(); \n        try {\n            foo.boo();\n            fail();\n        } catch (SmartNullPointerException e) {}\n    }",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 56)",
            "(line 60,col 9)-(line 60,col 38)",
            "(line 61,col 9)-(line 64,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldThrowSmartNPEWhenMethodReturnsInterface()",
        "snippet": "    @Test\n    public void shouldThrowSmartNPEWhenMethodReturnsInterface() throws Exception {\n        Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n        Bar bar = mock.getSomeInterface(); \n        try {\n            bar.boo();\n            fail();\n        } catch (SmartNullPointerException e) {}\n    }",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 56)",
            "(line 70,col 9)-(line 70,col 42)",
            "(line 71,col 9)-(line 74,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldReturnOrdinaryEmptyValuesForOrdinaryTypes()",
        "snippet": "    @Test\n    public void shouldReturnOrdinaryEmptyValuesForOrdinaryTypes() throws Exception {\n        IMethods mock = mock(IMethods.class, RETURNS_SMART_NULLS);\n        \n        assertEquals(\"\", mock.stringReturningMethod());\n        assertEquals(0, mock.intReturningMethod());\n        assertEquals(true, mock.listReturningMethod().isEmpty());\n        assertEquals(0, mock.arrayReturningMethod().length);\n    }",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 66)",
            "(line 82,col 9)-(line 82,col 55)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 65)",
            "(line 85,col 9)-(line 85,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldNotThrowSmartNullPointerOnToString()",
        "snippet": "    @Test\n    public void shouldNotThrowSmartNullPointerOnToString() {\n        Object smartNull = mock.objectReturningMethod();\n        try {\n            verify(mock).simpleMethod(smartNull);\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 88,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 56)",
            "(line 91,col 9)-(line 94,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldNotThrowSmartNullPointerOnObjectMethods()",
        "snippet": "    @Test\n    public void shouldNotThrowSmartNullPointerOnObjectMethods() {\n        Object smartNull = mock.objectReturningMethod();\n        smartNull.toString();\n    }",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 56)",
            "(line 100,col 9)-(line 100,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(IMethods.class);\n    }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldEvaluateLatestStubbingFirst()",
        "snippet": "    @Test\n    public void shouldEvaluateLatestStubbingFirst() throws Exception {\n        stub(mock.objectReturningMethod(isA(Integer.class))).toReturn(100);\n        stub(mock.objectReturningMethod(200)).toReturn(200);\n        \n        assertEquals(200, mock.objectReturningMethod(200));\n        assertEquals(100, mock.objectReturningMethod(666));\n        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n    }",
        "begin_line": 27,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 75)",
            "(line 30,col 9)-(line 30,col 60)",
            "(line 32,col 9)-(line 32,col 59)",
            "(line 33,col 9)-(line 33,col 59)",
            "(line 34,col 9)-(line 34,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldStubbingBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n        stub(mock.booleanReturningMethod()).toReturn(true);\n        \n        mock.booleanReturningMethod();\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 37,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 59)",
            "(line 41,col 9)-(line 41,col 38)",
            "(line 43,col 9)-(line 46,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldAllowStubbingToString()",
        "snippet": "    @Test\n    public void shouldAllowStubbingToString() throws Exception {\n        IMethods mockTwo = mock(IMethods.class);\n        stub(mockTwo.toString()).toReturn(\"test\");\n        \n        assertContains(\"Mock for IMethods\", mock.toString());\n        assertEquals(\"test\", mockTwo.toString());\n    }",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 48)",
            "(line 52,col 9)-(line 52,col 50)",
            "(line 54,col 9)-(line 54,col 61)",
            "(line 55,col 9)-(line 55,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldStubbingNotBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingNotBeTreatedAsInteraction() {\n        stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n        stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(\"two\");\n        \n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 58,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 71)",
            "(line 61,col 9)-(line 61,col 80)",
            "(line 63,col 9)-(line 63,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldAllowConsecutiveStubbing()",
        "snippet": "    @Test\n    public void shouldAllowConsecutiveStubbing() throws Exception {\n        //when\n        stub(mock.simpleMethod())\n            .toReturn(\"100\")\n            .toReturn(\"200\");\n        \n        //then\n        assertEquals(\"100\", mock.simpleMethod());\n        assertEquals(\"200\", mock.simpleMethod());\n    }",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 71,col 29)",
            "(line 74,col 9)-(line 74,col 49)",
            "(line 75,col 9)-(line 75,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.setMockWithDowncast(org.mockitousage.puzzlers.OverloadingPuzzleTest.Super)",
        "snippet": "    private void setMockWithDowncast(Super mock) {\n        this.mock = mock;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.Super.say(java.lang.Object)",
        "snippet": "        void say(Object message);",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.Sub.say(java.lang.String)",
        "snippet": "        void say(String message);",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.say(java.lang.Object)",
        "snippet": "    private void say(Object message) {\n        mock.say(message);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.shouldUseArgumentTypeWhenOverloadingPuzzleDetected()",
        "snippet": "    @Test\n    public void shouldUseArgumentTypeWhenOverloadingPuzzleDetected() throws Exception {\n        Sub sub = mock(Sub.class);\n        setMockWithDowncast(sub);\n        say(\"Hello\");\n        try {\n            verify(sub).say(\"Hello\");\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 33)",
            "(line 37,col 9)-(line 37,col 21)",
            "(line 38,col 9)-(line 41,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super.say(T)",
        "snippet": "        public String say(T t) {\n            return \"Super says: \" + t;\n        }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 13)-(line 25,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Sub.say(java.lang.String)",
        "snippet": "        @Override\n        public String say(String t)  {\n            return \"Dummy says: \" + t;\n        }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 13)-(line 32,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.setMockWithDownCast(org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super)",
        "snippet": "    private void setMockWithDownCast(Super mock) {\n        this.mock = mock;\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.say(java.lang.String)",
        "snippet": "    private void say(String string) {\n        mock.say(string);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldHaveBridgeMethod()",
        "snippet": "    @Test\n    public void shouldHaveBridgeMethod() throws Exception {\n        Super s = new Sub();\n        \n        assertEquals(\"Dummy says: Hello\", s.say(\"Hello\"));\n        \n        assertThat(Sub.class, hasBridgeMethod(\"say\"));\n        assertThat(s, hasBridgeMethod(\"say\"));\n    }",
        "begin_line": 46,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 28)",
            "(line 50,col 9)-(line 50,col 58)",
            "(line 52,col 9)-(line 52,col 54)",
            "(line 53,col 9)-(line 53,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldVerifyCorrectlyWhenBridgeMethodCalled()",
        "snippet": "    @Test\n    public void shouldVerifyCorrectlyWhenBridgeMethodCalled() throws Exception {\n        //Super has following erasure: say(Object) which differs from Dummy.say(String)\n        //mock has to detect it and do the super.say()\n        Sub s = mock(Sub.class);\n        setMockWithDownCast(s);\n        say(\"Hello\");\n        \n        verify(s).say(\"Hello\");\n    }",
        "begin_line": 56,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 32)",
            "(line 61,col 9)-(line 61,col 31)",
            "(line 62,col 9)-(line 62,col 21)",
            "(line 64,col 9)-(line 64,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest.VarargMethod.run(java.lang.String...)",
        "snippet": "        Object run(String... args);",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest.shouldAllowAnyObjectForVarArgs()",
        "snippet": "    @Ignore\n    @Test\n    public void shouldAllowAnyObjectForVarArgs() {\n        mock.run(\"a\", \"b\");\n        \n        verify(mock).run((String[]) anyObject());\n        verify(mock).run(anyString(), anyString());\n        verify(mock).run((String) anyObject(), (String) anyObject());\n        verify(mock).run(new String[] {anyObject()});\n        \n        verify(mock, never()).run();\n        verify(mock, never()).run(anyString(), eq(\"f\"));\n    }",
        "begin_line": 25,
        "end_line": 37,
        "comment": "TODO: not yet implemented, reverted fix for issue 62 as it introduced a regression",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 27)",
            "(line 30,col 9)-(line 30,col 49)",
            "(line 31,col 9)-(line 31,col 51)",
            "(line 32,col 9)-(line 32,col 69)",
            "(line 33,col 9)-(line 33,col 53)",
            "(line 35,col 9)-(line 35,col 36)",
            "(line 36,col 9)-(line 36,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest.shouldAllowAnyObjectForVarArgsStubbing()",
        "snippet": "    @Ignore\n    @Test\n    public void shouldAllowAnyObjectForVarArgsStubbing() {\n        when(mock.run((String[]) anyObject())).thenReturn(\"foo\");\n        \n        assertEquals(\"foo\", mock.run(\"a\", \"b\"));\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 65)",
            "(line 44,col 9)-(line 44,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java",
        "signature": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest.clearState()",
        "snippet": "    @After\n    public void clearState() {\n        this.resetState();\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java",
        "signature": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest.shouldNotThrowNPEWhenIntegerPassed()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntegerPassed() {\n        mock.intArgumentMethod(100);\n\n        verify(mock).intArgumentMethod(isA(Integer.class));\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 36)",
            "(line 28,col 9)-(line 28,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java",
        "signature": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest.shouldNotThrowNPEWhenIntPassed()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntPassed() {\n        mock.intArgumentMethod(100);\n        \n        verify(mock).intArgumentMethod(isA(Integer.class));\n    }",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 36)",
            "(line 35,col 9)-(line 35,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java",
        "signature": "org.mockitousage.bugs.NPEWithIsAClassMatcherTest.shouldNotThrowNPEWhenIntegerPassedToEq()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntegerPassedToEq() {\n        mock.intArgumentMethod(100);\n        \n        verify(mock).intArgumentMethod(eq(new Integer(100)));\n    }",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 36)",
            "(line 42,col 9)-(line 42,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java",
        "signature": "org.mockitousage.bugs.NPEWhenMockingThrowablesTest.shouldNotThrowNPE()",
        "snippet": "    @Test\n    public void shouldNotThrowNPE() {\n        when(mock.simpleMethod()).thenThrow(mock2);\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch(DummyException e) {}\n    }",
        "begin_line": 24,
        "end_line": 31,
        "comment": "issue 70",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 51)",
            "(line 27,col 9)-(line 30,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java",
        "signature": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.Fun.doFun(java.lang.String)",
        "snippet": "        String doFun(String something);",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java",
        "signature": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument()",
        "snippet": "    @Test\n    public void shouldAllowPassingNullArgument() {\n        //given\n        Fun mockFun = mock(Fun.class);\n        when(mockFun.doFun((String) anyObject())).thenReturn(\"value\");\n\n        //when\n        mockFun.doFun(null);\n\n        //then\n        try {\n            verify(mockFun).doFun(\"hello\");\n        } catch(AssertionError r) {\n            //it's ok, we just want to reproduce the bug\n        }\n    }",
        "begin_line": 19,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 38)",
            "(line 23,col 9)-(line 23,col 70)",
            "(line 26,col 9)-(line 26,col 28)",
            "(line 29,col 9)-(line 33,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.TableBuilder.newRow(java.lang.String, java.lang.String...)",
        "snippet": "        void newRow(String trAttributes, String... cells);",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyWithAnyObjectSubstitutingVarargs()",
        "snippet": "    @Ignore\n    @Test\n    public void shouldVerifyCorrectlyWithAnyObjectSubstitutingVarargs() {\n        //when\n        table.newRow(\"qux\", \"foo\", \"bar\", \"baz\");\n        table.newRow(\"abc\", \"def\");\n        \n        //then\n        verify(table, times(2)).newRow(anyString(), (String[]) anyObject());\n    }",
        "begin_line": 24,
        "end_line": 33,
        "comment": "TODO: not yet implemented",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 49)",
            "(line 29,col 9)-(line 29,col 35)",
            "(line 32,col 9)-(line 32,col 76)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyWithVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyCorrectlyWithVarargs() {\n        //when\n        table.newRow(\"qux\", \"foo\", \"bar\", \"baz\");\n        table.newRow(\"abc\", \"def\");\n        \n        //then\n        verify(table).newRow(anyString(), eq(\"foo\"), anyString(), anyString());\n        verify(table).newRow(anyString(), anyString());\n    }",
        "begin_line": 35,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 49)",
            "(line 39,col 9)-(line 39,col 35)",
            "(line 42,col 9)-(line 42,col 79)",
            "(line 43,col 9)-(line 43,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() throws Exception {\n        given(mock.simpleMethod(\"foo\")).willReturn(\"bar\");\n        \n        assertEquals(\"bar\", mock.simpleMethod(\"foo\"));\n        assertEquals(null, mock.simpleMethod(\"whatever\"));\n    }",
        "begin_line": 20,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 58)",
            "(line 24,col 9)-(line 24,col 54)",
            "(line 25,col 9)-(line 25,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubWithThrowable()",
        "snippet": "    @Test\n    public void shouldStubWithThrowable() throws Exception {\n        given(mock.simpleMethod(\"foo\")).willThrow(new RuntimeException());\n\n        try {\n            assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 74)",
            "(line 32,col 9)-(line 35,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubWithAnswer()",
        "snippet": "    @Test\n    public void shouldStubWithAnswer() throws Exception {\n        given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }});\n        \n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n    }",
        "begin_line": 38,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 43,col 16)",
            "(line 45,col 9)-(line 45,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Anonymous-83677306-1819-425e-a557-3c8144d3af28.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }});",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 17)-(line 42,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubConsecutively()",
        "snippet": "    @Test\n    public void shouldStubConsecutively() throws Exception {\n       given(mock.simpleMethod(anyString()))\n           .willReturn(\"foo\")\n           .willReturn(\"bar\");\n       \n       assertEquals(\"foo\", mock.simpleMethod(\"whatever\"));\n       assertEquals(\"bar\", mock.simpleMethod(\"whatever\"));\n    }",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 8)-(line 52,col 30)",
            "(line 54,col 8)-(line 54,col 58)",
            "(line 55,col 8)-(line 55,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubVoid()",
        "snippet": "    @Test\n    public void shouldStubVoid() throws Exception {\n        willThrow(new RuntimeException()).given(mock).voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 67)",
            "(line 62,col 9)-(line 65,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubVoidConsecutively()",
        "snippet": "    @Test\n    public void shouldStubVoidConsecutively() throws Exception {\n        willDoNothing()\n        .willThrow(new RuntimeException())\n        .given(mock).voidMethod();\n        \n        mock.voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 68,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 72,col 34)",
            "(line 74,col 9)-(line 74,col 26)",
            "(line 75,col 9)-(line 78,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubUsingDoReturnStyle()",
        "snippet": "    @Test\n    public void shouldStubUsingDoReturnStyle() throws Exception {\n        willReturn(\"foo\").given(mock).simpleMethod(\"bar\");\n        \n        assertEquals(null, mock.simpleMethod(\"boooo\"));\n        assertEquals(\"foo\", mock.simpleMethod(\"bar\"));\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 58)",
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubUsingDoAnswerStyle()",
        "snippet": "    @Test\n    public void shouldStubUsingDoAnswerStyle() throws Exception {\n        willAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }})\n        .given(mock).simpleMethod(anyString());\n        \n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 95,col 47)",
            "(line 97,col 9)-(line 97,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Anonymous-1998b35f-c81d-4077-af4a-bbd4f219ed7f.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }})",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 17)-(line 93,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Dog.bark()",
        "snippet": "        public String bark() {\n            return \"woof\";\n        }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 13)-(line 102,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubByDelegatingToRealMethod()",
        "snippet": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void shouldStubByDelegatingToRealMethod() throws Exception {\n        //given\n        Dog dog = mock(Dog.class);\n        //when\n        willCallRealMethod().given(dog).bark();\n        //then\n        assertEquals(\"woof\", dog.bark());\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 34)",
            "(line 112,col 9)-(line 112,col 47)",
            "(line 114,col 9)-(line 114,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax()",
        "snippet": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax() throws Exception {\n        //given\n        Dog dog = mock(Dog.class);\n        //when\n        given(dog.bark()).willCallRealMethod();\n        //then\n        assertEquals(\"woof\", dog.bark());\n    }",
        "begin_line": 117,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 34)",
            "(line 123,col 9)-(line 123,col 47)",
            "(line 125,col 9)-(line 125,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java",
        "signature": "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest.shouldUseCustomAnnotation()",
        "snippet": "    @Test\n    public void shouldUseCustomAnnotation() {\n        assertEquals(\"SmartMock should return empty String by default\", \"\", smartMock.simpleMethod(1));\n        verify(smartMock).simpleMethod(1);\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 103)",
            "(line 20,col 9)-(line 20,col 42)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.cleanUpConfigInAnyCase()",
        "snippet": "    @After\n    public void cleanUpConfigInAnyCase() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n        ConfigurationAccess.getConfig().overrideDefaultAnswer(null);\n    }",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 72)",
            "(line 30,col 9)-(line 30,col 68)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.init()",
        "snippet": "    @Before\n    public void init() {\n        new StateMaster().validate();\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 37)",
            "(line 36,col 9)-(line 36,col 43)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.makeStackTracesClean()",
        "snippet": "    public static void makeStackTracesClean() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 71)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.resetState()",
        "snippet": "    public void resetState() {\n        new StateMaster().reset();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 34)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.getLastInvocation()",
        "snippet": "    protected Invocation getLastInvocation() {\n        return new MockitoCore().getLastInvocation();\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "assertThat(T, Assertor)",
        "snippet": "    protected static <T> void assertThat(T o, Assertor<T> a) {\n        a.assertValue(o);\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "I'm really tired of matchers, enter the assertor!",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 25)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertThat(T, org.hamcrest.Matcher<T>)",
        "snippet": "    protected static <T> void assertThat(T actual, Matcher<T> m) {\n        org.junit.Assert.assertThat(actual, m);\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 47)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertThat(java.lang.String, T, org.hamcrest.Matcher<T>)",
        "snippet": "    protected static <T> void assertThat(String message, T actual, Matcher<T> m) {\n        org.junit.Assert.assertThat(message, actual, m);\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 56)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.endsWith(java.lang.String)",
        "snippet": "    public static <T> Assertor<String> endsWith(final String substring) {\n        return new Assertor<String>() {\n            public void assertValue(String value) {\n                assertTrue(\"This substring: \\n\" + substring + \n                        \"\\nshould be at the end of:\\n\" + value\n                        , value.endsWith(substring));\n            }\n        };\n    }",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 71,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "assertValue(String)",
        "snippet": "            public void assertValue(String value) {\n                assertTrue(\"This substring: \\n\" + substring + \n                        \"\\nshould be at the end of:\\n\" + value\n                        , value.endsWith(substring));\n            }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 67,col 17)-(line 69,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertNotEquals(java.lang.Object, java.lang.Object)",
        "snippet": "    public static void assertNotEquals(Object expected, Object got) {\n        assertFalse(expected.equals(got));\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 42)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertContains(java.lang.String, java.lang.String)",
        "snippet": "    public static void assertContains(String sub, String string) {\n        assertTrue(\"\\n\" +\n                \"This substing:\" +\n                sub +\n                \"\\n\" +\n                \"should be inside of:\" +\n                string +\n                \"\\n\"\n                , string.contains(sub));\n    }",
        "begin_line": 78,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 86,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertNotContains(java.lang.String, java.lang.String)",
        "snippet": "    public static void assertNotContains(String sub, String string) {\n        assertFalse(\"\\n\" +\n                \"This substing:\" +\n                sub +\n                \"\\n\" +\n                \"should NOT be inside of:\" +\n                string +\n                \"\\n\"\n                , string.contains(sub));\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 97,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.invocationOf(java.lang.Class<?>, java.lang.String, java.lang.Object...)",
        "snippet": "    protected static Invocation invocationOf(Class<?> type, String methodName, Object ... args) throws NoSuchMethodException {\n        return new Invocation(new Object(), type.getMethod(methodName,\n                new Class[0]), args, 1, null);\n    }",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 102,col 46)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.invocationOf(java.lang.Class<?>, java.lang.String, org.mockito.internal.invocation.realmethod.RealMethod)",
        "snippet": "    protected static Invocation invocationOf(Class<?> type, String methodName, RealMethod realMethod) throws NoSuchMethodException {\n        return new Invocation(new Object(), type.getMethod(methodName,\n                new Class[0]), new Object[0], 1, realMethod);\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 107,col 61)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockito.internal.debugging.WarningsPrinterTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.mockitousage.basicapi.AnnotationsTest",
            "org.mockito.internal.verification.RegisteredInvocationsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockitousage.bugs.NPEWithIsAClassMatcherTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.exceptions.base.StackTraceFilterTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.MockitoTest",
            "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest",
            "org.mockito.internal.util.copy.LenientCopyToolTest",
            "org.mockitousage.matchers.AssertingMatchersTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.junitrunner.JUnit45RunnerTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.junitrunner.JUnit44RunnerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockito.internal.util.ListUtilTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.stubbing.ReturningMockValuesTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockito.internal.util.CreationValidatorTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockito.exceptions.ReporterTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.stubbing.MockitoStubberTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.ThreadReuseTest",
            "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockito.internal.invocation.InvocationTest",
            "org.mockitousage.matchers.InvalidUseOfMatchersTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockito.internal.MockHandlerTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockito.internal.creation.cglib.CGLIBHackerTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockito.internal.creation.jmock.ClassImposterizerTest",
            "org.mockitousage.internal.debugging.LocationTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockito.exceptions.PluralizerTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.mockito.internal.runners.CollectingDebugDataTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockito.internal.creation.MockSettingsImplTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.describe(org.hamcrest.SelfDescribing)",
        "snippet": "    protected static String describe(SelfDescribing m) {\n        return StringDescription.toString(m);\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 45)"
        ]
    },
    {
        "class_name": "org.mockitoutil.Assertor",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/Assertor.java",
        "signature": "org.mockitoutil.Assertor.assertValue(T)",
        "snippet": "    void assertValue(T value);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasFirstMethodInStackTrace(java.lang.String)",
        "snippet": "    public static <T> Assertor<Throwable> hasFirstMethodInStackTrace(final String method) {\n        return hasMethodInStackTraceAt(0, method);\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 50)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasOnlyThoseClassesInStackTrace(java.lang.String...)",
        "snippet": "    public static <T> Assertor<Throwable> hasOnlyThoseClassesInStackTrace(final String ... classes) {\n        return new Assertor<Throwable>() {\n            public void assertValue(Throwable traceElements) {\n                StackTraceElement[] trace = traceElements.getStackTrace();\n                \n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements.getStackTrace()),\n                        classes.length, trace.length);\n                    \n                for (int i = 0; i < trace.length; i++) {\n                    assertEquals(classes[i], trace[i].getClassName());\n                }\n            }\n        };\n    }",
        "begin_line": 25,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 39,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Throwable)",
        "snippet": "            public void assertValue(Throwable traceElements) {\n                StackTraceElement[] trace = traceElements.getStackTrace();\n                \n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements.getStackTrace()),\n                        classes.length, trace.length);\n                    \n                for (int i = 0; i < trace.length; i++) {\n                    assertEquals(classes[i], trace[i].getClassName());\n                }\n            }",
        "begin_line": 27,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 28,col 17)-(line 28,col 74)",
            "(line 30,col 17)-(line 33,col 54)",
            "(line 35,col 17)-(line 37,col 17)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses(java.lang.String...)",
        "snippet": "    public static <T> Assertor<StackTraceElement[]> hasOnlyThoseClasses(final String ... classes) {\n        return new Assertor<StackTraceElement[]>() {\n            public void assertValue(StackTraceElement[] traceElements) {\n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements),\n                        classes.length, traceElements.length);\n                \n                for (int i = 0; i < traceElements.length; i++) {\n                    assertEquals(classes[i], traceElements[i].getClassName());\n                }\n            }\n        };\n    }",
        "begin_line": 42,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 54,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(StackTraceElement[])",
        "snippet": "            public void assertValue(StackTraceElement[] traceElements) {\n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements),\n                        classes.length, traceElements.length);\n                \n                for (int i = 0; i < traceElements.length; i++) {\n                    assertEquals(classes[i], traceElements[i].getClassName());\n                }\n            }",
        "begin_line": 44,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 45,col 17)-(line 48,col 62)",
            "(line 50,col 17)-(line 52,col 17)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasMethodInStackTraceAt(int, java.lang.String)",
        "snippet": "    public static <T> Assertor<Throwable> hasMethodInStackTraceAt(final int stackTraceIndex, final String method) {\n        return new Assertor<Throwable>() {\n\n            private String actualMethodAtIndex;\n\n            public void assertValue(Throwable throwable) {\n                actualMethodAtIndex = throwable.getStackTrace()[stackTraceIndex].getMethodName();\n                assertTrue(\n                    \"Method at index: \" + stackTraceIndex + \n                    \"\\n\" +\n                    \"expected to be: \" + method + \n                    \"\\n\" +\n                    \"but is: \" + actualMethodAtIndex,\n                    actualMethodAtIndex.equals(method));\n            }\n        };\n    }",
        "begin_line": 57,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 72,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Throwable)",
        "snippet": "            public void assertValue(Throwable throwable) {\n                actualMethodAtIndex = throwable.getStackTrace()[stackTraceIndex].getMethodName();\n                assertTrue(\n                    \"Method at index: \" + stackTraceIndex + \n                    \"\\n\" +\n                    \"expected to be: \" + method + \n                    \"\\n\" +\n                    \"but is: \" + actualMethodAtIndex,\n                    actualMethodAtIndex.equals(method));\n            }",
        "begin_line": 62,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 63,col 17)-(line 63,col 97)",
            "(line 64,col 17)-(line 70,col 56)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasBridgeMethod(java.lang.String)",
        "snippet": "    public static <T> Assertor<Object> hasBridgeMethod(final String methodName) {\n        return new Assertor<Object>() {\n\n            public void assertValue(Object o) {\n                Class clazz = null;\n                if (o instanceof Class) {\n                    clazz = (Class) o;\n                } else {\n                    clazz = o.getClass();\n                }\n                \n                for (Method m : clazz.getMethods()) {\n                    if (m.isBridge() && m.getName().equals(methodName)) {\n                        return;\n                    }\n                }\n                \n                fail(\"Bridge method [\" + methodName + \"]\\nnot found in:\\n\" + o);\n            }\n        };\n    }",
        "begin_line": 75,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 94,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Object)",
        "snippet": "            public void assertValue(Object o) {\n                Class clazz = null;\n                if (o instanceof Class) {\n                    clazz = (Class) o;\n                } else {\n                    clazz = o.getClass();\n                }\n                \n                for (Method m : clazz.getMethods()) {\n                    if (m.isBridge() && m.getName().equals(methodName)) {\n                        return;\n                    }\n                }\n                \n                fail(\"Bridge method [\" + methodName + \"]\\nnot found in:\\n\" + o);\n            }",
        "begin_line": 78,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 79,col 17)-(line 79,col 35)",
            "(line 80,col 17)-(line 84,col 17)",
            "(line 86,col 17)-(line 90,col 17)",
            "(line 92,col 17)-(line 92,col 80)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasExactlyInOrder(T...)",
        "snippet": "    public static <T> Assertor<Collection> hasExactlyInOrder(final T ... elements) {\n        return new Assertor<Collection>() {\n\n            public void assertValue(Collection value) {\n                assertEquals(elements.length, value.size());\n                \n                boolean containsSublist = Collections.indexOfSubList((List<?>) value, Arrays.asList(elements)) != -1;\n                assertTrue(\n                        \"Elements:\" +\n                        \"\\n\" + \n                        Arrays.toString(elements) + \n                        \"\\n\" +\n                        \"were not found in collection:\" +\n                        \"\\n\" +\n                        value, containsSublist);\n            }\n        };\n    }",
        "begin_line": 97,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 113,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Collection)",
        "snippet": "            public void assertValue(Collection value) {\n                assertEquals(elements.length, value.size());\n                \n                boolean containsSublist = Collections.indexOfSubList((List<?>) value, Arrays.asList(elements)) != -1;\n                assertTrue(\n                        \"Elements:\" +\n                        \"\\n\" + \n                        Arrays.toString(elements) + \n                        \"\\n\" +\n                        \"were not found in collection:\" +\n                        \"\\n\" +\n                        value, containsSublist);\n            }",
        "begin_line": 100,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 101,col 17)-(line 101,col 60)",
            "(line 103,col 17)-(line 103,col 117)",
            "(line 104,col 17)-(line 111,col 48)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.contains(org.hamcrest.Matcher<T>...)",
        "snippet": "    public static <T> Assertor<Collection> contains(final Matcher<T> ... elements) {\n        return new Assertor<Collection>() {\n            \n            public void assertValue(Collection value) {\n                int matched = 0;\n                for (Matcher<T> m : elements) {\n                    for (Object el : value) {\n                        if (m.matches(el)) {\n                            matched++;\n                            continue;\n                        }\n                    }\n                }\n                \n                assertEquals(\"At least one of the matchers failed to match any of the elements\", elements.length, matched);\n            }\n        };\n    }",
        "begin_line": 116,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 132,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Collection)",
        "snippet": "            public void assertValue(Collection value) {\n                int matched = 0;\n                for (Matcher<T> m : elements) {\n                    for (Object el : value) {\n                        if (m.matches(el)) {\n                            matched++;\n                            continue;\n                        }\n                    }\n                }\n                \n                assertEquals(\"At least one of the matchers failed to match any of the elements\", elements.length, matched);\n            }",
        "begin_line": 119,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 120,col 17)-(line 120,col 32)",
            "(line 121,col 17)-(line 128,col 17)",
            "(line 130,col 17)-(line 130,col 123)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.clazz(java.lang.Class<?>)",
        "snippet": "    public static org.hamcrest.Matcher<java.lang.Object> clazz(java.lang.Class<?> type) {\n        return CoreMatchers.is(type);\n    }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 37)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasMethodsInStackTrace(java.lang.String...)",
        "snippet": "    public static Assertor hasMethodsInStackTrace(final String ... methods) {\n        return new Assertor<Throwable>() {\n            public void assertValue(Throwable value) {\n                StackTraceElement[] trace = value.getStackTrace();\n                for (int i = 0; i < methods.length; i++) {\n                    assertEquals(\"Expected methods[\" + i + \"] to be in the stack trace.\", methods[i], trace[i].getMethodName());\n                }\n            }\n        };\n    }",
        "begin_line": 139,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 147,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Throwable)",
        "snippet": "            public void assertValue(Throwable value) {\n                StackTraceElement[] trace = value.getStackTrace();\n                for (int i = 0; i < methods.length; i++) {\n                    assertEquals(\"Expected methods[\" + i + \"] to be in the stack trace.\", methods[i], trace[i].getMethodName());\n                }\n            }",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 142,col 17)-(line 142,col 66)",
            "(line 143,col 17)-(line 145,col 17)"
        ]
    },
    {
        "class_name": "org.mockito.StateMaster",
        "child_classes": [],
        "src_path": "test/org/mockito/StateMaster.java",
        "signature": "org.mockito.StateMaster.reset()",
        "snippet": "    public void reset() {\n        mockingProgress.reset();\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.StateMaster",
        "child_classes": [],
        "src_path": "test/org/mockito/StateMaster.java",
        "signature": "org.mockito.StateMaster.validate()",
        "snippet": "    public void validate() {\n        mockingProgress.validateState();\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldRemoveStubbableFromProgressAfterStubbing()",
        "snippet": "    @Test\n    public void shouldRemoveStubbableFromProgressAfterStubbing() {\n        List mock = Mockito.mock(List.class);\n        Mockito.when(mock.add(\"test\")).thenReturn(true);\n        //FIXME Consider to move to separate test\n        assertNull(new ThreadSafeMockingProgress().pullOngoingStubbing());\n    }",
        "begin_line": 20,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 45)",
            "(line 23,col 9)-(line 23,col 56)",
            "(line 25,col 9)-(line 25,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifying()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifying() {\n        Mockito.verify(\"notMock\");\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {\n        Mockito.verify(\"notMock\", times(19));\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifyingNoMoreInteractions()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingNoMoreInteractions() {\n        Mockito.verifyNoMoreInteractions(\"notMock\");\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifyingZeroInteractions()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingZeroInteractions() {\n        Mockito.verifyZeroInteractions(\"notMock\");\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenStubbingVoid()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenStubbingVoid() {\n        Mockito.stubVoid(\"notMock\");\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenCreatingInOrderObject()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenCreatingInOrderObject() {\n        Mockito.inOrder(\"notMock\");\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldStartingMockSettingsContainDefaultBehavior()",
        "snippet": "    @Test\n    public void shouldStartingMockSettingsContainDefaultBehavior() {\n        //when\n        MockSettingsImpl settings = (MockSettingsImpl) Mockito.withSettings();\n        \n        //then\n        assertEquals(Mockito.RETURNS_DEFAULTS, settings.getDefaultAnswer());\n    }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 78)",
            "(line 65,col 9)-(line 65,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.MockHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/MockHandlerTest.java",
        "signature": "org.mockito.internal.MockHandlerTest.shouldRemoveVerificationModeEvenWhenInvalidMatchers()",
        "snippet": "    @Test\n    public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n        MockingProgress state = new MockingProgressImpl();\n        state.verificationStarted(VerificationModeFactory.atLeastOnce());\n        MockHandler handler = new MockHandler(null, state, new ExceptionThrowingBinder(), null);\n        \n        try {\n            handler.intercept(null, String.class.getDeclaredMethod(\"toString\"), new Object[]{}, null);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {}\n        \n        assertNull(state.pullVerificationMode());\n    }",
        "begin_line": 21,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 58)",
            "(line 24,col 9)-(line 24,col 73)",
            "(line 25,col 9)-(line 25,col 96)",
            "(line 27,col 9)-(line 30,col 52)",
            "(line 32,col 9)-(line 32,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.MockHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/MockHandlerTest.java",
        "signature": "org.mockito.internal.MockHandlerTest.ExceptionThrowingBinder.bindMatchers(org.mockito.internal.progress.ArgumentMatcherStorage, org.mockito.internal.invocation.Invocation)",
        "snippet": "        @Override\n        public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n            throw new InvalidUseOfMatchersException(\"\");\n        }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        finder = new AllInvocationsFinder();\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n    }",
        "begin_line": 25,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 44)",
            "(line 28,col 9)-(line 28,col 39)",
            "(line 29,col 9)-(line 29,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.shouldGetAllInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldGetAllInvocationsInOrder() throws Exception {\n        mockOne.simpleMethod(100);\n        mockTwo.simpleMethod(200);\n        mockOne.simpleMethod(300);\n        \n        List<Invocation> invocations = finder.getAllInvocations(asList(mockOne, mockTwo));\n        \n        assertEquals(3, invocations.size());\n        assertArgumentEquals(100, invocations.get(0));\n        assertArgumentEquals(200, invocations.get(1));\n        assertArgumentEquals(300, invocations.get(2));\n    }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 34)",
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 34)",
            "(line 38,col 9)-(line 38,col 90)",
            "(line 40,col 9)-(line 40,col 44)",
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 54)",
            "(line 43,col 9)-(line 43,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.assertArgumentEquals(java.lang.Object, org.mockito.internal.invocation.Invocation)",
        "snippet": "    private void assertArgumentEquals(Object argumentValue, Invocation invocation) {\n        assertEquals(argumentValue, invocation.getArguments()[0]);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbing() {\n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n\n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n\n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnMockCreation(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnSpyCreation(), UnfinishedStubbingException.class);\n    }",
        "begin_line": 49,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 34)",
            "(line 52,col 9)-(line 52,col 88)",
            "(line 54,col 9)-(line 54,col 34)",
            "(line 55,col 9)-(line 55,col 76)",
            "(line 57,col 9)-(line 57,col 34)",
            "(line 58,col 9)-(line 58,col 80)",
            "(line 60,col 9)-(line 60,col 34)",
            "(line 61,col 9)-(line 61,col 78)",
            "(line 63,col 9)-(line 63,col 34)",
            "(line 64,col 9)-(line 64,col 85)",
            "(line 66,col 9)-(line 66,col 34)",
            "(line 67,col 9)-(line 67,col 94)",
            "(line 69,col 9)-(line 69,col 34)",
            "(line 70,col 9)-(line 70,col 96)",
            "(line 72,col 9)-(line 72,col 34)",
            "(line 73,col 9)-(line 73,col 80)",
            "(line 75,col 9)-(line 75,col 34)",
            "(line 76,col 9)-(line 76,col 84)",
            "(line 78,col 9)-(line 78,col 34)",
            "(line 79,col 9)-(line 79,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedStubbingVoid()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbingVoid() {\n        stubVoid(mock);\n        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n    }",
        "begin_line": 82,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 23)",
            "(line 85,col 9)-(line 85,col 88)",
            "(line 87,col 9)-(line 87,col 23)",
            "(line 88,col 9)-(line 88,col 76)",
            "(line 90,col 9)-(line 90,col 23)",
            "(line 91,col 9)-(line 91,col 80)",
            "(line 93,col 9)-(line 93,col 23)",
            "(line 94,col 9)-(line 94,col 78)",
            "(line 96,col 9)-(line 96,col 23)",
            "(line 97,col 9)-(line 97,col 85)",
            "(line 99,col 9)-(line 99,col 23)",
            "(line 100,col 9)-(line 100,col 94)",
            "(line 102,col 9)-(line 102,col 23)",
            "(line 103,col 9)-(line 103,col 96)",
            "(line 105,col 9)-(line 105,col 23)",
            "(line 106,col 9)-(line 106,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedDoAnswerStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedDoAnswerStubbing() {\n        doAnswer(null);\n        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n    }",
        "begin_line": 109,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 23)",
            "(line 112,col 9)-(line 112,col 88)",
            "(line 114,col 9)-(line 114,col 23)",
            "(line 115,col 9)-(line 115,col 76)",
            "(line 117,col 9)-(line 117,col 23)",
            "(line 118,col 9)-(line 118,col 80)",
            "(line 120,col 9)-(line 120,col 23)",
            "(line 121,col 9)-(line 121,col 78)",
            "(line 123,col 9)-(line 123,col 23)",
            "(line 124,col 9)-(line 124,col 85)",
            "(line 126,col 9)-(line 126,col 23)",
            "(line 127,col 9)-(line 127,col 94)",
            "(line 129,col 9)-(line 129,col 23)",
            "(line 130,col 9)-(line 130,col 96)",
            "(line 132,col 9)-(line 132,col 23)",
            "(line 133,col 9)-(line 133,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedVerification() {\n        verify(mock);\n        detectsAndCleansUp(new OnStub(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerify(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedVerificationException.class);\n    }",
        "begin_line": 136,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 21)",
            "(line 139,col 9)-(line 139,col 80)",
            "(line 141,col 9)-(line 141,col 21)",
            "(line 142,col 9)-(line 142,col 84)",
            "(line 144,col 9)-(line 144,col 21)",
            "(line 145,col 9)-(line 145,col 82)",
            "(line 147,col 9)-(line 147,col 21)",
            "(line 148,col 9)-(line 148,col 89)",
            "(line 150,col 9)-(line 150,col 21)",
            "(line 151,col 9)-(line 151,col 98)",
            "(line 153,col 9)-(line 153,col 21)",
            "(line 154,col 9)-(line 154,col 100)",
            "(line 156,col 9)-(line 156,col 21)",
            "(line 157,col 9)-(line 157,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectMisplacedArgumentMatcher()",
        "snippet": "    @Test\n    public void shouldDetectMisplacedArgumentMatcher() {\n        anyObject();\n        detectsAndCleansUp(new OnStubVoid(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerify(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerifyInOrder(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnDoAnswer(), InvalidUseOfMatchersException.class);\n    }",
        "begin_line": 160,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 20)",
            "(line 163,col 9)-(line 163,col 82)",
            "(line 165,col 9)-(line 165,col 20)",
            "(line 166,col 9)-(line 166,col 80)",
            "(line 168,col 9)-(line 168,col 20)",
            "(line 169,col 9)-(line 169,col 87)",
            "(line 171,col 9)-(line 171,col 20)",
            "(line 172,col 9)-(line 172,col 96)",
            "(line 174,col 9)-(line 174,col 20)",
            "(line 175,col 9)-(line 175,col 98)",
            "(line 177,col 9)-(line 177,col 20)",
            "(line 178,col 9)-(line 178,col 82)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldCorrectStateAfterDetectingUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldCorrectStateAfterDetectingUnfinishedStubbing() {\n        stubVoid(mock).toThrow(new RuntimeException());\n        \n        try {\n            stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);\n            fail();\n        } catch (UnfinishedStubbingException e) {}\n        \n        stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);\n        try {\n            mock.oneArg(true);\n            fail();\n        } catch (RuntimeException e) {}\n    }",
        "begin_line": 181,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 55)",
            "(line 185,col 9)-(line 188,col 50)",
            "(line 190,col 9)-(line 190,col 73)",
            "(line 191,col 9)-(line 194,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldCorrectStateAfterDetectingUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldCorrectStateAfterDetectingUnfinishedVerification() {\n        mock.simpleMethod();\n        verify(mock);\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n        \n        verify(mock).simpleMethod();\n    }",
        "begin_line": 197,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 28)",
            "(line 200,col 9)-(line 200,col 21)",
            "(line 202,col 9)-(line 205,col 54)",
            "(line 207,col 9)-(line 207,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        void detect(IMethods mock);",
        "begin_line": 211,
        "end_line": 211,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            verify(mock);\n        }",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 216,col 13)-(line 216,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            inOrder(mock).verify(mock);\n        }",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 222,col 13)-(line 222,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            verifyZeroInteractions(mock);\n        }",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 228,col 13)-(line 228,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            verifyNoMoreInteractions(mock);\n        }",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 234,col 13)-(line 234,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            doAnswer(null);\n        }",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 240,col 13)-(line 240,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            when(mock);\n        }",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 246,col 13)-(line 246,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            stubVoid(mock);\n        }",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 252,col 13)-(line 252,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            mock.simpleMethod();\n        }",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 258,col 13)-(line 258,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            mock(IMethods.class);\n        }",
        "begin_line": 263,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 264,col 13)-(line 264,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            spy(new Object());\n        }",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 13)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.detectsAndCleansUp(org.mockito.internal.InvalidStateDetectionTest.DetectsInvalidState, java.lang.Class)",
        "snippet": "    private void detectsAndCleansUp(DetectsInvalidState detector, Class expected) {\n        try {\n            detector.detect(mock);\n            fail(\"Should throw an exception\");\n        } catch (Exception e) {\n            assertEquals(expected, e.getClass());\n        }\n        //Make sure state is cleaned up\n        new StateMaster().validate();\n    }",
        "begin_line": 274,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 280,col 9)",
            "(line 282,col 9)-(line 282,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.CollectingDebugDataTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/CollectingDebugDataTest.java",
        "signature": "org.mockito.internal.runners.CollectingDebugDataTest.shouldNotCollectWhenNoJUnitRunner()",
        "snippet": "    @Test\n    public void shouldNotCollectWhenNoJUnitRunner() throws Throwable {\n        //stubbing\n        when(mock.simpleMethod()).thenReturn(\"foo\");\n        \n        //calling unstubbed method\n        mock.differentMethod();\n        \n        MockingProgress progress = new ThreadSafeMockingProgress();\n        \n        assertFalse(progress.getDebuggingInfo().hasData());\n    }",
        "begin_line": 20,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 52)",
            "(line 26,col 9)-(line 26,col 31)",
            "(line 28,col 9)-(line 28,col 67)",
            "(line 30,col 9)-(line 30,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.ClassProviderStub.isJUnit45OrHigherAvailable()",
        "snippet": "        @Override\n        public boolean isJUnit45OrHigherAvailable() {\n            return super.isJUnit45OrHigherAvailable();\n        }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 13)-(line 20,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldCreateRunnerForJUnit44()",
        "snippet": "    @Test\n    public void shouldCreateRunnerForJUnit44() {}",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldCreateRunnerForJUnit45()",
        "snippet": "    @Test\n    public void shouldCreateRunnerForJUnit45() {}",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound()",
        "snippet": "    @Test\n    public void shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound() {\n        //given\n        RunnerProvider provider = new RunnerProvider() {\n            public boolean isJUnit45OrHigherAvailable() {\n                return false;\n            }\n            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                throw new InitializationError(\"Where is JUnit, dude?\");\n            }\n        };\n        RunnerFactory factory = new RunnerFactory(provider);\n        \n        try {\n            //when\n            factory.create(RunnerFactoryTest.class);\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"upgrade your JUnit version\", e.getMessage());\n        }\n    }",
        "begin_line": 64,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 74,col 10)",
            "(line 75,col 9)-(line 75,col 60)",
            "(line 77,col 9)-(line 84,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.Anonymous-a51a6454-8ce8-4e62-93e9-8ccbd1c564b9.isJUnit45OrHigherAvailable()",
        "snippet": "            public boolean isJUnit45OrHigherAvailable() {\n                return false;\n            }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 17)-(line 69,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.Anonymous-0a60650d-df2b-4043-95e1-44ad7264b7ff.newInstance(java.lang.String, java.lang.Class<?>)",
        "snippet": "            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                throw new InitializationError(\"Where is JUnit, dude?\");\n            }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 17)-(line 72,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.util.RunnerProviderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/RunnerProviderTest.java",
        "signature": "org.mockito.internal.runners.util.RunnerProviderTest.shouldKnowAboutJUnit45()",
        "snippet": "    @Test\n    public void shouldKnowAboutJUnit45() throws Exception {\n        //given\n        RunnerProvider provider = new RunnerProvider();\n        //then\n        assertTrue(provider.isJUnit45OrHigherAvailable());\n        //I cannot test the opposite condition :(\n    }",
        "begin_line": 14,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 55)",
            "(line 19,col 9)-(line 19,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.util.RunnerProviderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/RunnerProviderTest.java",
        "signature": "org.mockito.internal.runners.util.RunnerProviderTest.shouldCreateRunnerInstance()",
        "snippet": "    @Test\n    public void shouldCreateRunnerInstance() throws Throwable {\n        //given\n        RunnerProvider provider = new RunnerProvider();\n        //when\n        RunnerImpl runner = provider.newInstance(\"org.mockito.internal.runners.JUnit45AndHigherRunnerImpl\", this.getClass());\n        //then\n        assertNotNull(runner);\n    }",
        "begin_line": 23,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 55)",
            "(line 28,col 9)-(line 28,col 125)",
            "(line 30,col 9)-(line 30,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterTest.shouldPrintUnusedStub()",
        "snippet": "    @Test\n    public void shouldPrintUnusedStub() {\n        // given\n        Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n        WarningsPrinter p = new WarningsPrinter(asList(unusedStub), Arrays.<InvocationMatcher> asList());\n\n        // when\n        p.print(logger);\n\n        // then\n        assertContains(\"stub was not used\", logger.getLoggedInfo());\n        assertContains(\"simpleMethod()\", logger.getLoggedInfo());\n    }",
        "begin_line": 26,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 86)",
            "(line 30,col 9)-(line 30,col 105)",
            "(line 33,col 9)-(line 33,col 24)",
            "(line 36,col 9)-(line 36,col 68)",
            "(line 37,col 9)-(line 37,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterTest.shouldPrintUnstubbedInvocation()",
        "snippet": "    @Test\n    public void shouldPrintUnstubbedInvocation() {\n        // given\n        InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation> asList(), Arrays.<InvocationMatcher> asList(unstubbedInvocation));\n\n        // when\n        p.print(logger);\n\n        // then\n        assertContains(\"was not stubbed\", logger.getLoggedInfo());\n        assertContains(\"differentMethod()\", logger.getLoggedInfo());\n    }",
        "begin_line": 40,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 112)",
            "(line 44,col 9)-(line 44,col 134)",
            "(line 47,col 9)-(line 47,col 24)",
            "(line 50,col 9)-(line 50,col 66)",
            "(line 51,col 9)-(line 51,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterTest.shouldPrintStubWasUsedWithDifferentArgs()",
        "snippet": "    @Test\n    public void shouldPrintStubWasUsedWithDifferentArgs() {\n        // given\n        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n\n        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n\n        // when\n        p.print(logger);\n\n        // then\n        assertContains(\"Stubbed this way\", logger.getLoggedInfo());\n        assertContains(\"simpleMethod(\\\"foo\\\")\", logger.getLoggedInfo());\n        assertContains(\"called with different arguments\", logger.getLoggedInfo());\n        assertContains(\"simpleMethod(\\\"bar\\\")\", logger.getLoggedInfo());\n    }",
        "begin_line": 54,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 87)",
            "(line 58,col 9)-(line 58,col 105)",
            "(line 60,col 9)-(line 60,col 127)",
            "(line 63,col 9)-(line 63,col 24)",
            "(line 66,col 9)-(line 66,col 67)",
            "(line 67,col 9)-(line 67,col 72)",
            "(line 68,col 9)-(line 68,col 82)",
            "(line 69,col 9)-(line 69,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterTest.shouldNotPrintRedundantInformation()",
        "snippet": "    @Test\n    public void shouldNotPrintRedundantInformation() {\n        // given\n        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n\n        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n\n        // when\n        p.print(logger);\n\n        // then\n        assertNotContains(\"stub was not used\", logger.getLoggedInfo());\n        assertNotContains(\"was not stubbed\", logger.getLoggedInfo());\n    }",
        "begin_line": 72,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 87)",
            "(line 76,col 9)-(line 76,col 105)",
            "(line 78,col 9)-(line 78,col 127)",
            "(line 81,col 9)-(line 81,col 24)",
            "(line 84,col 9)-(line 84,col 71)",
            "(line 85,col 9)-(line 85,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.RegisteredInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/RegisteredInvocationsTest.java",
        "signature": "org.mockito.internal.verification.RegisteredInvocationsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        invocations = new RegisteredInvocations();\n    }",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.RegisteredInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/RegisteredInvocationsTest.java",
        "signature": "org.mockito.internal.verification.RegisteredInvocationsTest.shouldNotReturnToStringMethod()",
        "snippet": "    @Test\n    public void shouldNotReturnToStringMethod() throws Exception {\n        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n        Invocation simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n        \n        invocations.add(toString);\n        invocations.add(simpleMethod);\n        \n        assertTrue(invocations.getAll().contains(simpleMethod));\n        assertFalse(invocations.getAll().contains(toString));\n    }",
        "begin_line": 22,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 88)",
            "(line 25,col 9)-(line 25,col 88)",
            "(line 27,col 9)-(line 27,col 34)",
            "(line 28,col 9)-(line 28,col 38)",
            "(line 30,col 9)-(line 30,col 64)",
            "(line 31,col 9)-(line 31,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        mock.varargs(\"first very long argument\", \"second very long argument\", \"another very long argument\");\n        multi = getLastInvocation();\n        multi.toString();\n        \n        mock.varargs(\"short arg\");\n        shortie = getLastInvocation();\n    }",
        "begin_line": 22,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 108)",
            "(line 25,col 9)-(line 25,col 36)",
            "(line 26,col 9)-(line 26,col 25)",
            "(line 28,col 9)-(line 28,col 34)",
            "(line 29,col 9)-(line 29,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenFirstIsMulti()",
        "snippet": "    @Test\n    public void shouldPrintBothInMultilinesWhenFirstIsMulti() {\n        //when\n        SmartPrinter printer = new SmartPrinter(multi, shortie);\n        \n        //then\n        assertContains(\"\\n\", printer.getWanted().toString());\n        assertContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 32,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 64)",
            "(line 38,col 9)-(line 38,col 61)",
            "(line 39,col 9)-(line 39,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenSecondIsMulti()",
        "snippet": "    @Test\n    public void shouldPrintBothInMultilinesWhenSecondIsMulti() {\n        //when\n        SmartPrinter printer = new SmartPrinter(shortie, multi);\n        \n        //then\n        assertContains(\"\\n\", printer.getWanted().toString());\n        assertContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 64)",
            "(line 48,col 9)-(line 48,col 61)",
            "(line 49,col 9)-(line 49,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenBothAreMulti()",
        "snippet": "    @Test\n    public void shouldPrintBothInMultilinesWhenBothAreMulti() {\n        //when\n        SmartPrinter printer = new SmartPrinter(multi, multi);\n        \n        //then\n        assertContains(\"\\n\", printer.getWanted().toString());\n        assertContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 52,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 62)",
            "(line 58,col 9)-(line 58,col 61)",
            "(line 59,col 9)-(line 59,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInSingleLineWhenBothAreShort()",
        "snippet": "    @Test\n    public void shouldPrintBothInSingleLineWhenBothAreShort() {\n        //when\n        SmartPrinter printer = new SmartPrinter(shortie, shortie);\n        \n        //then\n        assertNotContains(\"\\n\", printer.getWanted().toString());\n        assertNotContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 62,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 66)",
            "(line 68,col 9)-(line 68,col 64)",
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch()",
        "snippet": "    @Test\n    public void shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch() {\n        //given\n        List<Matcher> matchers = (List) Arrays.asList(new Equals(1));\n\n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10, 20});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 22,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 69)",
            "(line 28,col 9)-(line 28,col 107)",
            "(line 31,col 9)-(line 31,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch()",
        "snippet": "    @Test\n    public void shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch() {\n        //given\n        List<Matcher> matchers = (List) Arrays.asList(new Equals(10), new Equals(20));\n        \n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10, 20});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 34,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 86)",
            "(line 40,col 9)-(line 40,col 107)",
            "(line 43,col 9)-(line 43,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldFindSuspiciousMatchers()",
        "snippet": "    @Test\n    public void shouldFindSuspiciousMatchers() {\n        //given\n        Equals matcherInt20 = new Equals(20);\n        Long longPretendingAnInt = new Long(20);\n        \n        //when\n        List<Matcher> matchers = (List) Arrays.asList(new Equals(10), matcherInt20);\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10, longPretendingAnInt});\n        \n        //then\n        assertEquals(1, suspicious.length);\n        assertEquals(new Integer(1), suspicious[0]);\n    }",
        "begin_line": 46,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 45)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 53,col 9)-(line 53,col 84)",
            "(line 54,col 9)-(line 54,col 124)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 58,col 9)-(line 58,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindSuspiciousMatchersWhenTypesAreTheSame()",
        "snippet": "    @Test\n    public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {\n        //given\n        Equals matcherWithBadDescription = new Equals(20) {\n            public void describeTo(Description desc) {\n                //let's pretend we have the same description as the toString() of the argument\n                desc.appendText(\"10\");\n            }\n        };\n        Integer argument = 10;\n        \n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes((List) Arrays.asList(matcherWithBadDescription), new Object[] {argument});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 61,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 69,col 10)",
            "(line 70,col 9)-(line 70,col 30)",
            "(line 73,col 9)-(line 73,col 148)",
            "(line 76,col 9)-(line 76,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.Anonymous-6b6dd140-98ba-4bb2-b7b7-ef7773d53870.describeTo(org.hamcrest.Description)",
        "snippet": "            public void describeTo(Description desc) {\n                //let's pretend we have the same description as the toString() of the argument\n                desc.appendText(\"10\");\n            }",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 17)-(line 67,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldWorkFineWhenGivenArgIsNull()",
        "snippet": "    @Test\n    public void shouldWorkFineWhenGivenArgIsNull() {\n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes((List) Arrays.asList(new Equals(20)), new Object[] {null});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 79,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 133)",
            "(line 85,col 9)-(line 85,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldUseMatchersSafely()",
        "snippet": "    @Test\n    public void shouldUseMatchersSafely() {\n        //given\n        List<Matcher> matchers = (List) Arrays.asList(new BaseMatcher() {\n            public boolean matches(Object item) {\n                throw new ClassCastException(\"nasty matcher\");\n            }\n\n            public void describeTo(Description description) {\n            }});\n        \n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 88,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 97,col 16)",
            "(line 100,col 9)-(line 100,col 103)",
            "(line 103,col 9)-(line 103,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.Anonymous-3819807b-2d35-4b82-a1d5-479e6bc5e11c.matches(java.lang.Object)",
        "snippet": "            public boolean matches(Object item) {\n                throw new ClassCastException(\"nasty matcher\");\n            }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 17)-(line 93,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.Anonymous-6a417fd2-449b-45f8-8d2e-dbda7d9ac893.describeTo(org.hamcrest.Description)",
        "snippet": "            public void describeTo(Description description) {\n            }});",
        "begin_line": 96,
        "end_line": 97,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporterStub = new ReporterStub();\n        finderStub = new InvocationsFinderStub();\n        checker = new MissingInvocationInOrderChecker(finderStub, reporterStub);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n    }                                                                    ",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 42)",
            "(line 32,col 9)-(line 32,col 49)",
            "(line 33,col 9)-(line 33,col 80)",
            "(line 35,col 9)-(line 35,col 63)",
            "(line 36,col 9)-(line 36,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldPassWhenMatchingInteractionFound()",
        "snippet": "    @Test\n    public void shouldPassWhenMatchingInteractionFound() throws Exception {\n        Invocation actual = new InvocationBuilder().toInvocation();\n        finderStub.allMatchingUnverifiedChunksToReturn.add(actual);\n        \n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 67)",
            "(line 42,col 9)-(line 42,col 67)",
            "(line 44,col 9)-(line 44,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportWantedButNotInvoked()",
        "snippet": "    @Test\n    public void shouldReportWantedButNotInvoked() throws Exception {\n        assertTrue(finderStub.allMatchingUnverifiedChunksToReturn.isEmpty());\n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n        \n        assertEquals(wanted, reporterStub.wanted);\n    }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 77)",
            "(line 50,col 9)-(line 50,col 84)",
            "(line 52,col 9)-(line 52,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportWantedDiffersFromActual()",
        "snippet": "    @Test\n    public void shouldReportWantedDiffersFromActual() throws Exception {\n        Invocation previous = new InvocationBuilder().toInvocation();\n        finderStub.previousInOrderToReturn = previous;\n        \n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n        \n        assertEquals(wanted, reporterStub.wanted);\n        assertEquals(previous, reporterStub.previous);\n    }",
        "begin_line": 55,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 69)",
            "(line 58,col 9)-(line 58,col 54)",
            "(line 60,col 9)-(line 60,col 84)",
            "(line 62,col 9)-(line 62,col 50)",
            "(line 63,col 9)-(line 63,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.ReporterStub.wantedButNotInvokedInOrder(org.mockito.exceptions.PrintableInvocation, org.mockito.exceptions.PrintableInvocation)",
        "snippet": "        @Override public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n            this.wanted = wanted;\n            this.previous = previous;\n        }",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 33)",
            "(line 72,col 13)-(line 72,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.ReporterStub.wantedButNotInvoked(org.mockito.exceptions.PrintableInvocation)",
        "snippet": "        @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n            this.wanted = wanted;\n        }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 13)-(line 76,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findAllMatchingUnverifiedChunks(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    @Override\n    public List<Invocation> findAllMatchingUnverifiedChunks(List<Invocation> invocations, InvocationMatcher wanted) {\n        return allMatchingUnverifiedChunksToReturn;\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findMatchingChunk(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int)",
        "snippet": "    @Override\n    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        return validMatchingChunkToReturn;\n    }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findInvocations(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    @Override public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted) {\n        this.invocations = invocations;\n        return actualToReturn;\n    }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 39)",
            "(line 38,col 9)-(line 38,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findSimilarInvocation(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n        this.invocations = invocations;\n        return similarToReturn;\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 39)",
            "(line 43,col 9)-(line 43,col 31)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findFirstUnverified(java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    @Override public Invocation findFirstUnverified(List<Invocation> invocations) {\n        this.invocations = invocations;\n        return firstUnverifiedToReturn;\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 39)",
            "(line 48,col 9)-(line 48,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findPreviousVerifiedInOrder(java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    @Override\n    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations) {\n        return previousInOrderToReturn;\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporterStub = new ReporterStub();\n        finderStub = new InvocationsFinderStub();\n        checker = new MissingInvocationChecker(finderStub, reporterStub);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = asList(new InvocationBuilder().toInvocation());\n    }",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 42)",
            "(line 34,col 9)-(line 34,col 49)",
            "(line 35,col 9)-(line 35,col 73)",
            "(line 37,col 9)-(line 37,col 63)",
            "(line 38,col 9)-(line 38,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldAskFinderForActualInvocations()",
        "snippet": "    @Test\n    public void shouldAskFinderForActualInvocations() {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        checker.check(invocations, wanted);\n        \n        assertSame(invocations, finderStub.invocations);\n    }",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 78)",
            "(line 44,col 9)-(line 44,col 43)",
            "(line 46,col 9)-(line 46,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldPassBecauseActualInvocationFound()",
        "snippet": "    @Test\n    public void shouldPassBecauseActualInvocationFound() {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        checker.check(invocations, wanted);\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 78)",
            "(line 52,col 9)-(line 52,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldAskAnalyzerForSimilarInvocation()",
        "snippet": "    @Test\n    public void shouldAskAnalyzerForSimilarInvocation() {\n        checker.check(invocations, wanted);\n        \n        assertSame(invocations, finderStub.invocations);\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 43)",
            "(line 59,col 9)-(line 59,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldReportWantedButNotInvoked()",
        "snippet": "    @Test\n    public void shouldReportWantedButNotInvoked() {\n        //given          \n        assertTrue(finderStub.actualToReturn.isEmpty());\n        finderStub.similarToReturn = null;\n        \n        //when\n        checker.check(invocations, wanted);\n        \n        //then\n        assertEquals(wanted, reporterStub.wanted);\n        assertNull(reporterStub.actualLocation);\n    }",
        "begin_line": 62,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 56)",
            "(line 66,col 9)-(line 66,col 42)",
            "(line 69,col 9)-(line 69,col 43)",
            "(line 72,col 9)-(line 72,col 50)",
            "(line 73,col 9)-(line 73,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldReportWantedInvocationDiffersFromActual()",
        "snippet": "    @Test\n    public void shouldReportWantedInvocationDiffersFromActual() {\n        assertTrue(finderStub.actualToReturn.isEmpty());\n        Invocation actualInvocation = new InvocationBuilder().toInvocation();\n        finderStub.similarToReturn = actualInvocation;\n        \n        checker.check(invocations, wanted);\n        \n        assertNotNull(reporterStub.wanted);\n        assertNotNull(reporterStub.actual);\n        \n        assertSame(actualInvocation.getLocation(), reporterStub.actualLocation);\n    }",
        "begin_line": 76,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 56)",
            "(line 79,col 9)-(line 79,col 77)",
            "(line 80,col 9)-(line 80,col 54)",
            "(line 82,col 9)-(line 82,col 43)",
            "(line 84,col 9)-(line 84,col 43)",
            "(line 85,col 9)-(line 85,col 43)",
            "(line 87,col 9)-(line 87,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.ReporterStub.wantedButNotInvoked(org.mockito.exceptions.PrintableInvocation, java.util.List<? extends org.mockito.exceptions.PrintableInvocation>)",
        "snippet": "        @Override\n        public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n            this.wanted = wanted;\n        }",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 13)-(line 97,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.ReporterStub.argumentsAreDifferent(java.lang.String, java.lang.String, org.mockito.internal.debugging.Location)",
        "snippet": "        @Override public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n                    this.wanted = wanted;\n                    this.actual = actual;\n                    this.actualLocation = actualLocation;\n        }",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 101,col 21)-(line 101,col 41)",
            "(line 102,col 21)-(line 102,col 41)",
            "(line 103,col 21)-(line 103,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporterStub = new ReporterStub();\n        finderStub = new InvocationsFinderStub();\n        checker = new NumberOfInvocationsChecker(reporterStub, finderStub);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n    }",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 42)",
            "(line 33,col 9)-(line 33,col 49)",
            "(line 34,col 9)-(line 34,col 75)",
            "(line 36,col 9)-(line 36,col 63)",
            "(line 37,col 9)-(line 37,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportTooLittleActual()",
        "snippet": "    @Test\n    public void shouldReportTooLittleActual() throws Exception {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        \n        checker.check(invocations, wanted, 100);\n        \n        assertEquals(1, reporterStub.actualCount);\n        assertEquals(100, reporterStub.wantedCount);\n        assertEquals(wanted, reporterStub.wanted);\n    }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 78)",
            "(line 44,col 9)-(line 44,col 48)",
            "(line 46,col 9)-(line 46,col 50)",
            "(line 47,col 9)-(line 47,col 52)",
            "(line 48,col 9)-(line 48,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportWithLastInvocationStackTrace()",
        "snippet": "    @Test\n    public void shouldReportWithLastInvocationStackTrace() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        \n        finderStub.actualToReturn.addAll(asList(first, second));\n        \n        checker.check(invocations, wanted, 100);\n        \n        assertSame(second.getLocation(), reporterStub.location);\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 66)",
            "(line 54,col 9)-(line 54,col 67)",
            "(line 56,col 9)-(line 56,col 64)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 60,col 9)-(line 60,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound()",
        "snippet": "    @Test\n    public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound() throws Exception {\n        assertTrue(finderStub.actualToReturn.isEmpty());\n        \n        checker.check(invocations, wanted, 100);\n        \n        assertNull(reporterStub.location);\n    }",
        "begin_line": 63,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 56)",
            "(line 67,col 9)-(line 67,col 48)",
            "(line 69,col 9)-(line 69,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportWithFirstUndesiredInvocationStackTrace()",
        "snippet": "    @Test\n    public void shouldReportWithFirstUndesiredInvocationStackTrace() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        Invocation third = new InvocationBuilder().toInvocation();\n        \n        finderStub.actualToReturn.addAll(asList(first, second, third));\n        \n        checker.check(invocations, wanted, 2);\n        \n        assertSame(third.getLocation(), reporterStub.location);\n    }",
        "begin_line": 72,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 66)",
            "(line 75,col 9)-(line 75,col 67)",
            "(line 76,col 9)-(line 76,col 66)",
            "(line 78,col 9)-(line 78,col 71)",
            "(line 80,col 9)-(line 80,col 46)",
            "(line 82,col 9)-(line 82,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportTooManyActual()",
        "snippet": "    @Test\n    public void shouldReportTooManyActual() throws Exception {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        \n        checker.check(invocations, wanted, 1);\n        \n        assertEquals(2, reporterStub.actualCount);\n        assertEquals(1, reporterStub.wantedCount);\n        assertEquals(wanted, reporterStub.wanted);\n    }",
        "begin_line": 85,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 78)",
            "(line 88,col 9)-(line 88,col 78)",
            "(line 90,col 9)-(line 90,col 46)",
            "(line 92,col 9)-(line 92,col 50)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportNeverWantedButInvoked()",
        "snippet": "    @Test\n    public void shouldReportNeverWantedButInvoked() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        finderStub.actualToReturn.add(invocation);\n        \n        checker.check(invocations, wanted, 0);\n        \n        assertEquals(wanted, reporterStub.wanted);\n        assertEquals(invocation.getLocation(), reporterStub.location);\n    }",
        "begin_line": 97,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 71)",
            "(line 100,col 9)-(line 100,col 50)",
            "(line 102,col 9)-(line 102,col 46)",
            "(line 104,col 9)-(line 104,col 50)",
            "(line 105,col 9)-(line 105,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldMarkInvocationsAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkInvocationsAsVerified() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        finderStub.actualToReturn.add(invocation);\n        assertFalse(invocation.isVerified());\n        \n        checker.check(invocations, wanted, 1);\n        \n        assertTrue(invocation.isVerified());\n    }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 71)",
            "(line 111,col 9)-(line 111,col 50)",
            "(line 112,col 9)-(line 112,col 45)",
            "(line 114,col 9)-(line 114,col 46)",
            "(line 116,col 9)-(line 116,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.ReporterStub.tooLittleActualInvocations(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "        @Override public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n                    this.wantedCount = discrepancy.getWantedCount();\n                    this.actualCount = discrepancy.getActualCount();\n                    this.wanted = wanted;\n                    this.location = lastActualLocation;\n        }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 21)-(line 125,col 68)",
            "(line 126,col 21)-(line 126,col 68)",
            "(line 127,col 21)-(line 127,col 41)",
            "(line 128,col 21)-(line 128,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.ReporterStub.tooManyActualInvocations(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n                    this.wantedCount = wantedCount;\n                    this.actualCount = actualCount;\n                    this.wanted = wanted;\n                    this.location = firstUndesired;\n        }",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 132,col 21)-(line 132,col 51)",
            "(line 133,col 21)-(line 133,col 51)",
            "(line 134,col 21)-(line 134,col 41)",
            "(line 135,col 21)-(line 135,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.ReporterStub.neverWantedButInvoked(org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "        @Override\n        public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n            this.wanted = wanted;\n            this.location = firstUndesired;\n        }",
        "begin_line": 138,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 13)-(line 140,col 33)",
            "(line 141,col 13)-(line 141,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporter = new Reporter();\n        finderStub = new InvocationsFinderStub();\n        checker = new NumberOfInvocationsInOrderChecker(finderStub, reporter);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 34)",
            "(line 31,col 9)-(line 31,col 49)",
            "(line 32,col 9)-(line 32,col 78)",
            "(line 34,col 9)-(line 34,col 63)",
            "(line 35,col 9)-(line 35,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty()",
        "snippet": "    @Test\n    public void shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty() throws Exception {\n        assertTrue(finderStub.validMatchingChunkToReturn.isEmpty());\n        checker.check(invocations, wanted, 0);\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 68)",
            "(line 41,col 9)-(line 41,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldPassIfChunkMatches()",
        "snippet": "    @Test\n    public void shouldPassIfChunkMatches() throws Exception {\n        finderStub.validMatchingChunkToReturn.add(wanted.getInvocation());\n        \n        checker.check(invocations, wanted, 1);\n    }",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 74)",
            "(line 48,col 9)-(line 48,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldReportTooLittleInvocations()",
        "snippet": "    @Test\n    public void shouldReportTooLittleInvocations() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n        \n        try {\n            checker.check(invocations, wanted, 4);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"Wanted 4 times\", e.getMessage());\n            assertContains(\"But was 2 times\", e.getMessage());\n        }\n    }",
        "begin_line": 51,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 66)",
            "(line 54,col 9)-(line 54,col 67)",
            "(line 55,col 9)-(line 55,col 76)",
            "(line 57,col 9)-(line 63,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldReportTooManyInvocations()",
        "snippet": "    @Test\n    public void shouldReportTooManyInvocations() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n        \n        try {\n            checker.check(invocations, wanted, 1);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"Wanted 1 time\", e.getMessage());\n            assertContains(\"But was 2 times\", e.getMessage());\n        }\n    }",
        "begin_line": 66,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 66)",
            "(line 69,col 9)-(line 69,col 67)",
            "(line 70,col 9)-(line 70,col 76)",
            "(line 72,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldMarkAsVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldMarkAsVerifiedInOrder() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        assertFalse(invocation.isVerifiedInOrder());\n        finderStub.validMatchingChunkToReturn.addAll(asList(invocation)); \n        \n        checker.check(invocations, wanted, 1);\n        \n        assertTrue(invocation.isVerifiedInOrder());\n    }",
        "begin_line": 81,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 71)",
            "(line 84,col 9)-(line 84,col 52)",
            "(line 85,col 9)-(line 85,col 73)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 89,col 9)-(line 89,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/ConditionalStackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest.shouldNotFilterWhenConfigurationSaysNo()",
        "snippet": "    @Test\n    public void shouldNotFilterWhenConfigurationSaysNo() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n        \n        Throwable t = new TraceBuilder().classes(\n                \"org.test.MockitoSampleTest\",\n                \"org.mockito.Mockito\" \n        ).toThrowable();\n        \n        filter.filter(t);\n        \n        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.mockito.Mockito\", \"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 18,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 72)",
            "(line 22,col 9)-(line 25,col 24)",
            "(line 27,col 9)-(line 27,col 25)",
            "(line 29,col 9)-(line 29,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/ConditionalStackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest.shouldFilterWhenConfigurationSaysYes()",
        "snippet": "    @Test\n    public void shouldFilterWhenConfigurationSaysYes() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n        \n        Throwable t = new TraceBuilder().classes(\n                \"org.test.MockitoSampleTest\",\n                \"org.mockito.Mockito\" \n        ).toThrowable();\n        \n        filter.filter(t);\n        \n        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 71)",
            "(line 36,col 9)-(line 39,col 24)",
            "(line 41,col 9)-(line 41,col 25)",
            "(line 43,col 9)-(line 43,col 85)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldFilterOutCglibGarbage()",
        "snippet": "    @Test\n    public void shouldFilterOutCglibGarbage() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n            \"MockitoExampleTest\",\n            \"List$$EnhancerByMockitoWithCGLIB$$2c406024\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"MockitoExampleTest\"));\n    }",
        "begin_line": 17,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 22,col 25)",
            "(line 24,col 9)-(line 24,col 63)",
            "(line 26,col 9)-(line 26,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldFilterOutMockitoPackage()",
        "snippet": "    @Test\n    public void shouldFilterOutMockitoPackage() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n            \"org.test.MockitoSampleTest\",\n            \"org.mockito.Mockito\"\n        ).toTraceArray();\n            \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 29,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 34,col 25)",
            "(line 36,col 9)-(line 36,col 63)",
            "(line 38,col 9)-(line 38,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldFilterOutTracesMiddleBadTraces()",
        "snippet": "    @Test\n    public void shouldFilterOutTracesMiddleBadTraces() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.test.MockitoSampleTest\",\n                \"org.test.TestSupport\",\n                \"org.mockito.Mockito\", \n                \"org.test.TestSupport\",\n                \"org.mockito.Mockito\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.TestSupport\", \"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 41,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 49,col 25)",
            "(line 51,col 9)-(line 51,col 63)",
            "(line 53,col 9)-(line 53,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldKeepRunners()",
        "snippet": "    @Test\n    public void shouldKeepRunners() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.mockito.runners.Runner\",\n                \"junit.stuff\",\n                \"org.test.MockitoSampleTest\",\n                \"org.mockito.Mockito\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"junit.stuff\", \"org.mockito.runners.Runner\"));\n    }",
        "begin_line": 56,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 63,col 25)",
            "(line 65,col 9)-(line 65,col 63)",
            "(line 67,col 9)-(line 67,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldKeepInternalRunners()",
        "snippet": "    @Test\n    public void shouldKeepInternalRunners() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.mockito.internal.runners.Runner\",\n                \"org.test.MockitoSampleTest\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"org.mockito.internal.runners.Runner\"));\n    }",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 75,col 25)",
            "(line 77,col 9)-(line 77,col 63)",
            "(line 79,col 9)-(line 79,col 119)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldStartFilteringAndKeepTop()",
        "snippet": "    @Test\n    public void shouldStartFilteringAndKeepTop() {\n        //given\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.test.Good\",\n                \"org.mockito.internal.Bad\",\n                \"org.test.MockitoSampleTest\"\n        ).toTraceArray();\n        \n        //when\n        StackTraceElement[] filtered = filter.filter(t, true);\n        \n        //then\n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"org.test.Good\"));\n    }",
        "begin_line": 82,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 89,col 25)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 95,col 9)-(line 95,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions()",
        "snippet": "    @Test\n    public void shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.good.Trace\",\n                \"org.yet.another.good.Trace\",\n                \"org.mockito.internal.to.be.Filtered\",\n                \"org.test.MockitoSampleTest\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, true);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\n                \"org.test.MockitoSampleTest\",\n                \"org.yet.another.good.Trace\",\n                \"org.good.Trace\"\n                ));\n    }",
        "begin_line": 98,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 105,col 25)",
            "(line 107,col 9)-(line 107,col 62)",
            "(line 109,col 9)-(line 113,col 19)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldReturnEmptyArrayWhenInputIsEmpty()",
        "snippet": "    @Test\n    public void shouldReturnEmptyArrayWhenInputIsEmpty() throws Exception {\n        //when\n        StackTraceElement[] filtered = filter.filter(new StackTraceElement[0], false);\n        //then\n        assertEquals(0, filtered.length);\n    }",
        "begin_line": 116,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 86)",
            "(line 121,col 9)-(line 121,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.CreationValidatorStub.validateType(java.lang.Class)",
        "snippet": "        public void validateType(Class classToMock) {\n            typeValidated = true;\n        }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 28,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.CreationValidatorStub.validateExtraInterfaces(java.lang.Class, java.lang.Class...)",
        "snippet": "        public void validateExtraInterfaces(Class classToMock, Class ... interfaces) {\n            extraInterfacesValidated = true;\n        }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 13)-(line 31,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.shouldValidate()",
        "snippet": "    @Test \n    public void shouldValidate() {\n        //given\n        assertFalse(creationValidator.extraInterfacesValidated);\n        assertFalse(creationValidator.typeValidated);\n\n        //when\n        mockUtil.createMock(IMethods.class, new ThreadSafeMockingProgress(), new MockSettingsImpl());\n        \n        //then\n        assertTrue(creationValidator.extraInterfacesValidated);\n        assertTrue(creationValidator.typeValidated);\n    }",
        "begin_line": 38,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 64)",
            "(line 42,col 9)-(line 42,col 53)",
            "(line 45,col 9)-(line 45,col 101)",
            "(line 48,col 9)-(line 48,col 63)",
            "(line 49,col 9)-(line 49,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.shouldGetHandler()",
        "snippet": "    @Test \n    public void shouldGetHandler() {\n        List mock = Mockito.mock(List.class);\n        assertNotNull(mockUtil.getMockHandler(mock));\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 45)",
            "(line 55,col 9)-(line 55,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.shouldScreamWhenEnhancedButNotAMockPassed()",
        "snippet": "    @Test \n    public void shouldScreamWhenEnhancedButNotAMockPassed() {\n        Object o = Enhancer.create(ArrayList.class, NoOp.INSTANCE);\n        try {\n            mockUtil.getMockHandler(o);\n            fail();\n        } catch (NotAMockException e) {}\n    }",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 67)",
            "(line 61,col 9)-(line 64,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.shouldScreamWhenNotAMockPassed()",
        "snippet": "    @Test (expected=NotAMockException.class)\n    public void shouldScreamWhenNotAMockPassed() {\n        mockUtil.getMockHandler(\"\");\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.shouldScreamWhenNullPassed()",
        "snippet": "    @Test (expected=MockitoException.class)\n    public void shouldScreamWhenNullPassed() {\n        mockUtil.getMockHandler(null);\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.shouldValidateMock()",
        "snippet": "    @Test\n    public void shouldValidateMock() {\n        assertFalse(mockUtil.isMock(\"i mock a mock\"));\n        assertTrue(mockUtil.isMock(Mockito.mock(List.class)));\n    }",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 54)",
            "(line 80,col 9)-(line 80,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.CreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/CreationValidatorTest.java",
        "signature": "org.mockito.internal.util.CreationValidatorTest.shouldNotAllowExtraInterfaceThatIsTheSameAsTheMockedType()",
        "snippet": "    @Test\n    public void shouldNotAllowExtraInterfaceThatIsTheSameAsTheMockedType() throws Exception {\n        //given\n        CreationValidator validator = new CreationValidator();\n        \n        try {\n            //when\n            validator.validateExtraInterfaces(IMethods.class, new Class<?>[] {IMethods.class});\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"You mocked following type: IMethods\", e.getMessage());\n        }\n    }",
        "begin_line": 16,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 62)",
            "(line 21,col 9)-(line 28,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.CreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/CreationValidatorTest.java",
        "signature": "org.mockito.internal.util.CreationValidatorTest.shouldIgnoreIfExtraInterfacesAreNull()",
        "snippet": "    @Test\n    public void shouldIgnoreIfExtraInterfacesAreNull() throws Exception {\n        //given\n        CreationValidator validator = new CreationValidator();\n        \n        //when\n        validator.validateExtraInterfaces(IMethods.class, (Class[]) null);\n\n        //then ok\n    }",
        "begin_line": 31,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 62)",
            "(line 37,col 9)-(line 37,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.CreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/CreationValidatorTest.java",
        "signature": "org.mockito.internal.util.CreationValidatorTest.shouldNotAllowFinalClasses()",
        "snippet": "    @Test\n    public void shouldNotAllowFinalClasses() throws Exception {\n        //given\n        CreationValidator validator = new CreationValidator();\n        \n        try {\n            //when\n            validator.validateType(FinalClass.class);\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"Cannot mock/spy\", e.getMessage());\n        }\n    }",
        "begin_line": 42,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 62)",
            "(line 47,col 9)-(line 54,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.DecamelizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/DecamelizerTest.java",
        "signature": "org.mockito.internal.util.DecamelizerTest.shouldProduceDecentDescription()",
        "snippet": "    @Test\n    public void shouldProduceDecentDescription() throws Exception {\n        assertEquals(\"<Sentence with strong language>\", decamelizeMatcher(\"SentenceWithStrongLanguage\"));\n        assertEquals(\"<W e i r d o 1>\", decamelizeMatcher(\"WEIRDO1\"));\n        assertEquals(\"<_>\", decamelizeMatcher(\"_\"));\n        assertEquals(\"<Has exactly 3 elements>\", decamelizeMatcher(\"HasExactly3Elements\"));\n        assertEquals(\"<custom argument matcher>\", decamelizeMatcher(\"\"));\n    }",
        "begin_line": 14,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 105)",
            "(line 17,col 9)-(line 17,col 70)",
            "(line 18,col 9)-(line 18,col 52)",
            "(line 19,col 9)-(line 19,col 91)",
            "(line 20,col 9)-(line 20,col 73)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ListUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ListUtilTest.java",
        "signature": "org.mockito.internal.util.ListUtilTest.shouldFilterList()",
        "snippet": "    @Test\n    public void shouldFilterList() throws Exception {\n        List list = asList(\"one\", \"x\", \"two\", \"x\", \"three\");\n        List filtered = ListUtil.filter(list, new Filter() {\n            public boolean isOut(Object object) {\n                return object == \"x\";\n            }\n        });\n        \n        assertThat(filtered, hasExactlyInOrder(\"one\", \"two\", \"three\"));\n    }",
        "begin_line": 20,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 60)",
            "(line 23,col 9)-(line 27,col 11)",
            "(line 29,col 9)-(line 29,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ListUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ListUtilTest.java",
        "signature": "org.mockito.internal.util.ListUtilTest.Anonymous-4eaa617b-6f96-4c03-8f25-806680ee05b7.isOut(java.lang.Object)",
        "snippet": "            public boolean isOut(Object object) {\n                return object == \"x\";\n            }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 17)-(line 25,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ListUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ListUtilTest.java",
        "signature": "org.mockito.internal.util.ListUtilTest.shouldReturnEmptyIfEmptyListGiven()",
        "snippet": "    @Test\n    public void shouldReturnEmptyIfEmptyListGiven() throws Exception {\n        List list = new LinkedList();\n        List filtered = ListUtil.filter(list, null);\n        assertTrue(filtered.isEmpty());\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 37)",
            "(line 35,col 9)-(line 35,col 52)",
            "(line 36,col 9)-(line 36,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.SomeObject.SomeObject(int)",
        "snippet": "        public SomeObject(int finalField) {\n            this.finalField = finalField;\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyBasicFinalField()",
        "snippet": "    @Test\n    public void shouldShallowCopyBasicFinalField() throws Exception {\n        // given\n        assertEquals(100, from.finalField);\n        assertNotEquals(100, to.finalField);\n\n        // when\n        tool.copyToMock(from, to);\n\n        // then\n        assertEquals(100, to.finalField);\n    }",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)",
            "(line 52,col 9)-(line 52,col 44)",
            "(line 55,col 9)-(line 55,col 34)",
            "(line 58,col 9)-(line 58,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyTransientPrivateFields()",
        "snippet": "    @Test\n    public void shouldShallowCopyTransientPrivateFields() throws Exception {\n        // given\n        from.privateTransientField = 1000;\n        assertNotEquals(1000, to.privateTransientField);\n\n        // when\n        tool.copyToMock(from, to);\n\n        // then\n        assertEquals(1000, to.privateTransientField);\n    }",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 42)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 68,col 9)-(line 68,col 34)",
            "(line 71,col 9)-(line 71,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyLinkedListIntoMock()",
        "snippet": "    @Test\n    public void shouldShallowCopyLinkedListIntoMock() throws Exception {\n        // given\n        LinkedList fromList = new LinkedList();\n        LinkedList toList = mock(LinkedList.class);\n\n        // when\n        tool.copyToMock(fromList, toList);\n\n        // then no exception is thrown\n    }",
        "begin_line": 74,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 78,col 51)",
            "(line 81,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyFieldValuesIntoMock()",
        "snippet": "    @Test\n    public void shouldShallowCopyFieldValuesIntoMock() throws Exception {\n        // given\n        from.defaultField = \"foo\";\n        from.instancePublicField = new SomeOtherObject();\n        from.privateField = 1;\n        from.privateTransientField = 2;\n        from.protectedField = 3;\n        \n        assertNotEquals(from.defaultField, to.defaultField);\n        assertNotEquals(from.instancePublicField, to.instancePublicField);\n        assertNotEquals(from.privateField, to.privateField);\n        assertNotEquals(from.privateTransientField, to.privateTransientField);\n        assertNotEquals(from.protectedField, to.protectedField);\n\n        // when\n        tool.copyToMock(from, to);\n\n        // then\n        assertEquals(from.defaultField, to.defaultField);\n        assertEquals(from.instancePublicField, to.instancePublicField);\n        assertEquals(from.privateField, to.privateField);\n        assertEquals(from.privateTransientField, to.privateTransientField);\n        assertEquals(from.protectedField, to.protectedField);\n    }",
        "begin_line": 86,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 91,col 30)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 32)",
            "(line 95,col 9)-(line 95,col 60)",
            "(line 96,col 9)-(line 96,col 74)",
            "(line 97,col 9)-(line 97,col 60)",
            "(line 98,col 9)-(line 98,col 78)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 105,col 57)",
            "(line 106,col 9)-(line 106,col 71)",
            "(line 107,col 9)-(line 107,col 57)",
            "(line 108,col 9)-(line 108,col 75)",
            "(line 109,col 9)-(line 109,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldCopyValuesOfInheritedFields()",
        "snippet": "    @Test\n    public void shouldCopyValuesOfInheritedFields() throws Exception {\n        //given\n        ((InheritMe) from).privateInherited = \"foo\";\n        ((InheritMe) from).protectedInherited = \"bar\";\n    \n        assertNotEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n        assertNotEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n        \n        //when\n        tool.copyToMock(from, to);\n        \n        //then\n        assertEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n        assertEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n    }",
        "begin_line": 112,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 54)",
            "(line 118,col 9)-(line 118,col 96)",
            "(line 119,col 9)-(line 119,col 96)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 93)",
            "(line 126,col 9)-(line 126,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldEnableAndThenDisableAccessibility()",
        "snippet": "    @Test\n    public void shouldEnableAndThenDisableAccessibility() throws Exception {\n        //given\n        Field privateField = SomeObject.class.getDeclaredField(\"privateField\");\n        assertFalse(privateField.isAccessible());\n        \n        //when\n        tool.copyToMock(from, to);\n        \n        //then\n        privateField = SomeObject.class.getDeclaredField(\"privateField\");\n        assertFalse(privateField.isAccessible());\n    }",
        "begin_line": 129,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 79)",
            "(line 133,col 9)-(line 133,col 49)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 139,col 73)",
            "(line 140,col 9)-(line 140,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.copy.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/copy/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.copy.LenientCopyToolTest.shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue()",
        "snippet": "    @Test\n    public void shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue() throws Exception {\n        //given\n        tool.fieldCopier = mock(FieldCopier.class);\n        \n        doNothing().\n        doThrow(new IllegalAccessException()).\n        doNothing().\n        when(tool.fieldCopier).\n        copyValue(anyObject(), anyObject(), any(Field.class));\n        \n        //when\n        tool.copyToMock(from, to);\n        \n        //then\n        verify(tool.fieldCopier, atLeast(3)).copyValue(any(), any(), any(Field.class));\n    }",
        "begin_line": 143,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 51)",
            "(line 148,col 9)-(line 152,col 62)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 158,col 9)-(line 158,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.VerificationModeBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/VerificationModeBuilder.java",
        "signature": "org.mockito.internal.progress.VerificationModeBuilder.inOrder()",
        "snippet": "    public Times inOrder() {\n        return VerificationModeFactory.times(times);\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.VerificationModeBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/VerificationModeBuilder.java",
        "signature": "org.mockito.internal.progress.VerificationModeBuilder.times(int)",
        "snippet": "    public VerificationModeBuilder times(int times) {\n        this.times = times;\n        return this;\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 27)",
            "(line 21,col 9)-(line 21,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.TimesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/TimesTest.java",
        "signature": "org.mockito.internal.progress.TimesTest.shouldNotAllowNegativeNumberOfInvocations()",
        "snippet": "    @Test\n    public void shouldNotAllowNegativeNumberOfInvocations() throws Exception {\n        try {\n            VerificationModeFactory.times(-50);\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Negative value is not allowed here\", e.getMessage());\n        }\n    }",
        "begin_line": 14,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 21,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.TimesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/TimesTest.java",
        "signature": "org.mockito.internal.progress.TimesTest.shouldNotAllowNegativeNumberOfMinimumInvocations()",
        "snippet": "    @Test\n    public void shouldNotAllowNegativeNumberOfMinimumInvocations() throws Exception {\n        try {\n            VerificationModeFactory.atLeast(-50);\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Negative value or zero are not allowed here\", e.getMessage());\n        }\n    }",
        "begin_line": 24,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 31,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mockingProgress = new MockingProgressImpl();\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.shouldStartVerificationAndPullVerificationMode()",
        "snippet": "    @Test\n    public void shouldStartVerificationAndPullVerificationMode() throws Exception {\n        assertNull(mockingProgress.pullVerificationMode());\n        \n        VerificationMode mode = VerificationModeFactory.times(19);\n        \n        mockingProgress.verificationStarted(mode);\n        \n        assertSame(mode, mockingProgress.pullVerificationMode());\n        \n        assertNull(mockingProgress.pullVerificationMode());\n    }",
        "begin_line": 23,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 59)",
            "(line 27,col 9)-(line 27,col 66)",
            "(line 29,col 9)-(line 29,col 50)",
            "(line 31,col 9)-(line 31,col 65)",
            "(line 33,col 9)-(line 33,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.shouldCheckIfVerificationWasFinished()",
        "snippet": "    @Test\n    public void shouldCheckIfVerificationWasFinished() throws Exception {\n        mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n        try {\n            mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 36,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 83)",
            "(line 39,col 9)-(line 42,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldBeEqual()",
        "snippet": "    public void shouldBeEqual() {\n        assertEquals(new Equals(null), new Equals(null));\n        assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));\n        assertFalse(new Equals(null).equals(null));\n        assertFalse(new Equals(null).equals(\"Test\"));\n        try {\n            new Equals(null).hashCode();\n            fail();\n        } catch (UnsupportedOperationException expected) {\n        }\n    }",
        "begin_line": 13,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 57)",
            "(line 15,col 9)-(line 15,col 77)",
            "(line 16,col 9)-(line 16,col 51)",
            "(line 17,col 9)-(line 17,col 53)",
            "(line 18,col 9)-(line 22,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeWithExtraTypeInfo()",
        "snippet": "    @Test\n    public void shouldDescribeWithExtraTypeInfo() throws Exception {\n        String descStr = describe(new Equals(100).withExtraTypeInfo());\n        \n        assertEquals(\"(Integer) 100\", descStr);\n    }",
        "begin_line": 25,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 71)",
            "(line 29,col 9)-(line 29,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeWithExtraTypeInfoOfLong()",
        "snippet": "    @Test\n    public void shouldDescribeWithExtraTypeInfoOfLong() throws Exception {\n        String descStr = describe(new Equals(100L).withExtraTypeInfo());\n        \n        assertEquals(\"(Long) 100\", descStr);\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 72)",
            "(line 36,col 9)-(line 36,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldAppendQuotingForString()",
        "snippet": "    @Test\n    public void shouldAppendQuotingForString() {\n        String descStr = describe(new Equals(\"str\"));\n        \n        assertEquals(\"\\\"str\\\"\", descStr);\n    }",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 53)",
            "(line 43,col 9)-(line 43,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldAppendQuotingForChar()",
        "snippet": "    @Test\n    public void shouldAppendQuotingForChar() {\n        String descStr = describe(new Equals('s'));\n        \n        assertEquals(\"'s'\", descStr);\n    }",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 51)",
            "(line 50,col 9)-(line 50,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeUsingToString()",
        "snippet": "    @Test\n    public void shouldDescribeUsingToString() {\n        String descStr = describe(new Equals(100));\n        \n        assertEquals(\"100\", descStr);\n    }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 51)",
            "(line 57,col 9)-(line 57,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeNull()",
        "snippet": "    @Test\n    public void shouldDescribeNull() {\n        String descStr = describe(new Equals(null));\n        \n        assertEquals(\"null\", descStr);\n    }",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 52)",
            "(line 64,col 9)-(line 64,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldMatchTypes()",
        "snippet": "    @Test\n    public void shouldMatchTypes() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals = new Equals(10);\n        \n        //then\n        assertTrue(equals.typeMatches(10));\n        assertFalse(equals.typeMatches(10L));\n    }",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 61)",
            "(line 73,col 9)-(line 73,col 43)",
            "(line 74,col 9)-(line 74,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldMatchTypesSafelyWhenActualIsNull()",
        "snippet": "    @Test\n    public void shouldMatchTypesSafelyWhenActualIsNull() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals = new Equals(null);\n        \n        //then\n        assertFalse(equals.typeMatches(10));\n    }",
        "begin_line": 77,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 63)",
            "(line 83,col 9)-(line 83,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldMatchTypesSafelyWhenGivenIsNull()",
        "snippet": "    @Test\n    public void shouldMatchTypesSafelyWhenGivenIsNull() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals = new Equals(10);\n        \n        //then\n        assertFalse(equals.typeMatches(null));\n    }",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 61)",
            "(line 92,col 9)-(line 92,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldMatchTypesWhenActualMatcherHasCorrectType()",
        "snippet": "    @Test\n    public void shouldMatchTypesWhenActualMatcherHasCorrectType() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals10 = new Equals(10);\n        LocalizedMatcher m = new LocalizedMatcher((Matcher) equals10);\n        \n        //then\n        assertTrue(m.typeMatches(10));\n        assertFalse(m.typeMatches(10L));\n    }",
        "begin_line": 14,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 63)",
            "(line 18,col 9)-(line 18,col 70)",
            "(line 21,col 9)-(line 21,col 38)",
            "(line 22,col 9)-(line 22,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldNotMatchTypesWhenActualMatcherDoesNotHaveCorrectType()",
        "snippet": "    @Test\n    public void shouldNotMatchTypesWhenActualMatcherDoesNotHaveCorrectType() throws Exception {\n        //when\n        LocalizedMatcher m = new LocalizedMatcher(Any.ANY);\n        \n        //then\n        assertFalse(m.typeMatches(10));\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 59)",
            "(line 31,col 9)-(line 31,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldDescribeWithTypeInfoWhenActualMatcherHasCorrectType()",
        "snippet": "    @Test\n    public void shouldDescribeWithTypeInfoWhenActualMatcherHasCorrectType() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals10 = new Equals(10);\n        LocalizedMatcher m = new LocalizedMatcher((Matcher) equals10);\n        \n        //then\n        assertEquals(\"(Integer) 10\", describe(m.withExtraTypeInfo()));\n    }",
        "begin_line": 34,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 63)",
            "(line 38,col 9)-(line 38,col 70)",
            "(line 41,col 9)-(line 41,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldNotDescribeWithTypeInfoWhenActualMatcherDoesNotHaveCorrectType()",
        "snippet": "    @Test\n    public void shouldNotDescribeWithTypeInfoWhenActualMatcherDoesNotHaveCorrectType() throws Exception {\n        //when\n        LocalizedMatcher m = new LocalizedMatcher(Any.ANY);\n        \n        //then\n        assertSame(m, m.withExtraTypeInfo());\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 59)",
            "(line 50,col 9)-(line 50,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithString()",
        "snippet": "    @Test\n    public void sameToStringWithString() {\n        assertEquals(\"same(\\\"X\\\")\", describe(new Same(\"X\")));\n\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.nullToString()",
        "snippet": "    @Test\n    public void nullToString() {\n        assertEquals(\"isNull()\", describe(Null.NULL));\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.notNullToString()",
        "snippet": "    @Test\n    public void notNullToString() {\n        assertEquals(\"notNull()\", describe(NotNull.NOT_NULL));\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.anyToString()",
        "snippet": "    @Test\n    public void anyToString() {\n        assertEquals(\"<any>\", describe(Any.ANY));\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithChar()",
        "snippet": "    @Test\n    public void sameToStringWithChar() {\n        assertEquals(\"same('x')\", describe(new Same('x')));\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithObject()",
        "snippet": "    @Test\n    public void sameToStringWithObject() {\n        Object o = new Object() {\n            @Override\n            public String toString() {\n                return \"X\";\n            }\n        };\n        assertEquals(\"same(X)\", describe(new Same(o)));\n    }",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 50,col 10)",
            "(line 51,col 9)-(line 51,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.Anonymous-6fa78382-7bca-470d-8ebf-9ed2fb00536b.toString()",
        "snippet": "            @Override\n            public String toString() {\n                return \"X\";\n            }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 17)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithString()",
        "snippet": "    @Test\n    public void equalsToStringWithString() {\n        assertEquals(\"\\\"X\\\"\", describe(new Equals(\"X\")));\n\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithChar()",
        "snippet": "    @Test\n    public void equalsToStringWithChar() {\n        assertEquals(\"'x'\", describe(new Equals('x')));\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithObject()",
        "snippet": "    @Test\n    public void equalsToStringWithObject() {\n        Object o = new Object() {\n            @Override\n            public String toString() {\n                return \"X\";\n            }\n        };\n        assertEquals(\"X\", describe(new Equals(o)));\n    }",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 72,col 10)",
            "(line 73,col 9)-(line 73,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.Anonymous-dc9eddf6-8d35-42e9-945d-40300384e3a6.toString()",
        "snippet": "            @Override\n            public String toString() {\n                return \"X\";\n            }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 17)-(line 70,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.orToString()",
        "snippet": "    @Test\n    public void orToString() {\n        List<Matcher> matchers = new ArrayList<Matcher>();\n        matchers.add(new Equals(1));\n        matchers.add(new Equals(2));\n        assertEquals(\"or(1, 2)\", describe(new Or(matchers)));\n    }",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 36)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.notToString()",
        "snippet": "    @Test\n    public void notToString() {\n        assertEquals(\"not(1)\", describe(new Not(new Equals(1))));\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.andToString()",
        "snippet": "    @Test\n    public void andToString() {\n        List<Matcher> matchers = new ArrayList<Matcher>();\n        matchers.add(new Equals(1));\n        matchers.add(new Equals(2));\n        assertEquals(\"and(1, 2)\", describe(new And(matchers)));\n    }",
        "begin_line": 89,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 58)",
            "(line 92,col 9)-(line 92,col 36)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 94,col 9)-(line 94,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.startsWithToString()",
        "snippet": "    @Test\n    public void startsWithToString() {\n        assertEquals(\"startsWith(\\\"AB\\\")\", describe(new StartsWith(\"AB\")));\n    }",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.endsWithToString()",
        "snippet": "    @Test\n    public void endsWithToString() {\n        assertEquals(\"endsWith(\\\"AB\\\")\", describe(new EndsWith(\"AB\")));\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.containsToString()",
        "snippet": "    @Test\n    public void containsToString() {\n        assertEquals(\"contains(\\\"AB\\\")\", describe(new Contains(\"AB\")));\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.findToString()",
        "snippet": "    @Test\n    public void findToString() {\n        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", describe(new Find(\"\\\\s+\")));\n    }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.matchesToString()",
        "snippet": "    @Test\n    public void matchesToString() {\n        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", describe(new Matches(\"\\\\s+\")));\n    }",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testLessThan()",
        "snippet": "    @Test\n    public void testLessThan() {\n        test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testGreateThan()",
        "snippet": "    @Test\n    public void testGreateThan() {\n        test(new GreaterThan<String>(\"b\"), false, true, false, \"gt\");\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testLessOrEqual()",
        "snippet": "    @Test\n    public void testLessOrEqual() {\n        test(new LessOrEqual<String>(\"b\"), true, false, true, \"leq\");\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testGreateOrEqual()",
        "snippet": "    @Test\n    public void testGreateOrEqual() {\n        test(new GreaterOrEqual<String>(\"b\"), false, true, true, \"geq\");\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testCompareEqual()",
        "snippet": "    @Test\n    public void testCompareEqual() {\n        test(new CompareEqual<String>(\"b\"), false, false, true, \"cmpEq\");\n\n        // Make sure it works when equals provide a different result than\n        // compare\n        CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(\n                new BigDecimal(\"5.00\"));\n        assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n    }",
        "begin_line": 34,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 73)",
            "(line 40,col 9)-(line 41,col 40)",
            "(line 42,col 9)-(line 42,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.test(org.mockito.internal.matchers.CompareTo<java.lang.String>, boolean, boolean, boolean, java.lang.String)",
        "snippet": "    private void test(CompareTo<String> compareTo, boolean lower, boolean higher,\n            boolean equals, String name) {\n\n        assertEquals(lower, compareTo.matches(\"a\"));\n        assertEquals(equals, compareTo.matches(\"b\"));\n        assertEquals(higher, compareTo.matches(\"c\"));\n\n        assertEquals(name + \"(b)\", describe(compareTo));\n    }",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 52)",
            "(line 49,col 9)-(line 49,col 53)",
            "(line 50,col 9)-(line 50,col 53)",
            "(line 52,col 9)-(line 52,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetArgumentsLine()",
        "snippet": "    @Test\n    public void shouldGetArgumentsLine() {\n        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1), new Equals(2)), new PrintSettings());\n        assertEquals(\"(1, 2);\", line);\n    }",
        "begin_line": 19,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 120)",
            "(line 22,col 9)-(line 22,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetArgumentsBlock()",
        "snippet": "    @Test\n    public void shouldGetArgumentsBlock() {\n        String line = printer.getArgumentsBlock((List) Arrays.asList(new Equals(1), new Equals(2)), new PrintSettings());\n        assertEquals(\"(\\n    1,\\n    2\\n);\", line);\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 121)",
            "(line 28,col 9)-(line 28,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldDescribeTypeInfoOnlyMarkedMatchers()",
        "snippet": "    @Test\n    public void shouldDescribeTypeInfoOnlyMarkedMatchers() {\n        //when\n        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseMatchers(1));\n        //then\n        assertEquals(\"(1, (Integer) 2);\", line);\n    }",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 134)",
            "(line 36,col 9)-(line 36,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetVerboseArgumentsInBlock()",
        "snippet": "    @Test\n    public void shouldGetVerboseArgumentsInBlock() {\n        //when\n        String line = printer.getArgumentsBlock((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseMatchers(0, 1));\n        //then\n        assertEquals(\"(\\n    (Long) 1,\\n    (Integer) 2\\n);\", line);\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 138)",
            "(line 44,col 9)-(line 44,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose()",
        "snippet": "    @Test\n    public void shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose() {\n        //when\n        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), NotNull.NOT_NULL), PrintSettings.verboseMatchers(0));\n        //then\n        assertEquals(\"((Long) 1, notNull());\", line);\n    }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 137)",
            "(line 52,col 9)-(line 52,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testname()",
        "snippet": "    @Test\n    public void testname() throws Exception {\n        \n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.TestObject()",
        "snippet": "        public TestObject() {\n        }",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 44)",
            "(line 55,col 13)-(line 55,col 43)",
            "(line 56,col 13)-(line 58,col 13)",
            "(line 60,col 13)-(line 60,col 44)",
            "(line 61,col 13)-(line 61,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.hashCode()",
        "snippet": "        public int hashCode() {\n            return super.hashCode();\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 13)-(line 68,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 13)-(line 72,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 13)-(line 79,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.TestSubObject(int, int)",
        "snippet": "        public TestSubObject(int a, int b) {\n            super(a);\n            this.b = b;\n        }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 13)-(line 82,col 21)",
            "(line 83,col 13)-(line 83,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 85,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 86,col 13)-(line 86,col 44)",
            "(line 87,col 13)-(line 87,col 43)",
            "(line 88,col 13)-(line 90,col 13)",
            "(line 92,col 13)-(line 92,col 50)",
            "(line 93,col 13)-(line 93,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 13)-(line 96,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.setB(int)",
        "snippet": "        public void setB(int b) {\n            this.b = b;\n        }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 13)-(line 100,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.getB()",
        "snippet": "        public int getB() {\n            return b;\n        }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 13)-(line 104,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestEmptySubObject.TestEmptySubObject(int)",
        "snippet": "        public TestEmptySubObject(int a) {\n            super(a);\n        }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 13)-(line 110,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject.TestTSubObject(int, int)",
        "snippet": "        public TestTSubObject(int a, int t) {\n            super(a);\n            this.t = t;\n        }",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 118,col 13)-(line 118,col 21)",
            "(line 119,col 13)-(line 119,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTTSubObject.TestTTSubObject(int, int, int)",
        "snippet": "        public TestTTSubObject(int a, int t, int tt) {\n            super(a, t);\n            this.tt = tt;\n        }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 127,col 13)-(line 127,col 24)",
            "(line 128,col 13)-(line 128,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTTLeafObject.TestTTLeafObject(int, int, int, int)",
        "snippet": "        public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n            super(a, t, tt);\n            this.leafValue = leafValue;\n        }",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 13)-(line 136,col 28)",
            "(line 137,col 13)-(line 137,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject2.TestTSubObject2(int, int)",
        "snippet": "        public TestTSubObject2(int a, int t) {\n            super(a);\n        }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 13)-(line 144,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject2.getT()",
        "snippet": "        public int getT() {\n            return t;\n        }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 13)-(line 147,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject2.setT(int)",
        "snippet": "        public void setT(int t) {\n            this.t = t;\n        }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 13)-(line 150,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEquals()",
        "snippet": "    @Test public void testReflectionEquals() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));\n        o2.setA(4);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n    }",
        "begin_line": 154,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 42)",
            "(line 156,col 9)-(line 156,col 42)",
            "(line 157,col 9)-(line 157,col 59)",
            "(line 158,col 9)-(line 158,col 60)",
            "(line 159,col 9)-(line 159,col 19)",
            "(line 160,col 9)-(line 160,col 59)",
            "(line 162,col 9)-(line 162,col 62)",
            "(line 164,col 9)-(line 164,col 62)",
            "(line 165,col 9)-(line 165,col 62)",
            "(line 166,col 9)-(line 166,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionHierarchyEquals()",
        "snippet": "    @Test public void testReflectionHierarchyEquals() {\n        testReflectionHierarchyEquals(false);\n        testReflectionHierarchyEquals(true);\n        // Transients\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n    }",
        "begin_line": 169,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 45)",
            "(line 171,col 9)-(line 171,col 44)",
            "(line 173,col 9)-(line 173,col 125)",
            "(line 174,col 9)-(line 174,col 126)",
            "(line 175,col 9)-(line 175,col 126)",
            "(line 176,col 9)-(line 176,col 126)",
            "(line 177,col 9)-(line 177,col 126)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionHierarchyEquals(boolean)",
        "snippet": "  private void testReflectionHierarchyEquals(boolean testTransients) {\n        TestObject to1 = new TestObject(4);\n        TestObject to1Bis = new TestObject(4);\n        TestObject to1Ter = new TestObject(4);\n        TestObject to2 = new TestObject(5);\n        TestEmptySubObject teso = new TestEmptySubObject(4);\n        TestTSubObject ttso = new TestTSubObject(4, 1);\n        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);\n        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);\n        TestSubObject tso1 = new TestSubObject(1, 4);\n        TestSubObject tso1bis = new TestSubObject(1, 4);\n        TestSubObject tso1ter = new TestSubObject(1, 4);\n        TestSubObject tso2 = new TestSubObject(2, 5);\n\n        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);\n        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);\n\n        // More sanity checks:\n\n        // same values\n        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));\n        // same super values, diff sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));\n        // diff super values, same sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));\n\n        // mix super and sub types: equals\n        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert\n\n        // mix super and sub types: NOT equals\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));\n        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));\n    }",
        "begin_line": 180,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 43)",
            "(line 182,col 9)-(line 182,col 46)",
            "(line 183,col 9)-(line 183,col 46)",
            "(line 184,col 9)-(line 184,col 43)",
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 186,col 55)",
            "(line 187,col 9)-(line 187,col 61)",
            "(line 188,col 9)-(line 188,col 65)",
            "(line 189,col 9)-(line 189,col 53)",
            "(line 190,col 9)-(line 190,col 56)",
            "(line 191,col 9)-(line 191,col 56)",
            "(line 192,col 9)-(line 192,col 53)",
            "(line 194,col 9)-(line 194,col 112)",
            "(line 195,col 9)-(line 195,col 119)",
            "(line 200,col 9)-(line 200,col 79)",
            "(line 201,col 9)-(line 201,col 119)",
            "(line 203,col 9)-(line 203,col 120)",
            "(line 204,col 9)-(line 204,col 120)",
            "(line 206,col 9)-(line 206,col 120)",
            "(line 207,col 9)-(line 207,col 120)",
            "(line 210,col 9)-(line 210,col 78)",
            "(line 211,col 9)-(line 211,col 78)",
            "(line 213,col 9)-(line 213,col 69)",
            "(line 214,col 9)-(line 214,col 69)",
            "(line 216,col 9)-(line 216,col 70)",
            "(line 217,col 9)-(line 217,col 70)",
            "(line 219,col 9)-(line 219,col 71)",
            "(line 220,col 9)-(line 220,col 71)",
            "(line 223,col 9)-(line 223,col 114)",
            "(line 224,col 9)-(line 224,col 114)",
            "(line 226,col 9)-(line 226,col 113)",
            "(line 227,col 9)-(line 227,col 113)",
            "(line 229,col 9)-(line 229,col 113)",
            "(line 230,col 9)-(line 230,col 113)",
            "(line 232,col 9)-(line 232,col 63)",
            "(line 233,col 9)-(line 233,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship(org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, boolean)",
        "snippet": "    private void testReflectionEqualsEquivalenceRelationship(\n        TestObject to,\n        TestObject toBis,\n        TestObject toTer,\n        TestObject to2,\n        TestObject oToChange,\n        boolean testTransients) {\n\n        // reflection test\n        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));\n\n        // symmetry test\n        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));\n\n        // transitive test\n        assertTrue(\n            EqualsBuilder.reflectionEquals(to, toBis, testTransients)\n                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)\n                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));\n\n        // consistency test\n        oToChange.setA(to.getA());\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());\n        }\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        oToChange.setA(to.getA() + 1);\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);\n        }\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n\n        // non-null reference test\n        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));\n    }",
        "begin_line": 251,
        "end_line": 292,
        "comment": "\n     * Equivalence relationship tests inspired by \"Effective Java\":\n     * <ul>\n     * <li>reflection</li>\n     * <li>symmetry</li>\n     * <li>transitive</li>\n     * <li>consistency</li>\n     * <li>non-null reference</li>\n     * </ul>\n     * @param to a TestObject\n     * @param toBis a TestObject, equal to to and toTer\n     * @param toTer Left hand side, equal to to and toBis\n     * @param to2 a different TestObject\n     * @param oToChange a TestObject that will be changed\n     ",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 75)",
            "(line 261,col 9)-(line 261,col 77)",
            "(line 264,col 9)-(line 264,col 139)",
            "(line 267,col 9)-(line 270,col 78)",
            "(line 273,col 9)-(line 273,col 34)",
            "(line 274,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 277,col 82)",
            "(line 278,col 9)-(line 278,col 82)",
            "(line 279,col 9)-(line 279,col 38)",
            "(line 280,col 9)-(line 282,col 9)",
            "(line 283,col 9)-(line 283,col 83)",
            "(line 284,col 9)-(line 284,col 83)",
            "(line 287,col 9)-(line 287,col 78)",
            "(line 288,col 9)-(line 288,col 79)",
            "(line 289,col 9)-(line 289,col 78)",
            "(line 290,col 9)-(line 290,col 79)",
            "(line 291,col 9)-(line 291,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testSuper()",
        "snippet": "    @Test public void testSuper() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n    }",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 42)",
            "(line 296,col 9)-(line 296,col 42)",
            "(line 297,col 9)-(line 297,col 92)",
            "(line 298,col 9)-(line 298,col 94)",
            "(line 299,col 9)-(line 299,col 93)",
            "(line 300,col 9)-(line 300,col 94)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObject()",
        "snippet": "    @Test public void testObject() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        o2.setA(4);\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n\n        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());\n        \n        assertTrue(!new EqualsBuilder().append(o1, null).isEquals());\n        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n    }",
        "begin_line": 303,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 42)",
            "(line 305,col 9)-(line 305,col 42)",
            "(line 306,col 9)-(line 306,col 66)",
            "(line 307,col 9)-(line 307,col 67)",
            "(line 308,col 9)-(line 308,col 19)",
            "(line 309,col 9)-(line 309,col 66)",
            "(line 311,col 9)-(line 311,col 69)",
            "(line 313,col 9)-(line 313,col 69)",
            "(line 314,col 9)-(line 314,col 69)",
            "(line 315,col 9)-(line 315,col 88)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLong()",
        "snippet": "    @Test public void testLong() {\n        long o1 = 1L;\n        long o2 = 2L;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 318,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 21)",
            "(line 320,col 9)-(line 320,col 21)",
            "(line 321,col 9)-(line 321,col 66)",
            "(line 322,col 9)-(line 322,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testInt()",
        "snippet": "    @Test public void testInt() {\n        int o1 = 1;\n        int o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 19)",
            "(line 327,col 9)-(line 327,col 19)",
            "(line 328,col 9)-(line 328,col 66)",
            "(line 329,col 9)-(line 329,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShort()",
        "snippet": "    @Test public void testShort() {\n        short o1 = 1;\n        short o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 21)",
            "(line 334,col 9)-(line 334,col 21)",
            "(line 335,col 9)-(line 335,col 66)",
            "(line 336,col 9)-(line 336,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testChar()",
        "snippet": "    @Test public void testChar() {\n        char o1 = 1;\n        char o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 339,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 20)",
            "(line 341,col 9)-(line 341,col 20)",
            "(line 342,col 9)-(line 342,col 66)",
            "(line 343,col 9)-(line 343,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByte()",
        "snippet": "    @Test public void testByte() {\n        byte o1 = 1;\n        byte o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 346,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 20)",
            "(line 348,col 9)-(line 348,col 20)",
            "(line 349,col 9)-(line 349,col 66)",
            "(line 350,col 9)-(line 350,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDouble()",
        "snippet": "    @Test public void testDouble() {\n        double o1 = 1;\n        double o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 353,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 22)",
            "(line 355,col 9)-(line 355,col 22)",
            "(line 356,col 9)-(line 356,col 66)",
            "(line 357,col 9)-(line 357,col 67)",
            "(line 358,col 9)-(line 358,col 75)",
            "(line 359,col 9)-(line 359,col 82)",
            "(line 360,col 9)-(line 360,col 110)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloat()",
        "snippet": "    @Test public void testFloat() {\n        float o1 = 1;\n        float o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 363,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 21)",
            "(line 365,col 9)-(line 365,col 21)",
            "(line 366,col 9)-(line 366,col 66)",
            "(line 367,col 9)-(line 367,col 67)",
            "(line 368,col 9)-(line 368,col 74)",
            "(line 369,col 9)-(line 369,col 80)",
            "(line 370,col 9)-(line 370,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBigDecimal()",
        "snippet": "    @Test public void testBigDecimal() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 374,
        "end_line": 379,
        "comment": " https://issues.apache.org/jira/browse/LANG-393",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 46)",
            "(line 376,col 9)-(line 376,col 47)",
            "(line 377,col 9)-(line 377,col 66)",
            "(line 378,col 9)-(line 378,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testAccessors()",
        "snippet": "    @Test public void testAccessors() {\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(true);\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(false);\n        assertFalse(equalsBuilder.isEquals());\n    }",
        "begin_line": 381,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 58)",
            "(line 383,col 9)-(line 383,col 45)",
            "(line 384,col 9)-(line 384,col 38)",
            "(line 385,col 9)-(line 385,col 45)",
            "(line 386,col 9)-(line 386,col 39)",
            "(line 387,col 9)-(line 387,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBoolean()",
        "snippet": "    @Test public void testBoolean() {\n        boolean o1 = true;\n        boolean o2 = false;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 390,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 26)",
            "(line 392,col 9)-(line 392,col 27)",
            "(line 393,col 9)-(line 393,col 66)",
            "(line 394,col 9)-(line 394,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObjectArray()",
        "snippet": "    @Test public void testObjectArray() {\n        TestObject[] obj1 = new TestObject[3];\n        obj1[0] = new TestObject(4);\n        obj1[1] = new TestObject(5);\n        obj1[2] = null;\n        TestObject[] obj2 = new TestObject[3];\n        obj2[0] = new TestObject(4);\n        obj2[1] = new TestObject(5);\n        obj2[2] = null;\n        \n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(5);\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = obj1[1];\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n                       \n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 397,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 46)",
            "(line 399,col 9)-(line 399,col 36)",
            "(line 400,col 9)-(line 400,col 36)",
            "(line 401,col 9)-(line 401,col 23)",
            "(line 402,col 9)-(line 402,col 46)",
            "(line 403,col 9)-(line 403,col 36)",
            "(line 404,col 9)-(line 404,col 36)",
            "(line 405,col 9)-(line 405,col 23)",
            "(line 407,col 9)-(line 407,col 70)",
            "(line 408,col 9)-(line 408,col 70)",
            "(line 409,col 9)-(line 409,col 70)",
            "(line 410,col 9)-(line 410,col 24)",
            "(line 411,col 9)-(line 411,col 71)",
            "(line 412,col 9)-(line 412,col 24)",
            "(line 413,col 9)-(line 413,col 70)",
            "(line 414,col 9)-(line 414,col 26)",
            "(line 415,col 9)-(line 415,col 71)",
            "(line 416,col 9)-(line 416,col 23)",
            "(line 417,col 9)-(line 417,col 70)",
            "(line 419,col 9)-(line 419,col 20)",
            "(line 420,col 9)-(line 420,col 71)",
            "(line 421,col 9)-(line 421,col 20)",
            "(line 422,col 9)-(line 422,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLongArray()",
        "snippet": "    @Test public void testLongArray() {\n        long[] obj1 = new long[2];\n        obj1[0] = 5L;\n        obj1[1] = 6L;\n        long[] obj2 = new long[2];\n        obj2[0] = 5L;\n        obj2[1] = 6L;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 425,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 34)",
            "(line 427,col 9)-(line 427,col 21)",
            "(line 428,col 9)-(line 428,col 21)",
            "(line 429,col 9)-(line 429,col 34)",
            "(line 430,col 9)-(line 430,col 21)",
            "(line 431,col 9)-(line 431,col 21)",
            "(line 432,col 9)-(line 432,col 70)",
            "(line 433,col 9)-(line 433,col 70)",
            "(line 434,col 9)-(line 434,col 20)",
            "(line 435,col 9)-(line 435,col 71)",
            "(line 437,col 9)-(line 437,col 20)",
            "(line 438,col 9)-(line 438,col 71)",
            "(line 439,col 9)-(line 439,col 20)",
            "(line 440,col 9)-(line 440,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testIntArray()",
        "snippet": "    @Test public void testIntArray() {\n        int[] obj1 = new int[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        int[] obj2 = new int[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 443,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 32)",
            "(line 445,col 9)-(line 445,col 20)",
            "(line 446,col 9)-(line 446,col 20)",
            "(line 447,col 9)-(line 447,col 32)",
            "(line 448,col 9)-(line 448,col 20)",
            "(line 449,col 9)-(line 449,col 20)",
            "(line 450,col 9)-(line 450,col 70)",
            "(line 451,col 9)-(line 451,col 70)",
            "(line 452,col 9)-(line 452,col 20)",
            "(line 453,col 9)-(line 453,col 71)",
            "(line 455,col 9)-(line 455,col 20)",
            "(line 456,col 9)-(line 456,col 71)",
            "(line 457,col 9)-(line 457,col 20)",
            "(line 458,col 9)-(line 458,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShortArray()",
        "snippet": "    @Test public void testShortArray() {\n        short[] obj1 = new short[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        short[] obj2 = new short[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 461,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 36)",
            "(line 463,col 9)-(line 463,col 20)",
            "(line 464,col 9)-(line 464,col 20)",
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 20)",
            "(line 467,col 9)-(line 467,col 20)",
            "(line 468,col 9)-(line 468,col 70)",
            "(line 469,col 9)-(line 469,col 70)",
            "(line 470,col 9)-(line 470,col 20)",
            "(line 471,col 9)-(line 471,col 71)",
            "(line 473,col 9)-(line 473,col 20)",
            "(line 474,col 9)-(line 474,col 71)",
            "(line 475,col 9)-(line 475,col 20)",
            "(line 476,col 9)-(line 476,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testCharArray()",
        "snippet": "    @Test public void testCharArray() {\n        char[] obj1 = new char[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        char[] obj2 = new char[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 479,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 34)",
            "(line 481,col 9)-(line 481,col 20)",
            "(line 482,col 9)-(line 482,col 20)",
            "(line 483,col 9)-(line 483,col 34)",
            "(line 484,col 9)-(line 484,col 20)",
            "(line 485,col 9)-(line 485,col 20)",
            "(line 486,col 9)-(line 486,col 70)",
            "(line 487,col 9)-(line 487,col 70)",
            "(line 488,col 9)-(line 488,col 20)",
            "(line 489,col 9)-(line 489,col 71)",
            "(line 491,col 9)-(line 491,col 20)",
            "(line 492,col 9)-(line 492,col 71)",
            "(line 493,col 9)-(line 493,col 20)",
            "(line 494,col 9)-(line 494,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByteArray()",
        "snippet": "    @Test public void testByteArray() {\n        byte[] obj1 = new byte[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        byte[] obj2 = new byte[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 497,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 34)",
            "(line 499,col 9)-(line 499,col 20)",
            "(line 500,col 9)-(line 500,col 20)",
            "(line 501,col 9)-(line 501,col 34)",
            "(line 502,col 9)-(line 502,col 20)",
            "(line 503,col 9)-(line 503,col 20)",
            "(line 504,col 9)-(line 504,col 70)",
            "(line 505,col 9)-(line 505,col 70)",
            "(line 506,col 9)-(line 506,col 20)",
            "(line 507,col 9)-(line 507,col 71)",
            "(line 509,col 9)-(line 509,col 20)",
            "(line 510,col 9)-(line 510,col 71)",
            "(line 511,col 9)-(line 511,col 20)",
            "(line 512,col 9)-(line 512,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDoubleArray()",
        "snippet": "    @Test public void testDoubleArray() {\n        double[] obj1 = new double[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        double[] obj2 = new double[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 515,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 516,col 9)-(line 516,col 38)",
            "(line 517,col 9)-(line 517,col 20)",
            "(line 518,col 9)-(line 518,col 20)",
            "(line 519,col 9)-(line 519,col 38)",
            "(line 520,col 9)-(line 520,col 20)",
            "(line 521,col 9)-(line 521,col 20)",
            "(line 522,col 9)-(line 522,col 70)",
            "(line 523,col 9)-(line 523,col 70)",
            "(line 524,col 9)-(line 524,col 20)",
            "(line 525,col 9)-(line 525,col 71)",
            "(line 527,col 9)-(line 527,col 20)",
            "(line 528,col 9)-(line 528,col 71)",
            "(line 529,col 9)-(line 529,col 20)",
            "(line 530,col 9)-(line 530,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloatArray()",
        "snippet": "    @Test public void testFloatArray() {\n        float[] obj1 = new float[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        float[] obj2 = new float[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 533,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 36)",
            "(line 535,col 9)-(line 535,col 20)",
            "(line 536,col 9)-(line 536,col 20)",
            "(line 537,col 9)-(line 537,col 36)",
            "(line 538,col 9)-(line 538,col 20)",
            "(line 539,col 9)-(line 539,col 20)",
            "(line 540,col 9)-(line 540,col 70)",
            "(line 541,col 9)-(line 541,col 70)",
            "(line 542,col 9)-(line 542,col 20)",
            "(line 543,col 9)-(line 543,col 71)",
            "(line 545,col 9)-(line 545,col 20)",
            "(line 546,col 9)-(line 546,col 71)",
            "(line 547,col 9)-(line 547,col 20)",
            "(line 548,col 9)-(line 548,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBooleanArray()",
        "snippet": "    @Test public void testBooleanArray() {\n        boolean[] obj1 = new boolean[2];\n        obj1[0] = true;\n        obj1[1] = false;\n        boolean[] obj2 = new boolean[2];\n        obj2[0] = true;\n        obj2[1] = false;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 551,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 40)",
            "(line 553,col 9)-(line 553,col 23)",
            "(line 554,col 9)-(line 554,col 24)",
            "(line 555,col 9)-(line 555,col 40)",
            "(line 556,col 9)-(line 556,col 23)",
            "(line 557,col 9)-(line 557,col 24)",
            "(line 558,col 9)-(line 558,col 70)",
            "(line 559,col 9)-(line 559,col 70)",
            "(line 560,col 9)-(line 560,col 23)",
            "(line 561,col 9)-(line 561,col 71)",
            "(line 563,col 9)-(line 563,col 20)",
            "(line 564,col 9)-(line 564,col 71)",
            "(line 565,col 9)-(line 565,col 20)",
            "(line 566,col 9)-(line 566,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiLongArray()",
        "snippet": "    @Test public void testMultiLongArray() {\n        long[][] array1 = new long[2][2];\n        long[][] array2 = new long[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 569,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 570,col 41)",
            "(line 571,col 9)-(line 571,col 41)",
            "(line 572,col 9)-(line 577,col 9)",
            "(line 578,col 9)-(line 578,col 74)",
            "(line 579,col 9)-(line 579,col 74)",
            "(line 580,col 9)-(line 580,col 25)",
            "(line 581,col 9)-(line 581,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiIntArray()",
        "snippet": "    @Test public void testMultiIntArray() {\n        int[][] array1 = new int[2][2];\n        int[][] array2 = new int[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 584,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 39)",
            "(line 586,col 9)-(line 586,col 39)",
            "(line 587,col 9)-(line 592,col 9)",
            "(line 593,col 9)-(line 593,col 74)",
            "(line 594,col 9)-(line 594,col 74)",
            "(line 595,col 9)-(line 595,col 25)",
            "(line 596,col 9)-(line 596,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiShortArray()",
        "snippet": "    @Test public void testMultiShortArray() {\n        short[][] array1 = new short[2][2];\n        short[][] array2 = new short[2][2];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 599,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 600,col 9)-(line 600,col 43)",
            "(line 601,col 9)-(line 601,col 43)",
            "(line 602,col 9)-(line 607,col 9)",
            "(line 608,col 9)-(line 608,col 74)",
            "(line 609,col 9)-(line 609,col 74)",
            "(line 610,col 9)-(line 610,col 25)",
            "(line 611,col 9)-(line 611,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiCharArray()",
        "snippet": "    @Test public void testMultiCharArray() {\n        char[][] array1 = new char[2][2];\n        char[][] array2 = new char[2][2];\n        for (char i = 0; i < array1.length; ++i) {\n            for (char j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 614,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 615,col 9)-(line 615,col 41)",
            "(line 616,col 9)-(line 616,col 41)",
            "(line 617,col 9)-(line 622,col 9)",
            "(line 623,col 9)-(line 623,col 74)",
            "(line 624,col 9)-(line 624,col 74)",
            "(line 625,col 9)-(line 625,col 25)",
            "(line 626,col 9)-(line 626,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiByteArray()",
        "snippet": "    @Test public void testMultiByteArray() {\n        byte[][] array1 = new byte[2][2];\n        byte[][] array2 = new byte[2][2];\n        for (byte i = 0; i < array1.length; ++i) {\n            for (byte j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 629,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 630,col 9)-(line 630,col 41)",
            "(line 631,col 9)-(line 631,col 41)",
            "(line 632,col 9)-(line 637,col 9)",
            "(line 638,col 9)-(line 638,col 74)",
            "(line 639,col 9)-(line 639,col 74)",
            "(line 640,col 9)-(line 640,col 25)",
            "(line 641,col 9)-(line 641,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiFloatArray()",
        "snippet": "    @Test public void testMultiFloatArray() {\n        float[][] array1 = new float[2][2];\n        float[][] array2 = new float[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 643,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 644,col 9)-(line 644,col 43)",
            "(line 645,col 9)-(line 645,col 43)",
            "(line 646,col 9)-(line 651,col 9)",
            "(line 652,col 9)-(line 652,col 74)",
            "(line 653,col 9)-(line 653,col 74)",
            "(line 654,col 9)-(line 654,col 25)",
            "(line 655,col 9)-(line 655,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiDoubleArray()",
        "snippet": "    @Test public void testMultiDoubleArray() {\n        double[][] array1 = new double[2][2];\n        double[][] array2 = new double[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 658,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 659,col 9)-(line 659,col 45)",
            "(line 660,col 9)-(line 660,col 45)",
            "(line 661,col 9)-(line 666,col 9)",
            "(line 667,col 9)-(line 667,col 74)",
            "(line 668,col 9)-(line 668,col 74)",
            "(line 669,col 9)-(line 669,col 25)",
            "(line 670,col 9)-(line 670,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiBooleanArray()",
        "snippet": "    @Test public void testMultiBooleanArray() {\n        boolean[][] array1 = new boolean[2][2];\n        boolean[][] array2 = new boolean[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i == 1) || (j == 1);\n                array2[i][j] = (i == 1) || (j == 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = false;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n        \n        // compare 1 dim to 2.\n        boolean[] array3 = new boolean[]{true, true};\n        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\n        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n    }",
        "begin_line": 673,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 674,col 9)-(line 674,col 47)",
            "(line 675,col 9)-(line 675,col 47)",
            "(line 676,col 9)-(line 681,col 9)",
            "(line 682,col 9)-(line 682,col 74)",
            "(line 683,col 9)-(line 683,col 74)",
            "(line 684,col 9)-(line 684,col 29)",
            "(line 685,col 9)-(line 685,col 75)",
            "(line 688,col 9)-(line 688,col 53)",
            "(line 689,col 9)-(line 689,col 75)",
            "(line 690,col 9)-(line 690,col 75)",
            "(line 691,col 9)-(line 691,col 75)",
            "(line 692,col 9)-(line 692,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testRaggedArray()",
        "snippet": "    @Test public void testRaggedArray() {\n        long[][] array1 = new long[2][];\n        long[][] array2 = new long[2][];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < array1[i].length; ++j) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 695,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 40)",
            "(line 697,col 9)-(line 697,col 40)",
            "(line 698,col 9)-(line 705,col 9)",
            "(line 706,col 9)-(line 706,col 74)",
            "(line 707,col 9)-(line 707,col 74)",
            "(line 708,col 9)-(line 708,col 25)",
            "(line 709,col 9)-(line 709,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMixedArray()",
        "snippet": "    @Test public void testMixedArray() {\n        Object[] array1 = new Object[2];\n        Object[] array2 = new Object[2];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < 2; ++j) {\n                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        ((long[]) array1[1])[1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 712,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 40)",
            "(line 714,col 9)-(line 714,col 40)",
            "(line 715,col 9)-(line 722,col 9)",
            "(line 723,col 9)-(line 723,col 74)",
            "(line 724,col 9)-(line 724,col 74)",
            "(line 725,col 9)-(line 725,col 36)",
            "(line 726,col 9)-(line 726,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObjectArrayHiddenByObject()",
        "snippet": "    @Test public void testObjectArrayHiddenByObject() {\n        TestObject[] array1 = new TestObject[2];\n        array1[0] = new TestObject(4);\n        array1[1] = new TestObject(5);\n        TestObject[] array2 = new TestObject[2];\n        array2[0] = new TestObject(4);\n        array2[1] = new TestObject(5);\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 729,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 730,col 9)-(line 730,col 48)",
            "(line 731,col 9)-(line 731,col 38)",
            "(line 732,col 9)-(line 732,col 38)",
            "(line 733,col 9)-(line 733,col 48)",
            "(line 734,col 9)-(line 734,col 38)",
            "(line 735,col 9)-(line 735,col 38)",
            "(line 736,col 9)-(line 736,col 29)",
            "(line 737,col 9)-(line 737,col 29)",
            "(line 738,col 9)-(line 738,col 70)",
            "(line 739,col 9)-(line 739,col 72)",
            "(line 740,col 9)-(line 740,col 70)",
            "(line 741,col 9)-(line 741,col 72)",
            "(line 742,col 9)-(line 742,col 26)",
            "(line 743,col 9)-(line 743,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLongArrayHiddenByObject()",
        "snippet": "    @Test public void testLongArrayHiddenByObject() {\n        long[] array1 = new long[2];\n        array1[0] = 5L;\n        array1[1] = 6L;\n        long[] array2 = new long[2];\n        array2[0] = 5L;\n        array2[1] = 6L;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 746,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 36)",
            "(line 748,col 9)-(line 748,col 23)",
            "(line 749,col 9)-(line 749,col 23)",
            "(line 750,col 9)-(line 750,col 36)",
            "(line 751,col 9)-(line 751,col 23)",
            "(line 752,col 9)-(line 752,col 23)",
            "(line 753,col 9)-(line 753,col 29)",
            "(line 754,col 9)-(line 754,col 29)",
            "(line 755,col 9)-(line 755,col 70)",
            "(line 756,col 9)-(line 756,col 72)",
            "(line 757,col 9)-(line 757,col 70)",
            "(line 758,col 9)-(line 758,col 72)",
            "(line 759,col 9)-(line 759,col 22)",
            "(line 760,col 9)-(line 760,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testIntArrayHiddenByObject()",
        "snippet": "    @Test public void testIntArrayHiddenByObject() {\n        int[] array1 = new int[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        int[] array2 = new int[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 763,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 764,col 9)-(line 764,col 34)",
            "(line 765,col 9)-(line 765,col 22)",
            "(line 766,col 9)-(line 766,col 22)",
            "(line 767,col 9)-(line 767,col 34)",
            "(line 768,col 9)-(line 768,col 22)",
            "(line 769,col 9)-(line 769,col 22)",
            "(line 770,col 9)-(line 770,col 29)",
            "(line 771,col 9)-(line 771,col 29)",
            "(line 772,col 9)-(line 772,col 70)",
            "(line 773,col 9)-(line 773,col 72)",
            "(line 774,col 9)-(line 774,col 70)",
            "(line 775,col 9)-(line 775,col 72)",
            "(line 776,col 9)-(line 776,col 22)",
            "(line 777,col 9)-(line 777,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShortArrayHiddenByObject()",
        "snippet": "    @Test public void testShortArrayHiddenByObject() {\n        short[] array1 = new short[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        short[] array2 = new short[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 780,
        "end_line": 795,
        "comment": "",
        "child_ranges": [
            "(line 781,col 9)-(line 781,col 38)",
            "(line 782,col 9)-(line 782,col 22)",
            "(line 783,col 9)-(line 783,col 22)",
            "(line 784,col 9)-(line 784,col 38)",
            "(line 785,col 9)-(line 785,col 22)",
            "(line 786,col 9)-(line 786,col 22)",
            "(line 787,col 9)-(line 787,col 29)",
            "(line 788,col 9)-(line 788,col 29)",
            "(line 789,col 9)-(line 789,col 70)",
            "(line 790,col 9)-(line 790,col 72)",
            "(line 791,col 9)-(line 791,col 70)",
            "(line 792,col 9)-(line 792,col 72)",
            "(line 793,col 9)-(line 793,col 22)",
            "(line 794,col 9)-(line 794,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testCharArrayHiddenByObject()",
        "snippet": "    @Test public void testCharArrayHiddenByObject() {\n        char[] array1 = new char[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        char[] array2 = new char[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 797,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 798,col 9)-(line 798,col 36)",
            "(line 799,col 9)-(line 799,col 22)",
            "(line 800,col 9)-(line 800,col 22)",
            "(line 801,col 9)-(line 801,col 36)",
            "(line 802,col 9)-(line 802,col 22)",
            "(line 803,col 9)-(line 803,col 22)",
            "(line 804,col 9)-(line 804,col 29)",
            "(line 805,col 9)-(line 805,col 29)",
            "(line 806,col 9)-(line 806,col 70)",
            "(line 807,col 9)-(line 807,col 72)",
            "(line 808,col 9)-(line 808,col 70)",
            "(line 809,col 9)-(line 809,col 72)",
            "(line 810,col 9)-(line 810,col 22)",
            "(line 811,col 9)-(line 811,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByteArrayHiddenByObject()",
        "snippet": "    @Test public void testByteArrayHiddenByObject() {\n        byte[] array1 = new byte[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        byte[] array2 = new byte[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 814,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 815,col 9)-(line 815,col 36)",
            "(line 816,col 9)-(line 816,col 22)",
            "(line 817,col 9)-(line 817,col 22)",
            "(line 818,col 9)-(line 818,col 36)",
            "(line 819,col 9)-(line 819,col 22)",
            "(line 820,col 9)-(line 820,col 22)",
            "(line 821,col 9)-(line 821,col 29)",
            "(line 822,col 9)-(line 822,col 29)",
            "(line 823,col 9)-(line 823,col 70)",
            "(line 824,col 9)-(line 824,col 72)",
            "(line 825,col 9)-(line 825,col 70)",
            "(line 826,col 9)-(line 826,col 72)",
            "(line 827,col 9)-(line 827,col 22)",
            "(line 828,col 9)-(line 828,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDoubleArrayHiddenByObject()",
        "snippet": "    @Test public void testDoubleArrayHiddenByObject() {\n        double[] array1 = new double[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        double[] array2 = new double[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 831,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 832,col 9)-(line 832,col 40)",
            "(line 833,col 9)-(line 833,col 22)",
            "(line 834,col 9)-(line 834,col 22)",
            "(line 835,col 9)-(line 835,col 40)",
            "(line 836,col 9)-(line 836,col 22)",
            "(line 837,col 9)-(line 837,col 22)",
            "(line 838,col 9)-(line 838,col 29)",
            "(line 839,col 9)-(line 839,col 29)",
            "(line 840,col 9)-(line 840,col 70)",
            "(line 841,col 9)-(line 841,col 72)",
            "(line 842,col 9)-(line 842,col 70)",
            "(line 843,col 9)-(line 843,col 72)",
            "(line 844,col 9)-(line 844,col 22)",
            "(line 845,col 9)-(line 845,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloatArrayHiddenByObject()",
        "snippet": "    @Test public void testFloatArrayHiddenByObject() {\n        float[] array1 = new float[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        float[] array2 = new float[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 848,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 38)",
            "(line 850,col 9)-(line 850,col 22)",
            "(line 851,col 9)-(line 851,col 22)",
            "(line 852,col 9)-(line 852,col 38)",
            "(line 853,col 9)-(line 853,col 22)",
            "(line 854,col 9)-(line 854,col 22)",
            "(line 855,col 9)-(line 855,col 29)",
            "(line 856,col 9)-(line 856,col 29)",
            "(line 857,col 9)-(line 857,col 70)",
            "(line 858,col 9)-(line 858,col 72)",
            "(line 859,col 9)-(line 859,col 70)",
            "(line 860,col 9)-(line 860,col 72)",
            "(line 861,col 9)-(line 861,col 22)",
            "(line 862,col 9)-(line 862,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBooleanArrayHiddenByObject()",
        "snippet": "    @Test public void testBooleanArrayHiddenByObject() {\n        boolean[] array1 = new boolean[2];\n        array1[0] = true;\n        array1[1] = false;\n        boolean[] array2 = new boolean[2];\n        array2[0] = true;\n        array2[1] = false;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 865,
        "end_line": 880,
        "comment": "",
        "child_ranges": [
            "(line 866,col 9)-(line 866,col 42)",
            "(line 867,col 9)-(line 867,col 25)",
            "(line 868,col 9)-(line 868,col 26)",
            "(line 869,col 9)-(line 869,col 42)",
            "(line 870,col 9)-(line 870,col 25)",
            "(line 871,col 9)-(line 871,col 26)",
            "(line 872,col 9)-(line 872,col 29)",
            "(line 873,col 9)-(line 873,col 29)",
            "(line 874,col 9)-(line 874,col 70)",
            "(line 875,col 9)-(line 875,col 72)",
            "(line 876,col 9)-(line 876,col 70)",
            "(line 877,col 9)-(line 877,col 72)",
            "(line 878,col 9)-(line 878,col 25)",
            "(line 879,col 9)-(line 879,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.TestACanEqualB(int)",
        "snippet": "        public TestACanEqualB(int a) {\n            this.a = a;\n        }",
        "begin_line": 885,
        "end_line": 887,
        "comment": "",
        "child_ranges": [
            "(line 886,col 13)-(line 886,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o instanceof TestACanEqualB) {\n                return this.a == ((TestACanEqualB) o).getA();\n            }\n            if (o instanceof TestBCanEqualA) {\n                return this.a == ((TestBCanEqualA) o).getB();\n            }\n            return false;\n        }",
        "begin_line": 889,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 890,col 13)-(line 892,col 13)",
            "(line 893,col 13)-(line 895,col 13)",
            "(line 896,col 13)-(line 898,col 13)",
            "(line 899,col 13)-(line 899,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }",
        "begin_line": 901,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 902,col 13)-(line 902,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.getA()",
        "snippet": "        public int getA() {\n            return this.a;\n        }",
        "begin_line": 905,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 906,col 13)-(line 906,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.TestBCanEqualA(int)",
        "snippet": "        public TestBCanEqualA(int b) {\n            this.b = b;\n        }",
        "begin_line": 913,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 914,col 13)-(line 914,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o instanceof TestACanEqualB) {\n                return this.b == ((TestACanEqualB) o).getA();\n            }\n            if (o instanceof TestBCanEqualA) {\n                return this.b == ((TestBCanEqualA) o).getB();\n            }\n            return false;\n        }",
        "begin_line": 917,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 918,col 13)-(line 920,col 13)",
            "(line 921,col 13)-(line 923,col 13)",
            "(line 924,col 13)-(line 926,col 13)",
            "(line 927,col 13)-(line 927,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }        ",
        "begin_line": 929,
        "end_line": 931,
        "comment": "",
        "child_ranges": [
            "(line 930,col 13)-(line 930,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.getB()",
        "snippet": "        public int getB() {\n            return this.b;\n        }",
        "begin_line": 933,
        "end_line": 935,
        "comment": "",
        "child_ranges": [
            "(line 934,col 13)-(line 934,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testUnrelatedClasses()",
        "snippet": "    @Test public void testUnrelatedClasses() {\n        Object[] x = new Object[]{new TestACanEqualB(1)};\n        Object[] y = new Object[]{new TestBCanEqualA(1)};\n\n        // sanity checks:\n        assertTrue(Arrays.equals(x, x));\n        assertTrue(Arrays.equals(y, y));\n        assertTrue(Arrays.equals(x, y));\n        assertTrue(Arrays.equals(y, x));\n        // real tests:\n        assertTrue(x[0].equals(x[0]));\n        assertTrue(y[0].equals(y[0]));\n        assertTrue(x[0].equals(y[0]));\n        assertTrue(y[0].equals(x[0]));\n        assertTrue(new EqualsBuilder().append(x, x).isEquals());\n        assertTrue(new EqualsBuilder().append(y, y).isEquals());\n        assertTrue(new EqualsBuilder().append(x, y).isEquals());\n        assertTrue(new EqualsBuilder().append(y, x).isEquals());\n    }",
        "begin_line": 943,
        "end_line": 961,
        "comment": "\n     * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\n     * of each other and do not share a parent aside from Object.\n     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n     ",
        "child_ranges": [
            "(line 944,col 9)-(line 944,col 57)",
            "(line 945,col 9)-(line 945,col 57)",
            "(line 948,col 9)-(line 948,col 40)",
            "(line 949,col 9)-(line 949,col 40)",
            "(line 950,col 9)-(line 950,col 40)",
            "(line 951,col 9)-(line 951,col 40)",
            "(line 953,col 9)-(line 953,col 38)",
            "(line 954,col 9)-(line 954,col 38)",
            "(line 955,col 9)-(line 955,col 38)",
            "(line 956,col 9)-(line 956,col 38)",
            "(line 957,col 9)-(line 957,col 64)",
            "(line 958,col 9)-(line 958,col 64)",
            "(line 959,col 9)-(line 959,col 64)",
            "(line 960,col 9)-(line 960,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testNpeForNullElement()",
        "snippet": "    @Test public void testNpeForNullElement() {\n        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };\n        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };\n\n        // causes an NPE in 2.0 according to:\n        // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n        new EqualsBuilder().append(x1, x2);\n    }",
        "begin_line": 966,
        "end_line": 973,
        "comment": "\n     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n     ",
        "child_ranges": [
            "(line 967,col 9)-(line 967,col 76)",
            "(line 968,col 9)-(line 968,col 86)",
            "(line 972,col 9)-(line 972,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEqualsExcludeFields()",
        "snippet": "    @Test public void testReflectionEqualsExcludeFields() throws Exception {\n        TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\n        TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\n\n        // not equal when including all fields\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));\n\n        // doesn't barf on null, empty array, or non-existent field, but still tests as not equal\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"xxx\"}));\n\n        // not equal if only one of the differing fields excluded\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\"}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"three\"}));\n\n        // equal if both differing fields excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\", \"three\"}));\n\n        // still equal as long as both differing fields are among excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\"}));\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\", \"xxx\"}));\n    }",
        "begin_line": 975,
        "end_line": 997,
        "comment": "",
        "child_ranges": [
            "(line 976,col 9)-(line 976,col 84)",
            "(line 977,col 9)-(line 977,col 84)",
            "(line 980,col 9)-(line 980,col 60)",
            "(line 983,col 9)-(line 983,col 77)",
            "(line 984,col 9)-(line 984,col 77)",
            "(line 985,col 9)-(line 985,col 82)",
            "(line 988,col 9)-(line 988,col 82)",
            "(line 989,col 9)-(line 989,col 84)",
            "(line 992,col 9)-(line 992,col 90)",
            "(line 995,col 9)-(line 995,col 97)",
            "(line 996,col 9)-(line 996,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int)",
        "snippet": "        public TestObjectWithMultipleFields(int one, int two, int three) {\n            this.one = new TestObject(one);\n            this.two = new TestObject(two);\n            this.three = new TestObject(three);\n        }",
        "begin_line": 1005,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 13)-(line 1006,col 43)",
            "(line 1007,col 13)-(line 1007,col 43)",
            "(line 1008,col 13)-(line 1008,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        invocation = new InvocationBuilder().args(\" \").mock(\"mock\").toInvocation();\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldKnowIfIsEqualTo()",
        "snippet": "    @Test\n    public void shouldKnowIfIsEqualTo() {\n        Invocation equal =                  new InvocationBuilder().args(\" \").mock(\"mock\").toInvocation();\n        Invocation nonEqual =               new InvocationBuilder().args(\"X\").mock(\"mock\").toInvocation();\n        Invocation withNewStringInstance =  new InvocationBuilder().args(new String(\" \")).mock(\"mock\").toInvocation();\n\n        assertFalse(invocation.equals(null));\n        assertFalse(invocation.equals(\"\"));\n        assertTrue(invocation.equals(equal));\n        assertFalse(invocation.equals(nonEqual));\n        assertTrue(invocation.equals(withNewStringInstance));\n    }",
        "begin_line": 31,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 106)",
            "(line 34,col 9)-(line 34,col 106)",
            "(line 35,col 9)-(line 35,col 118)",
            "(line 37,col 9)-(line 37,col 45)",
            "(line 38,col 9)-(line 38,col 43)",
            "(line 39,col 9)-(line 39,col 45)",
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldEqualToNotConsiderSequenceNumber()",
        "snippet": "    @Test\n    public void shouldEqualToNotConsiderSequenceNumber() {\n        Invocation equal = new InvocationBuilder().args(\" \").mock(\"mock\").seq(2).toInvocation();\n        \n        assertTrue(invocation.equals(equal));\n        assertTrue(invocation.getSequenceNumber() != equal.getSequenceNumber());\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 96)",
            "(line 48,col 9)-(line 48,col 45)",
            "(line 49,col 9)-(line 49,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldNotBeACitizenOfHashes()",
        "snippet": "    @Test\n    public void shouldNotBeACitizenOfHashes() {\n        Map map = new HashMap();\n        try {\n            map.put(invocation, \"one\");\n            fail();\n        } catch (RuntimeException e) {\n            assertEquals(\"hashCode() is not implemented\", e.getMessage());\n        }\n    }",
        "begin_line": 52,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 32)",
            "(line 55,col 9)-(line 60,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintMethodName()",
        "snippet": "    @Test\n    public void shouldPrintMethodName() {\n        invocation = new InvocationBuilder().toInvocation();\n        assertEquals(\"iMethods.simpleMethod();\", invocation.toString());\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 60)",
            "(line 66,col 9)-(line 66,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintMethodArgs()",
        "snippet": "    @Test\n    public void shouldPrintMethodArgs() {\n        invocation = new InvocationBuilder().args(\"foo\").toInvocation();\n        assertThat(invocation.toString(), endsWith(\"simpleMethod(\\\"foo\\\");\"));\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 78)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintMethodIntegerArgAndString()",
        "snippet": "    @Test\n    public void shouldPrintMethodIntegerArgAndString() {\n        invocation = new InvocationBuilder().args(\"foo\", 1).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"simpleMethod(\\\"foo\\\", 1);\"));\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 75)",
            "(line 78,col 9)-(line 78,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintNull()",
        "snippet": "    @Test\n    public void shouldPrintNull() {\n        invocation = new InvocationBuilder().args((String) null).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"simpleMethod(null);\"));\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 80)",
            "(line 84,col 9)-(line 84,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintArray()",
        "snippet": "    @Test\n    public void shouldPrintArray() {\n        invocation = new InvocationBuilder().method(\"oneArray\").args(new int[] { 1, 2, 3 }).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"oneArray([1, 2, 3]);\"));\n    }",
        "begin_line": 87,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 107)",
            "(line 90,col 9)-(line 90,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintNullIfArrayIsNull()",
        "snippet": "    @Test\n    public void shouldPrintNullIfArrayIsNull() throws Exception {\n        Method m = IMethods.class.getMethod(\"oneArray\", Object[].class);\n        invocation = new InvocationBuilder().method(m).args((Object) null).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"oneArray(null);\"));\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 72)",
            "(line 96,col 9)-(line 96,col 90)",
            "(line 97,col 9)-(line 97,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldPrintArgumentsInMultilinesWhenGetsTooBig()",
        "snippet": "    @Test\n    public void shouldPrintArgumentsInMultilinesWhenGetsTooBig() {\n        invocation = new InvocationBuilder().args(\"veeeeery long string that makes it ugly in one line\", 1).toInvocation();\n        assertThat(invocation.toString(), endsWith( \n                \"simpleMethod(\" +\n                \"\\n\" +\n                \"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n                \"\\n\" +\n                \"    1\" +\n                \"\\n\" +\n                \");\"));\n    }",
        "begin_line": 100,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 123)",
            "(line 103,col 9)-(line 110,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldMarkVerifiedWhenMarkingVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldMarkVerifiedWhenMarkingVerifiedInOrder() throws Exception {\n        assertFalse(invocation.isVerified());\n        assertFalse(invocation.isVerifiedInOrder());\n        \n        invocation.markVerifiedInOrder();\n        \n        assertTrue(invocation.isVerified());\n        assertTrue(invocation.isVerifiedInOrder());\n    }",
        "begin_line": 113,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 45)",
            "(line 116,col 9)-(line 116,col 52)",
            "(line 118,col 9)-(line 118,col 41)",
            "(line 120,col 9)-(line 120,col 44)",
            "(line 121,col 9)-(line 121,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldTransformArgumentsToMatchers()",
        "snippet": "    @Test\n    public void shouldTransformArgumentsToMatchers() throws Exception {\n        Invocation i = new InvocationBuilder().args(\"foo\", new String[] {\"bar\"}).toInvocation();\n        List matchers = i.argumentsToMatchers();\n\n        assertEquals(2, matchers.size());\n        assertEquals(Equals.class, matchers.get(0).getClass());\n        assertEquals(ArrayEquals.class, matchers.get(1).getClass());\n    }",
        "begin_line": 124,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 96)",
            "(line 127,col 9)-(line 127,col 48)",
            "(line 129,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 130,col 63)",
            "(line 131,col 9)-(line 131,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldKnowIfIsToString()",
        "snippet": "    @Test\n    public void shouldKnowIfIsToString() throws Exception {\n        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n        assertTrue(Invocation.isToString(toString));\n        \n        Invocation notToString = new InvocationBuilder().method(\"toString\").arg(\"foo\").toInvocation();\n        assertFalse(Invocation.isToString(notToString));\n    }",
        "begin_line": 134,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 88)",
            "(line 137,col 9)-(line 137,col 52)",
            "(line 139,col 9)-(line 139,col 102)",
            "(line 140,col 9)-(line 140,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldKnowValidThrowables()",
        "snippet": "    @Test\n    public void shouldKnowValidThrowables() throws Exception {\n        Invocation invocation = new InvocationBuilder().method(\"canThrowException\").toInvocation();\n        assertFalse(invocation.isValidException(new Exception()));\n        assertTrue(invocation.isValidException(new CharacterCodingException()));\n    }",
        "begin_line": 143,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 99)",
            "(line 146,col 9)-(line 146,col 66)",
            "(line 147,col 9)-(line 147,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.Foo.bark()",
        "snippet": "        public String bark() {\n            return \"woof\";\n        }",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 13)-(line 152,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.shouldBeAbleToCallRealMethod()",
        "snippet": "    @Test\n    public void shouldBeAbleToCallRealMethod() throws Throwable {\n        //when\n        Invocation invocation = invocationOf(Foo.class, \"bark\", new RealMethod() {\n            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().bark();\n            }});\n        //then\n        assertEquals(\"woof\", invocation.callRealMethod());\n    }",
        "begin_line": 156,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 162,col 16)",
            "(line 164,col 9)-(line 164,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationTest.java",
        "signature": "org.mockito.internal.invocation.InvocationTest.Anonymous-dea7f6aa-c51f-4e34-ab38-6807394d4b1b.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().bark();\n            }});",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 17)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        simpleMethod = new InvocationBuilder().mock(mock).simpleMethod().toInvocationMatcher();\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 95)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldBuildEqualsMatchersWhenNullPassed()",
        "snippet": "    public void shouldBuildEqualsMatchersWhenNullPassed() throws Exception {\n        InvocationMatcher m = new InvocationMatcher(new InvocationBuilder().args(\"foo\").toInvocation(), null);\n        assertThat(m.getMatchers(), hasExactlyInOrder(new Equals(\"foo\")));\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 110)",
            "(line 37,col 9)-(line 37,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldBeACitizenOfHashes()",
        "snippet": "    @Test\n    public void shouldBeACitizenOfHashes() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        Invocation invocationTwo = new InvocationBuilder().args(\"blah\").toInvocation();\n        \n        Map map = new HashMap();\n        map.put(new InvocationMatcher(invocation), \"one\");\n        map.put(new InvocationMatcher(invocationTwo), \"two\");\n        \n        assertEquals(2, map.size());\n    }",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 71)",
            "(line 43,col 9)-(line 43,col 87)",
            "(line 45,col 9)-(line 45,col 32)",
            "(line 46,col 9)-(line 46,col 58)",
            "(line 47,col 9)-(line 47,col 61)",
            "(line 49,col 9)-(line 49,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldNotEqualIfNumberOfArgumentsDiffer()",
        "snippet": "    @Test\n    public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {\n        PrintingFriendlyInvocation withOneArg = new InvocationMatcher(new InvocationBuilder().args(\"test\").toInvocation());\n        PrintingFriendlyInvocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args(\"test\", 100).toInvocation());\n\n        assertFalse(withOneArg.equals(null));\n        assertFalse(withOneArg.equals(withTwoArgs));\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 123)",
            "(line 55,col 9)-(line 55,col 129)",
            "(line 57,col 9)-(line 57,col 45)",
            "(line 58,col 9)-(line 58,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldToStringWithMatchers()",
        "snippet": "    @Test\n    public void shouldToStringWithMatchers() throws Exception {\n        Matcher m = NotNull.NOT_NULL;\n        InvocationMatcher notNull = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(m));\n        Matcher mTwo = new Equals('x');\n        InvocationMatcher equals = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(mTwo));\n\n        assertContains(\"simpleMethod(notNull())\", notNull.toString());\n        assertContains(\"simpleMethod('x')\", equals.toString());\n    }",
        "begin_line": 61,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 64,col 109)",
            "(line 65,col 9)-(line 65,col 39)",
            "(line 66,col 9)-(line 66,col 111)",
            "(line 68,col 9)-(line 68,col 70)",
            "(line 69,col 9)-(line 69,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldKnowIfIsSimilarTo()",
        "snippet": "    @Test\n    public void shouldKnowIfIsSimilarTo() throws Exception {\n        Invocation same = new InvocationBuilder().mock(mock).simpleMethod().toInvocation();\n        assertTrue(simpleMethod.hasSimilarMethod(same));\n        \n        Invocation different = new InvocationBuilder().mock(mock).differentMethod().toInvocation();\n        assertFalse(simpleMethod.hasSimilarMethod(different));\n    }",
        "begin_line": 72,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 91)",
            "(line 75,col 9)-(line 75,col 56)",
            "(line 77,col 9)-(line 77,col 99)",
            "(line 78,col 9)-(line 78,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldNotBeSimilarToVerifiedInvocation()",
        "snippet": "    @Test\n    public void shouldNotBeSimilarToVerifiedInvocation() throws Exception {\n        Invocation verified = new InvocationBuilder().simpleMethod().verified().toInvocation();\n        assertFalse(simpleMethod.hasSimilarMethod(verified));\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 95)",
            "(line 84,col 9)-(line 84,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldNotBeSimilarIfMocksAreDifferent()",
        "snippet": "    @Test\n    public void shouldNotBeSimilarIfMocksAreDifferent() throws Exception {\n        Invocation onDifferentMock = new InvocationBuilder().simpleMethod().mock(\"different mock\").toInvocation();\n        assertFalse(simpleMethod.hasSimilarMethod(onDifferentMock));\n    }    ",
        "begin_line": 87,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 114)",
            "(line 90,col 9)-(line 90,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldNotBeSimilarIfIsOverloadedButUsedWithTheSameArg()",
        "snippet": "    @Test\n    public void shouldNotBeSimilarIfIsOverloadedButUsedWithTheSameArg() throws Exception {\n        Method method = IMethods.class.getMethod(\"simpleMethod\", String.class);\n        Method overloadedMethod = IMethods.class.getMethod(\"simpleMethod\", Object.class);\n        \n        String sameArg = \"test\";\n        \n        InvocationMatcher invocation = new InvocationBuilder().method(method).arg(sameArg).toInvocationMatcher();\n        Invocation overloadedInvocation = new InvocationBuilder().method(overloadedMethod).arg(sameArg).toInvocation();\n        \n        assertFalse(invocation.hasSimilarMethod(overloadedInvocation));\n    } ",
        "begin_line": 93,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 79)",
            "(line 96,col 9)-(line 96,col 89)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 100,col 9)-(line 100,col 113)",
            "(line 101,col 9)-(line 101,col 119)",
            "(line 103,col 9)-(line 103,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.shouldBeSimilarIfIsOverloadedButUsedWithDifferentArg()",
        "snippet": "    @Test\n    public void shouldBeSimilarIfIsOverloadedButUsedWithDifferentArg() throws Exception {\n        Method method = IMethods.class.getMethod(\"simpleMethod\", String.class);\n        Method overloadedMethod = IMethods.class.getMethod(\"simpleMethod\", Object.class);\n        \n        InvocationMatcher invocation = new InvocationBuilder().mock(mock).method(method).arg(\"foo\").toInvocationMatcher();\n        Invocation overloadedInvocation = new InvocationBuilder().mock(mock).method(overloadedMethod).arg(\"bar\").toInvocation();\n        \n        assertTrue(invocation.hasSimilarMethod(overloadedInvocation));\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 79)",
            "(line 109,col 9)-(line 109,col 89)",
            "(line 111,col 9)-(line 111,col 122)",
            "(line 112,col 9)-(line 112,col 128)",
            "(line 114,col 9)-(line 114,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ExposedInvocation",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ExposedInvocation.java",
        "signature": "org.mockito.internal.invocation.ExposedInvocation.ExposedInvocation(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public ExposedInvocation(Invocation toBeExposed) {\n         methodProxy = ((HasCGLIBMethodProxy) toBeExposed.realMethod).getMethodProxy();\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "child_ranges": [
            "(line 15,col 10)-(line 15,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ExposedInvocation",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ExposedInvocation.java",
        "signature": "org.mockito.internal.invocation.ExposedInvocation.getMethodProxy()",
        "snippet": "    public MethodProxy getMethodProxy() {\n        return methodProxy;\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.toInvocation()",
        "snippet": "    public Invocation toInvocation() {\n        if (method == null) {\n            List<Class> argTypes = new LinkedList<Class>();\n            for (Object arg : args) {\n                if (arg == null) {\n                    argTypes.add(Object.class);\n                } else {\n                    argTypes.add(arg.getClass());\n                }\n            }\n            \n            try {\n                method = IMethods.class.getMethod(methodName, argTypes.toArray(new Class[argTypes.size()]));\n            } catch (Exception e) {\n                throw new RuntimeException(\"builder only creates invocations of IMethods interface\", e);\n            }\n        }\n        \n        Invocation i = new Invocation(mock, method, args, sequenceNumber, null);\n        if (verified) {\n            i.markVerified();\n        }\n        return i;\n    }",
        "begin_line": 24,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 40,col 9)",
            "(line 42,col 9)-(line 42,col 80)",
            "(line 43,col 9)-(line 45,col 9)",
            "(line 46,col 9)-(line 46,col 17)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.method(java.lang.String)",
        "snippet": "    public InvocationBuilder method(String methodName) {\n        this.methodName  = methodName;\n        return this;\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 38)",
            "(line 51,col 9)-(line 51,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.seq(int)",
        "snippet": "    public InvocationBuilder seq(int sequenceNumber) {\n        this.sequenceNumber = sequenceNumber;\n        return this;\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 45)",
            "(line 56,col 9)-(line 56,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.args(java.lang.Object...)",
        "snippet": "    public InvocationBuilder args(Object ... args) {\n        this.args = args;\n        return this;\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)",
            "(line 61,col 9)-(line 61,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.arg(java.lang.Object)",
        "snippet": "    public InvocationBuilder arg(Object o) {\n        this.args = new Object[] {o};\n        return this;\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 37)",
            "(line 66,col 9)-(line 66,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.mock(java.lang.Object)",
        "snippet": "    public InvocationBuilder mock(Object mock) {\n        this.mock = mock;\n        return this;\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 25)",
            "(line 71,col 9)-(line 71,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.method(java.lang.reflect.Method)",
        "snippet": "    public InvocationBuilder method(Method method) {\n        this.method = method;\n        return this;\n    }",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 29)",
            "(line 76,col 9)-(line 76,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.verified()",
        "snippet": "    public InvocationBuilder verified() {\n        this.verified = true;\n        return this;\n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 29)",
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.toInvocationMatcher()",
        "snippet": "    public InvocationMatcher toInvocationMatcher() {\n        return new InvocationMatcher(toInvocation());\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.simpleMethod()",
        "snippet": "    public InvocationBuilder simpleMethod() {\n        return this.method(\"simpleMethod\");\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.differentMethod()",
        "snippet": "    public InvocationBuilder differentMethod() {\n        return this.method(\"differentMethod\");\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        simpleMethodInvocation = new InvocationBuilder().mock(mock).simpleMethod().seq(1).toInvocation();\n        simpleMethodInvocationTwo = new InvocationBuilder().mock(mock).simpleMethod().seq(2).toInvocation();\n        differentMethodInvocation = new InvocationBuilder().mock(mock).differentMethod().seq(3).toInvocation();\n        invocations.addAll(Arrays.asList(simpleMethodInvocation, simpleMethodInvocationTwo, differentMethodInvocation));\n        finder = new InvocationsFinder();\n    }",
        "begin_line": 32,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 105)",
            "(line 35,col 9)-(line 35,col 108)",
            "(line 36,col 9)-(line 36,col 111)",
            "(line 37,col 9)-(line 37,col 120)",
            "(line 38,col 9)-(line 38,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindActualInvocations()",
        "snippet": "    @Test\n    public void shouldFindActualInvocations() throws Exception {\n        List<Invocation> actual = finder.findInvocations(invocations, new InvocationMatcher(simpleMethodInvocation));\n        assertThat(actual, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n        \n        actual = finder.findInvocations(invocations, new InvocationMatcher(differentMethodInvocation));\n        assertThat(actual, hasExactlyInOrder(differentMethodInvocation));\n    }",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 117)",
            "(line 44,col 9)-(line 44,col 97)",
            "(line 46,col 9)-(line 46,col 103)",
            "(line 47,col 9)-(line 47,col 73)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInvocation()",
        "snippet": "    @Test\n    public void shouldFindFirstUnverifiedInvocation() throws Exception {\n        assertSame(simpleMethodInvocation, finder.findFirstUnverified(invocations));\n        \n        simpleMethodInvocationTwo.markVerified();\n        simpleMethodInvocation.markVerified();\n        \n        assertSame(differentMethodInvocation, finder.findFirstUnverified(invocations));\n        \n        differentMethodInvocation.markVerified();\n        assertNull(finder.findFirstUnverified(invocations));\n    }",
        "begin_line": 50,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 84)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 46)",
            "(line 57,col 9)-(line 57,col 87)",
            "(line 59,col 9)-(line 59,col 49)",
            "(line 60,col 9)-(line 60,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInvocationOnMock()",
        "snippet": "    @Test\n    public void shouldFindFirstUnverifiedInvocationOnMock() throws Exception {\n        assertSame(simpleMethodInvocation, finder.findFirstUnverified(invocations, simpleMethodInvocation.getMock()));\n        assertNull(finder.findFirstUnverified(invocations, \"different mock\"));\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 118)",
            "(line 66,col 9)-(line 66,col 78)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstSimilarInvocationByName()",
        "snippet": "    @Test\n    public void shouldFindFirstSimilarInvocationByName() throws Exception {\n        Invocation overloadedSimpleMethod = new InvocationBuilder().mock(mock).simpleMethod().arg(\"test\").toInvocation();\n        \n        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedSimpleMethod));\n        assertSame(found, simpleMethodInvocation);\n    }",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 121)",
            "(line 73,col 9)-(line 73,col 116)",
            "(line 74,col 9)-(line 74,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindInvocationWithTheSameMethod()",
        "snippet": "    @Test\n    public void shouldFindInvocationWithTheSameMethod() throws Exception {\n        Invocation overloadedDifferentMethod = new InvocationBuilder().differentMethod().arg(\"test\").toInvocation();\n        \n        invocations.add(overloadedDifferentMethod);\n        \n        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedDifferentMethod));\n        assertSame(found, overloadedDifferentMethod);\n    }",
        "begin_line": 77,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 116)",
            "(line 81,col 9)-(line 81,col 51)",
            "(line 83,col 9)-(line 83,col 119)",
            "(line 84,col 9)-(line 84,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldGetLastStackTrace()",
        "snippet": "    @Test\n    public void shouldGetLastStackTrace() throws Exception {\n        Location last = finder.getLastLocation(invocations);\n        assertSame(differentMethodInvocation.getLocation(), last);\n        \n        assertNull(finder.getLastLocation(Collections.<Invocation>emptyList()));\n    } ",
        "begin_line": 87,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 60)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 92,col 9)-(line 92,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindAllMatchingUnverifiedChunks()",
        "snippet": "    @Test\n    public void shouldFindAllMatchingUnverifiedChunks() throws Exception {\n        List<Invocation> allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation));\n        assertThat(allMatching, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n        \n        simpleMethodInvocation.markVerifiedInOrder();\n        allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation));\n        assertThat(allMatching, hasExactlyInOrder(simpleMethodInvocationTwo));\n        \n        simpleMethodInvocationTwo.markVerifiedInOrder();\n        allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation));\n        assertTrue(allMatching.isEmpty());\n    }",
        "begin_line": 95,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 138)",
            "(line 98,col 9)-(line 98,col 102)",
            "(line 100,col 9)-(line 100,col 53)",
            "(line 101,col 9)-(line 101,col 121)",
            "(line 102,col 9)-(line 102,col 78)",
            "(line 104,col 9)-(line 104,col 56)",
            "(line 105,col 9)-(line 105,col 121)",
            "(line 106,col 9)-(line 106,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindMatchingChunk()",
        "snippet": "    @Test\n    public void shouldFindMatchingChunk() throws Exception {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 2);\n        assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n    }",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 121)",
            "(line 112,col 9)-(line 112,col 96)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldReturnAllChunksWhenModeIsAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldReturnAllChunksWhenModeIsAtLeastOnce() throws Exception {\n        Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n        invocations.add(simpleMethodInvocationThree);\n        \n        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 1);\n        assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n    }",
        "begin_line": 115,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 99)",
            "(line 118,col 9)-(line 118,col 53)",
            "(line 120,col 9)-(line 120,col 121)",
            "(line 121,col 9)-(line 121,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldReturnAllChunksWhenWantedCountDoesntMatch()",
        "snippet": "    @Test\n    public void shouldReturnAllChunksWhenWantedCountDoesntMatch() throws Exception {\n        Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n        invocations.add(simpleMethodInvocationThree);\n        \n        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 1);\n        assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n    }",
        "begin_line": 124,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 99)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 129,col 9)-(line 129,col 121)",
            "(line 130,col 9)-(line 130,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindPreviousInOrder()",
        "snippet": "    @Test\n    public void shouldFindPreviousInOrder() throws Exception {\n        Invocation previous = finder.findPreviousVerifiedInOrder(invocations);\n        assertNull(previous);\n        \n        simpleMethodInvocation.markVerifiedInOrder();\n        simpleMethodInvocationTwo.markVerifiedInOrder();\n        \n        previous = finder.findPreviousVerifiedInOrder(invocations);\n        assertSame(simpleMethodInvocationTwo, previous);\n    }",
        "begin_line": 133,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 78)",
            "(line 136,col 9)-(line 136,col 29)",
            "(line 138,col 9)-(line 138,col 53)",
            "(line 139,col 9)-(line 139,col 56)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        state = new MockingProgressImpl();\n        \n        mockitoStubber = new MockitoStubber(state);\n        mockitoStubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n        \n        simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n    }",
        "begin_line": 25,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 42)",
            "(line 29,col 9)-(line 29,col 51)",
            "(line 30,col 9)-(line 30,col 104)",
            "(line 32,col 9)-(line 32,col 77)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.shouldFinishStubbingWhenWrongThrowableIsSet()",
        "snippet": "    @Test\n    public void shouldFinishStubbingWhenWrongThrowableIsSet() throws Exception {\n        state.stubbingStarted();\n        try {\n            mockitoStubber.addAnswer(new ThrowsException(new Exception()));\n            fail();\n        } catch (MockitoException e) {\n            state.validateState();\n        }\n    }",
        "begin_line": 35,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)",
            "(line 38,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.shouldFinishStubbingOnAddingReturnValue()",
        "snippet": "    @Test\n    public void shouldFinishStubbingOnAddingReturnValue() throws Exception {\n        state.stubbingStarted();\n        mockitoStubber.addAnswer(new Returns(\"test\"));\n        state.validateState();\n    }",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 32)",
            "(line 49,col 9)-(line 49,col 54)",
            "(line 50,col 9)-(line 50,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.shouldGetResultsForMethods()",
        "snippet": "    @Test\n    public void shouldGetResultsForMethods() throws Throwable {\n        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n        mockitoStubber.addAnswer(new Returns(\"simpleMethod\"));\n        \n        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n        mockitoStubber.addAnswer(new ThrowsException(new MyException()));\n        \n        assertEquals(\"simpleMethod\", mockitoStubber.answerTo(simpleMethod));\n        \n        try {\n            mockitoStubber.answerTo(differentMethod);\n            fail();\n        } catch (MyException e) {}\n    }",
        "begin_line": 53,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 94)",
            "(line 56,col 9)-(line 56,col 62)",
            "(line 58,col 9)-(line 58,col 94)",
            "(line 59,col 9)-(line 59,col 97)",
            "(line 60,col 9)-(line 60,col 73)",
            "(line 62,col 9)-(line 62,col 76)",
            "(line 64,col 9)-(line 67,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.shouldAddThrowableForVoidMethod()",
        "snippet": "    @Test\n    public void shouldAddThrowableForVoidMethod() throws Throwable {\n        mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new MyException()));\n        mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n        \n        try {\n            mockitoStubber.answerTo(simpleMethod);\n            fail();\n        } catch (MyException e) {}\n    }",
        "begin_line": 70,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 86)",
            "(line 73,col 9)-(line 73,col 81)",
            "(line 75,col 9)-(line 78,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.shouldValidateThrowableForVoidMethod()",
        "snippet": "    @Test\n    public void shouldValidateThrowableForVoidMethod() throws Throwable {\n        mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new Exception()));\n        \n        try {\n            mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 81,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 84)",
            "(line 85,col 9)-(line 88,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.MockitoStubberTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/MockitoStubberTest.java",
        "signature": "org.mockito.internal.stubbing.MockitoStubberTest.shouldValidateThrowable()",
        "snippet": "    @Test\n    public void shouldValidateThrowable() throws Throwable {\n        try {\n            mockitoStubber.addAnswer(new ThrowsException(null));\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 91,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 96,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnMockValueForInterface()",
        "snippet": "    @Test\n    // FIXME split into separate\n    public void shouldReturnMockValueForInterface() throws Exception {\n        Object interfaceMock = values.returnValueFor(FooInterface.class);\n        assertTrue(new MockUtil().isMock(interfaceMock));\n    }",
        "begin_line": 23,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 73)",
            "(line 27,col 9)-(line 27,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnMockValueForClass()",
        "snippet": "    public void shouldReturnMockValueForClass() throws Exception {\n        Object classMock = values.returnValueFor(BarClass.class);\n        assertTrue(new MockUtil().isMock(classMock));\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 65)",
            "(line 32,col 9)-(line 32,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnNullForFinalClass()",
        "snippet": "    @Test\n    public void shouldReturnNullForFinalClass() throws Exception {\n        assertNull(values.returnValueFor(Baz.class));\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnTheUsualDefaultValuesForPrimitives()",
        "snippet": "    @Test\n    public void shouldReturnTheUsualDefaultValuesForPrimitives()\n            throws Throwable {\n        ReturnsMocks answer = new ReturnsMocks();\n        assertEquals(false, answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n        assertEquals((char) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n    }",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 49)",
            "(line 44,col 9)-(line 44,col 101)",
            "(line 45,col 9)-(line 45,col 101)",
            "(line 46,col 9)-(line 46,col 93)",
            "(line 47,col 9)-(line 47,col 94)",
            "(line 48,col 9)-(line 48,col 95)",
            "(line 49,col 9)-(line 49,col 96)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.StringMethods.stringMethod()",
        "snippet": "        String stringMethod();",
        "begin_line": 53,
        "end_line": 53,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.StringMethods.stringArrayMethod()",
        "snippet": "        String[] stringArrayMethod();",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnEmptyArray()",
        "snippet": "    @Test\n    public void shouldReturnEmptyArray() throws Throwable {\n        String[] ret = (String[]) values.answer(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n        \n        assertTrue(ret.getClass().isArray());\n        assertTrue(ret.length == 0);\n    }",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 104)",
            "(line 61,col 9)-(line 61,col 45)",
            "(line 62,col 9)-(line 62,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnEmptyString()",
        "snippet": "    @Test\n    public void shouldReturnEmptyString() throws Throwable {\n        assertEquals(\"\", values.answer(invocationOf(StringMethods.class, \"stringMethod\")));\n    }",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 91)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.shouldReturnEmptyCollectionsOrNullForNonCollections()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n        ReturnsEmptyValues values = new ReturnsEmptyValues();\n        \n        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n\n        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());\n        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());\n        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());\n        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());\n\n        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());\n        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());\n        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());\n\n        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());\n        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());\n        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n        \n        assertNull(values.returnValueFor(String.class));\n    }",
        "begin_line": 27,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 61)",
            "(line 31,col 9)-(line 31,col 85)",
            "(line 33,col 9)-(line 33,col 71)",
            "(line 34,col 9)-(line 34,col 83)",
            "(line 35,col 9)-(line 35,col 79)",
            "(line 36,col 9)-(line 36,col 79)",
            "(line 37,col 9)-(line 37,col 91)",
            "(line 39,col 9)-(line 39,col 73)",
            "(line 40,col 9)-(line 40,col 83)",
            "(line 41,col 9)-(line 41,col 85)",
            "(line 43,col 9)-(line 43,col 71)",
            "(line 44,col 9)-(line 44,col 83)",
            "(line 45,col 9)-(line 45,col 79)",
            "(line 46,col 9)-(line 46,col 79)",
            "(line 47,col 9)-(line 47,col 91)",
            "(line 49,col 9)-(line 49,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.shouldReturnPrimitive()",
        "snippet": "    @Test public void shouldReturnPrimitive() {\n        ReturnsEmptyValues values = new ReturnsEmptyValues();\n        \n        assertEquals(false, values.returnValueFor(Boolean.TYPE));\n        assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n        assertEquals(0, values.returnValueFor(Byte.TYPE));\n        assertEquals(0, values.returnValueFor(Short.TYPE));\n        assertEquals(0, values.returnValueFor(Integer.TYPE));\n        assertEquals(0, values.returnValueFor(Long.TYPE));\n        assertEquals(0, values.returnValueFor(Float.TYPE));\n        assertEquals(0, values.returnValueFor(Double.TYPE));\n    }",
        "begin_line": 52,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 61)",
            "(line 55,col 9)-(line 55,col 65)",
            "(line 56,col 9)-(line 56,col 70)",
            "(line 57,col 9)-(line 57,col 58)",
            "(line 58,col 9)-(line 58,col 59)",
            "(line 59,col 9)-(line 59,col 61)",
            "(line 60,col 9)-(line 60,col 58)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest.shouldReturnEmptyArray()",
        "snippet": "    @Test\n    public void shouldReturnEmptyArray() {\n        String[] ret = (String[]) rv.returnValueFor((new String[0]).getClass());\n        assertTrue(ret.getClass().isArray());\n        assertTrue(ret.length == 0);\n    }",
        "begin_line": 14,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 80)",
            "(line 17,col 9)-(line 17,col 45)",
            "(line 18,col 9)-(line 18,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest.shouldReturnEmptyString()",
        "snippet": "    @Test\n    public void shouldReturnEmptyString() {\n        assertEquals(\"\", rv.returnValueFor(String.class));\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.booleanMethod()",
        "snippet": "    boolean booleanMethod();",
        "begin_line": 8,
        "end_line": 8,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.charMethod()",
        "snippet": "    char charMethod();",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.intMethod()",
        "snippet": "    int intMethod();",
        "begin_line": 10,
        "end_line": 10,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.longMethod()",
        "snippet": "    long longMethod();",
        "begin_line": 11,
        "end_line": 11,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.floatMethod()",
        "snippet": "    float floatMethod();",
        "begin_line": 12,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.doubleMethod()",
        "snippet": "    double doubleMethod();",
        "begin_line": 13,
        "end_line": 13,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldReturnTheUsualDefaultValuesForPrimitives()",
        "snippet": "    @Test\n    public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n        assertEquals(false  ,   answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n        assertEquals((char) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n    }",
        "begin_line": 14,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 56)",
            "(line 17,col 9)-(line 17,col 105)",
            "(line 18,col 9)-(line 18,col 102)",
            "(line 19,col 9)-(line 19,col 101)",
            "(line 20,col 9)-(line 20,col 102)",
            "(line 21,col 9)-(line 21,col 103)",
            "(line 22,col 9)-(line 22,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.Foo.get()",
        "snippet": "        Foo get();",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives()",
        "snippet": "    @Test\n    public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n        \n        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n        \n        try {\n            smartNull.get();\n            fail();\n        } catch (SmartNullPointerException expected) {}\n    }",
        "begin_line": 29,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 56)",
            "(line 33,col 9)-(line 33,col 76)",
            "(line 35,col 9)-(line 38,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldReturnAnObjectThatAllowsObjectMethods()",
        "snippet": "    @Test\n    public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n        \n        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n        \n        //TODO: after 1.8 add functionality of printing params\n        assertEquals(\"SmartNull returned by unstubbed get() method on mock\", smartNull + \"\");\n    }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 56)",
            "(line 45,col 9)-(line 45,col 76)",
            "(line 48,col 9)-(line 48,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldValidateNullThrowable()",
        "snippet": "    @Test\n    public void shouldValidateNullThrowable() throws Throwable {\n        try {\n            validator.validate(new ThrowsException(null), null);\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 21,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 26,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldPassProperCheckedException()",
        "snippet": "    @Test\n    public void shouldPassProperCheckedException() throws Throwable {\n        validator.validate(new ThrowsException(new CharacterCodingException()), invocation);\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailInvalidCheckedException()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void shouldFailInvalidCheckedException() throws Throwable {\n        validator.validate(new ThrowsException(new IOException()), invocation);\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 79)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldPassRuntimeExceptions()",
        "snippet": "    @Test\n    public void shouldPassRuntimeExceptions() throws Throwable {\n        validator.validate(new ThrowsException(new Error()), invocation);\n        validator.validate(new ThrowsException(new RuntimeException()), invocation);\n    }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 73)",
            "(line 42,col 9)-(line 42,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailWhenReturnValueIsSetForVoidMethod()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void shouldFailWhenReturnValueIsSetForVoidMethod() throws Throwable {\n        validator.validate(new Returns(\"one\"), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailWhenNonVoidMethodDoesNothing()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void shouldFailWhenNonVoidMethodDoesNothing() throws Throwable {\n        validator.validate(new DoesNothing(), new InvocationBuilder().simpleMethod().toInvocation());\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 101)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldAllowVoidReturnForVoidMethod()",
        "snippet": "    @Test\n    public void shouldAllowVoidReturnForVoidMethod() throws Throwable {\n        validator.validate(new DoesNothing(), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 107)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldAllowCorrectTypeOfReturnValue()",
        "snippet": "    @Test\n    public void shouldAllowCorrectTypeOfReturnValue() throws Throwable {\n        validator.validate(new Returns(\"one\"), new InvocationBuilder().simpleMethod().toInvocation());\n        validator.validate(new Returns(false), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n        validator.validate(new Returns(new Boolean(true)), new InvocationBuilder().method(\"booleanObjectReturningMethod\").toInvocation());\n        validator.validate(new Returns(1), new InvocationBuilder().method(\"integerReturningMethod\").toInvocation());\n        validator.validate(new Returns(1L), new InvocationBuilder().method(\"longReturningMethod\").toInvocation());\n        validator.validate(new Returns(1L), new InvocationBuilder().method(\"longObjectReturningMethod\").toInvocation());\n        validator.validate(new Returns(null), new InvocationBuilder().method(\"objectReturningMethodNoArgs\").toInvocation());\n        validator.validate(new Returns(1), new InvocationBuilder().method(\"objectReturningMethodNoArgs\").toInvocation());\n    }",
        "begin_line": 60,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 102)",
            "(line 63,col 9)-(line 63,col 120)",
            "(line 64,col 9)-(line 64,col 138)",
            "(line 65,col 9)-(line 65,col 116)",
            "(line 66,col 9)-(line 66,col 114)",
            "(line 67,col 9)-(line 67,col 120)",
            "(line 68,col 9)-(line 68,col 124)",
            "(line 69,col 9)-(line 69,col 121)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailOnReturnTypeMismatch()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void shouldFailOnReturnTypeMismatch() throws Throwable {\n        validator.validate(new Returns(\"String\"), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 123)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailOnWrongPrimitive()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void shouldFailOnWrongPrimitive() throws Throwable {\n        validator.validate(new Returns(1), new InvocationBuilder().method(\"doubleReturningMethod\").toInvocation());\n    }",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 115)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailOnNullWithPrimitive()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void shouldFailOnNullWithPrimitive() throws Throwable {\n        validator.validate(new Returns(null), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n    }",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 119)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowSettingNullInterface()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullInterface() {\n        mockSettingsImpl.extraInterfaces(List.class, null);\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNonInterfaces()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowNonInterfaces() {\n        mockSettingsImpl.extraInterfaces(List.class, LinkedList.class);\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowUsingTheSameInterfaceAsExtra()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowUsingTheSameInterfaceAsExtra() {\n        mockSettingsImpl.extraInterfaces(List.class, LinkedList.class);\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowEmptyExtraInterfaces()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowEmptyExtraInterfaces() {\n        mockSettingsImpl.extraInterfaces();\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNullArrayOfExtraInterfaces()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowNullArrayOfExtraInterfaces() {\n        mockSettingsImpl.extraInterfaces((Class[]) null);\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldAllowMultipleInterfaces()",
        "snippet": "    @Test\n    public void shouldAllowMultipleInterfaces() {\n        //when\n        mockSettingsImpl.extraInterfaces(List.class, Set.class);\n        \n        //then\n        assertEquals(List.class, mockSettingsImpl.getExtraInterfaces()[0]);\n        assertEquals(Set.class, mockSettingsImpl.getExtraInterfaces()[1]);\n    }",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 64)",
            "(line 51,col 9)-(line 51,col 75)",
            "(line 52,col 9)-(line 52,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.cglib.MethodProxyBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java",
        "signature": "org.mockito.internal.creation.cglib.MethodProxyBuilder.build()",
        "snippet": "    public MethodProxy build() {\n        IMethods mock = mock(IMethods.class);\n        when(mock.objectReturningMethodNoArgs()).thenAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return invocation;\n            }});\n        \n        Invocation i = (Invocation) mock.objectReturningMethodNoArgs();\n        return new ExposedInvocation(i).getMethodProxy();\n    }",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 45)",
            "(line 20,col 9)-(line 23,col 16)",
            "(line 25,col 9)-(line 25,col 71)",
            "(line 26,col 9)-(line 26,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.cglib.MethodProxyBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java",
        "signature": "org.mockito.internal.creation.cglib.MethodProxyBuilder.Anonymous-87d85a77-8763-49d6-95b7-1c29c40b9db8.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return invocation;\n            }});",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 17)-(line 22,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.cglib.CGLIBHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/cglib/CGLIBHackerTest.java",
        "signature": "org.mockito.internal.creation.cglib.CGLIBHackerTest.shouldSetMockitoNamingPolicy()",
        "snippet": "    @Test\n    public void shouldSetMockitoNamingPolicy() throws Exception {\n        //given\n        MethodProxy methodProxy = new MethodProxyBuilder().build();\n        \n        //when\n        new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n        \n        //then\n        Object createInfo = Whitebox.getInternalState(methodProxy, \"createInfo\");\n        NamingPolicy namingPolicy = (NamingPolicy) Whitebox.getInternalState(createInfo, \"namingPolicy\");\n        assertEquals(namingPolicy, MockitoNamingPolicy.INSTANCE);\n    }",
        "begin_line": 17,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 67)",
            "(line 23,col 9)-(line 23,col 62)",
            "(line 26,col 9)-(line 26,col 81)",
            "(line 27,col 9)-(line 27,col 105)",
            "(line 28,col 9)-(line 28,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.cglib.CGLIBHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/cglib/CGLIBHackerTest.java",
        "signature": "org.mockito.internal.creation.cglib.CGLIBHackerTest.shouldSetMockitoNamingPolicyEvenIfMethodProxyIsProxied()",
        "snippet": "    @Test\n    public void shouldSetMockitoNamingPolicyEvenIfMethodProxyIsProxied() throws Exception {\n        //given\n        MethodProxy proxiedMethodProxy = spy(new MethodProxyBuilder().build());\n        \n        //when\n        new CGLIBHacker().setMockitoNamingPolicy(proxiedMethodProxy);\n        \n        //then\n        Object createInfo = Whitebox.getInternalState(proxiedMethodProxy, \"createInfo\");\n        NamingPolicy namingPolicy = (NamingPolicy) Whitebox.getInternalState(createInfo, \"namingPolicy\");\n        assertEquals(namingPolicy, MockitoNamingPolicy.INSTANCE);\n    }",
        "begin_line": 31,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 79)",
            "(line 37,col 9)-(line 37,col 69)",
            "(line 40,col 9)-(line 40,col 88)",
            "(line 41,col 9)-(line 41,col 105)",
            "(line 42,col 9)-(line 42,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldCreateMockFromInterface()",
        "snippet": "    @Test\n    public void shouldCreateMockFromInterface() throws Exception {\n        SomeInterface proxy = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeInterface.class);\n        \n        Class superClass = proxy.getClass().getSuperclass();\n        assertEquals(Object.class, superClass);\n    }",
        "begin_line": 20,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 119)",
            "(line 24,col 9)-(line 24,col 60)",
            "(line 25,col 9)-(line 25,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldCreateMockFromClass()",
        "snippet": "    @Test\n    public void shouldCreateMockFromClass() throws Exception {\n        ClassWithoutConstructor proxy = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), ClassWithoutConstructor.class);\n        \n        Class superClass = proxy.getClass().getSuperclass();\n        assertEquals(ClassWithoutConstructor.class, superClass);\n    }",
        "begin_line": 28,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 139)",
            "(line 32,col 9)-(line 32,col 60)",
            "(line 33,col 9)-(line 33,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldCreateMockFromClassEvenWhenConstructorIsDodgy()",
        "snippet": "    @Test\n    public void shouldCreateMockFromClassEvenWhenConstructorIsDodgy() throws Exception {\n        try {\n            new ClassWithDodgyConstructor();\n            fail();\n        } catch (Exception e) {}\n        \n        ClassWithDodgyConstructor mock = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), ClassWithDodgyConstructor.class);\n        assertNotNull(mock);\n    }",
        "begin_line": 36,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 41,col 32)",
            "(line 43,col 9)-(line 43,col 142)",
            "(line 44,col 9)-(line 44,col 28)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldMocksHaveDifferentInterceptors()",
        "snippet": "    @Test \n    public void shouldMocksHaveDifferentInterceptors() throws Exception {\n        SomeClass mockOne = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class);\n        SomeClass mockTwo = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class);\n        \n        Factory cglibFactoryOne = (Factory) mockOne;\n        Factory cglibFactoryTwo = (Factory) mockTwo;\n        \n        assertNotSame(cglibFactoryOne.getCallback(0), cglibFactoryTwo.getCallback(0));\n    }",
        "begin_line": 47,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 113)",
            "(line 50,col 9)-(line 50,col 113)",
            "(line 52,col 9)-(line 52,col 52)",
            "(line 53,col 9)-(line 53,col 52)",
            "(line 55,col 9)-(line 55,col 86)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldUseAnicilliaryTypes()",
        "snippet": "    @Test\n    public void shouldUseAnicilliaryTypes() {}",
        "begin_line": 58,
        "end_line": 59,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.ClassWithDodgyConstructor.ClassWithDodgyConstructor()",
        "snippet": "        public ClassWithDodgyConstructor() {\n            throw new RuntimeException();\n        }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 13)-(line 75,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizerTest.MethodInterceptorStub.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            return null;\n        }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 13)-(line 82,col 24)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.ConfigurationAccess",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/ConfigurationAccess.java",
        "signature": "org.mockito.internal.configuration.ConfigurationAccess.getConfig()",
        "snippet": "    public static MockitoConfiguration getConfig() {\n        return (MockitoConfiguration) new GlobalConfiguration().getIt();\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java",
        "signature": "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest.shouldReadConfigurationClassFromClassPath()",
        "snippet": "    @Test\n    public void shouldReadConfigurationClassFromClassPath() {\n        ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) {\n                return \"foo\";\n            }});\n\n        IMethods mock = mock(IMethods.class); \n        assertEquals(\"foo\", mock.simpleMethod());\n    }",
        "begin_line": 17,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 22,col 16)",
            "(line 24,col 9)-(line 24,col 45)",
            "(line 25,col 9)-(line 25,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java",
        "signature": "org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest.Anonymous-ad5935cc-5919-4429-aa82-21972334fead.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) {\n                return \"foo\";\n            }});",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 17)-(line 21,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.DummyTest.dummy()",
        "snippet": "        @Test public void dummy() throws Exception {}",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.RunNotifierStub.addListener(org.junit.runner.notification.RunListener)",
        "snippet": "        @Override\n        public void addListener(RunListener listener) {\n            addedListeners.add(listener);\n        }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 13)-(line 35,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithDefaultRunner()",
        "snippet": "    @Test\n    public void shouldValidateWithDefaultRunner() throws Exception {\n        //given\n        runner = new MockitoJUnitRunner(DummyTest.class);\n\n        //when\n        runner.run(notifier);\n        \n        //then\n        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n    }",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 57)",
            "(line 45,col 9)-(line 45,col 29)",
            "(line 48,col 9)-(line 48,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithD44Runner()",
        "snippet": "    @Test\n    public void shouldValidateWithD44Runner() throws Exception {\n        //given\n        runner = new MockitoJUnit44Runner(DummyTest.class);\n\n        //when\n        runner.run(notifier);\n        \n        //then\n        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 59)",
            "(line 57,col 9)-(line 57,col 29)",
            "(line 60,col 9)-(line 60,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithVerboseRunner()",
        "snippet": "    @Test\n    public void shouldValidateWithVerboseRunner() throws Exception {\n        //given\n        runner = new ConsoleSpammingMockitoJUnitRunner(DummyTest.class);\n        \n        //when\n        runner.run(notifier);\n        \n        //then\n        assertEquals(2, notifier.addedListeners.size());\n        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n    }",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 72)",
            "(line 69,col 9)-(line 69,col 29)",
            "(line 72,col 9)-(line 72,col 56)",
            "(line 73,col 9)-(line 73,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.setup()",
        "snippet": "    @Before\n    public void setup() throws InitializationError {\n        loggerStub = new MockitoLoggerStub();\n        notifier = new RunNotifier();\n    }",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 45)",
            "(line 33,col 9)-(line 33,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldLogUnusedStubbingWarningWhenTestFails()",
        "snippet": "    @Test\n    public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            @Override\n            public void run(RunNotifier notifier) {\n                //this is what happens when the test runs:\n                //first, unused stubbing:\n                unusedStubbingThatQualifiesForWarning();\n                //then, let's make the test fail so that warnings are printed\n                notifier.fireTestFailure(null);\n                //assert\n                String loggedInfo = loggerStub.getLoggedInfo();\n                assertContains(\"[Mockito] Warning - this stub was not used\", loggedInfo);\n                assertContains(\"mock.simpleMethod(123);\", loggedInfo);\n                assertContains(\".unusedStubbingThatQualifiesForWarning(\", loggedInfo);\n            }\n        });\n        \n        runner.run(notifier);\n    }",
        "begin_line": 36,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 52,col 11)",
            "(line 54,col 9)-(line 54,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-590a6091-c63e-4e7c-99bf-8797f52a5786.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "            @Override\n            public void run(RunNotifier notifier) {\n                //this is what happens when the test runs:\n                //first, unused stubbing:\n                unusedStubbingThatQualifiesForWarning();\n                //then, let's make the test fail so that warnings are printed\n                notifier.fireTestFailure(null);\n                //assert\n                String loggedInfo = loggerStub.getLoggedInfo();\n                assertContains(\"[Mockito] Warning - this stub was not used\", loggedInfo);\n                assertContains(\"mock.simpleMethod(123);\", loggedInfo);\n                assertContains(\".unusedStubbingThatQualifiesForWarning(\", loggedInfo);\n            }",
        "begin_line": 39,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 43,col 17)-(line 43,col 56)",
            "(line 45,col 17)-(line 45,col 47)",
            "(line 47,col 17)-(line 47,col 63)",
            "(line 48,col 17)-(line 48,col 89)",
            "(line 49,col 17)-(line 49,col 70)",
            "(line 50,col 17)-(line 50,col 86)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldLogUnstubbedMethodWarningWhenTestFails()",
        "snippet": "    @Test\n    public void shouldLogUnstubbedMethodWarningWhenTestFails() throws Exception {\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            @Override\n            public void run(RunNotifier notifier) {\n                callUnstubbedMethodThatQualifiesForWarning();\n                notifier.fireTestFailure(null);\n\n                String loggedInfo = loggerStub.getLoggedInfo();\n                assertContains(\"[Mockito] Warning - this method was not stubbed\", loggedInfo);\n                assertContains(\"mock.simpleMethod(456);\", loggedInfo);\n                assertContains(\".callUnstubbedMethodThatQualifiesForWarning(\", loggedInfo);\n            }\n        });\n        \n        runner.run(notifier);\n    }",
        "begin_line": 57,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 70,col 11)",
            "(line 72,col 9)-(line 72,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-cad5a847-1f14-4a02-94a6-03e591cdc2f5.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "            @Override\n            public void run(RunNotifier notifier) {\n                callUnstubbedMethodThatQualifiesForWarning();\n                notifier.fireTestFailure(null);\n\n                String loggedInfo = loggerStub.getLoggedInfo();\n                assertContains(\"[Mockito] Warning - this method was not stubbed\", loggedInfo);\n                assertContains(\"mock.simpleMethod(456);\", loggedInfo);\n                assertContains(\".callUnstubbedMethodThatQualifiesForWarning(\", loggedInfo);\n            }",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 62,col 17)-(line 62,col 61)",
            "(line 63,col 17)-(line 63,col 47)",
            "(line 65,col 17)-(line 65,col 63)",
            "(line 66,col 17)-(line 66,col 94)",
            "(line 67,col 17)-(line 67,col 70)",
            "(line 68,col 17)-(line 68,col 91)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldLogStubCalledWithDifferentArgumentsWhenTestFails()",
        "snippet": "    @Test\n    public void shouldLogStubCalledWithDifferentArgumentsWhenTestFails() throws Exception {\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            @Override\n            public void run(RunNotifier notifier) {\n                someStubbing();\n                callStubbedMethodWithDifferentArgs();\n                notifier.fireTestFailure(null);\n                \n                String loggedInfo = loggerStub.getLoggedInfo();\n                assertContains(\"[Mockito] Warning - stubbed method called with different arguments\", loggedInfo);\n                assertContains(\"Stubbed this way:\", loggedInfo);\n                assertContains(\"mock.simpleMethod(789);\", loggedInfo);\n                assertContains(\".someStubbing(\", loggedInfo);\n                \n                assertContains(\"But called with different arguments:\", loggedInfo);\n                assertContains(\"mock.simpleMethod(10);\", loggedInfo);\n                assertContains(\".callStubbedMethodWithDifferentArgs(\", loggedInfo);\n            }\n        });\n        \n        runner.run(notifier);\n    }",
        "begin_line": 75,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 94,col 11)",
            "(line 96,col 9)-(line 96,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-03c26f98-ddff-4318-8495-25e78ccf4a17.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "            @Override\n            public void run(RunNotifier notifier) {\n                someStubbing();\n                callStubbedMethodWithDifferentArgs();\n                notifier.fireTestFailure(null);\n                \n                String loggedInfo = loggerStub.getLoggedInfo();\n                assertContains(\"[Mockito] Warning - stubbed method called with different arguments\", loggedInfo);\n                assertContains(\"Stubbed this way:\", loggedInfo);\n                assertContains(\"mock.simpleMethod(789);\", loggedInfo);\n                assertContains(\".someStubbing(\", loggedInfo);\n                \n                assertContains(\"But called with different arguments:\", loggedInfo);\n                assertContains(\"mock.simpleMethod(10);\", loggedInfo);\n                assertContains(\".callStubbedMethodWithDifferentArgs(\", loggedInfo);\n            }",
        "begin_line": 78,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 80,col 17)-(line 80,col 31)",
            "(line 81,col 17)-(line 81,col 53)",
            "(line 82,col 17)-(line 82,col 47)",
            "(line 84,col 17)-(line 84,col 63)",
            "(line 85,col 17)-(line 85,col 113)",
            "(line 86,col 17)-(line 86,col 64)",
            "(line 87,col 17)-(line 87,col 70)",
            "(line 88,col 17)-(line 88,col 61)",
            "(line 90,col 17)-(line 90,col 83)",
            "(line 91,col 17)-(line 91,col 69)",
            "(line 92,col 17)-(line 92,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldNotLogAnythingWhenStubCalledCorrectly()",
        "snippet": "    @Test\n    public void shouldNotLogAnythingWhenStubCalledCorrectly() throws Exception {\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            @Override\n            public void run(RunNotifier notifier) {\n                when(mock.simpleMethod(1)).thenReturn(\"foo\");\n                mock.simpleMethod(1);\n\n                notifier.fireTestFailure(null);\n                \n                assertEquals(\"\", loggerStub.getLoggedInfo());\n            }\n        });\n        \n        runner.run(notifier);\n    }",
        "begin_line": 99,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 111,col 11)",
            "(line 113,col 9)-(line 113,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-7a22e8e2-218e-40dd-bc2a-8b84c9e08cff.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "            @Override\n            public void run(RunNotifier notifier) {\n                when(mock.simpleMethod(1)).thenReturn(\"foo\");\n                mock.simpleMethod(1);\n\n                notifier.fireTestFailure(null);\n                \n                assertEquals(\"\", loggerStub.getLoggedInfo());\n            }",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 104,col 17)-(line 104,col 61)",
            "(line 105,col 17)-(line 105,col 37)",
            "(line 107,col 17)-(line 107,col 47)",
            "(line 109,col 17)-(line 109,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldNotLogWhenTestPasses()",
        "snippet": "    @Test\n    public void shouldNotLogWhenTestPasses() throws Exception {\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            @Override\n            public void run(RunNotifier notifier) {\n                when(mock.simpleMethod()).thenReturn(\"foo\");\n                \n                notifier.fireTestFinished(null);\n                \n                assertEquals(\"\", loggerStub.getLoggedInfo());\n            }\n        });\n        \n        runner.run(notifier);\n    }",
        "begin_line": 116,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 127,col 11)",
            "(line 129,col 9)-(line 129,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-739c996f-261c-409a-96da-b1c729a8eb50.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "            @Override\n            public void run(RunNotifier notifier) {\n                when(mock.simpleMethod()).thenReturn(\"foo\");\n                \n                notifier.fireTestFinished(null);\n                \n                assertEquals(\"\", loggerStub.getLoggedInfo());\n            }",
        "begin_line": 119,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 121,col 17)-(line 121,col 60)",
            "(line 123,col 17)-(line 123,col 48)",
            "(line 125,col 17)-(line 125,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldClearDebuggingDataAfterwards()",
        "snippet": "    public void shouldClearDebuggingDataAfterwards() throws Exception {\n        //given\n        final DebuggingInfo debuggingInfo = new ThreadSafeMockingProgress().getDebuggingInfo();\n\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            @Override\n            public void run(RunNotifier notifier) {\n                unusedStubbingThatQualifiesForWarning();\n                notifier.fireTestFailure(null);\n                assertTrue(debuggingInfo.hasData());\n            }\n        });\n        \n        //when\n        runner.run(notifier);\n        \n        //then\n        assertFalse(debuggingInfo.hasData());\n    }    ",
        "begin_line": 132,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 95)",
            "(line 136,col 9)-(line 143,col 11)",
            "(line 146,col 9)-(line 146,col 29)",
            "(line 149,col 9)-(line 149,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-bd4c0254-0723-4d87-abef-e3b91fa621c7.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "            @Override\n            public void run(RunNotifier notifier) {\n                unusedStubbingThatQualifiesForWarning();\n                notifier.fireTestFailure(null);\n                assertTrue(debuggingInfo.hasData());\n            }",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 139,col 17)-(line 139,col 56)",
            "(line 140,col 17)-(line 140,col 47)",
            "(line 141,col 17)-(line 141,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldDelegateToGetDescription()",
        "snippet": "    @Test\n    public void shouldDelegateToGetDescription() throws Exception {\n        //given\n        final Description expectedDescription = Description.createSuiteDescription(this.getClass());\n        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n            public Description getDescription() {\n                return expectedDescription;\n            }\n        });\n        \n        //when\n        Description description = runner.getDescription();\n        \n        //then\n        assertEquals(expectedDescription, description);\n    }",
        "begin_line": 152,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 100)",
            "(line 156,col 9)-(line 160,col 11)",
            "(line 163,col 9)-(line 163,col 58)",
            "(line 166,col 9)-(line 166,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-438888ee-785d-4d6f-ac3e-40fff5f19f91.getDescription()",
        "snippet": "            public Description getDescription() {\n                return expectedDescription;\n            }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 17)-(line 158,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.unusedStubbingThatQualifiesForWarning()",
        "snippet": "    private void unusedStubbingThatQualifiesForWarning() {\n        when(mock.simpleMethod(123)).thenReturn(\"foo\");\n    }",
        "begin_line": 169,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.callUnstubbedMethodThatQualifiesForWarning()",
        "snippet": "    private void callUnstubbedMethodThatQualifiesForWarning() {\n        mock.simpleMethod(456);\n    }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 31)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.someStubbing()",
        "snippet": "    private void someStubbing() {\n        when(mock.simpleMethod(789)).thenReturn(\"foo\");\n    }",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.callStubbedMethodWithDifferentArgs()",
        "snippet": "    private void callStubbedMethodWithDifferentArgs() {\n        mock.simpleMethod(10);\n    }",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.MockitoLoggerStub.log(java.lang.Object)",
        "snippet": "        public void log(Object what) {\n            super.log(what);\n            loggedInfo.append(what);\n        }",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 13)-(line 190,col 28)",
            "(line 191,col 13)-(line 191,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.MockitoLoggerStub.getLoggedInfo()",
        "snippet": "        public String getLoggedInfo() {\n            return loggedInfo.toString();\n        }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 195,col 13)-(line 195,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.RunnerImplStub.getDescription()",
        "snippet": "        public Description getDescription() {\n            return null;\n        }",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 13)-(line 202,col 24)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.RunnerImplStub.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "        public void run(RunNotifier notifier) {}",
        "begin_line": 205,
        "end_line": 205,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.RunnerImplStub.filter(org.junit.runner.manipulation.Filter)",
        "snippet": "        public void filter(org.junit.runner.manipulation.Filter filter) throws org.junit.runner.manipulation.NoTestsRemainException {}",
        "begin_line": 206,
        "end_line": 206,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.shouldLetPassingNullLastActualStackTrace()",
        "snippet": "    @Test(expected=TooLittleActualInvocations.class)\n    public void shouldLetPassingNullLastActualStackTrace() throws Exception {\n        new Reporter().tooLittleActualInvocations(new Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 119)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.PluralizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/PluralizerTest.java",
        "signature": "org.mockito.exceptions.PluralizerTest.shouldGetPluralizedNumber()",
        "snippet": "    @Test\n    public void shouldGetPluralizedNumber() {\n        new Pluralizer();\n        assertEquals(\"0 times\", Pluralizer.pluralize(0));\n        assertEquals(\"1 time\", Pluralizer.pluralize(1));\n        assertEquals(\"2 times\", Pluralizer.pluralize(2));\n        assertEquals(\"20 times\", Pluralizer.pluralize(20));\n    }",
        "begin_line": 12,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 25)",
            "(line 15,col 9)-(line 15,col 57)",
            "(line 16,col 9)-(line 16,col 56)",
            "(line 17,col 9)-(line 17,col 57)",
            "(line 18,col 9)-(line 18,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoExceptionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoExceptionTest.java",
        "signature": "org.mockito.exceptions.base.MockitoExceptionTest.throwIt()",
        "snippet": "    private void throwIt() {\n        throw new MockitoException(\"boom\");\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "child_ranges": [
            "(line 13,col 9)-(line 13,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoExceptionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoExceptionTest.java",
        "signature": "org.mockito.exceptions.base.MockitoExceptionTest.shouldKeepUnfilteredStackTrace()",
        "snippet": "    @Test\n    public void shouldKeepUnfilteredStackTrace() {\n        try {\n            throwIt();\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n        }\n    }",
        "begin_line": 16,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 23,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.toThrowable()",
        "snippet": "    public Throwable toThrowable() {\n        RuntimeException exception = new RuntimeException();\n        exception.setStackTrace(toTraceArray());\n        return exception;\n    }",
        "begin_line": 16,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 60)",
            "(line 18,col 9)-(line 18,col 48)",
            "(line 19,col 9)-(line 19,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.toTraceList()",
        "snippet": "    private List<StackTraceElement> toTraceList() {\n        assert methods.length == 0 || classes.length == 0;\n        \n        List<StackTraceElement> trace = new LinkedList<StackTraceElement>();\n        for (String method : methods) {\n            trace.add(new StackTraceElement(\"SomeClass\", method, \"SomeClass.java\", 50));\n        }\n        for (String clazz : classes) {\n            trace.add(new StackTraceElement(clazz, \"someMethod\", clazz + \".java\", 50));\n        }\n        \n        Collections.reverse(trace);\n        return trace;\n    }",
        "begin_line": 22,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 58)",
            "(line 25,col 9)-(line 25,col 76)",
            "(line 26,col 9)-(line 28,col 9)",
            "(line 29,col 9)-(line 31,col 9)",
            "(line 33,col 9)-(line 33,col 35)",
            "(line 34,col 9)-(line 34,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.toTraceArray()",
        "snippet": "    public StackTraceElement[] toTraceArray() {\n        return toTraceList().toArray(new StackTraceElement[0]);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.classes(java.lang.String...)",
        "snippet": "    public TraceBuilder classes(String ... classes) {\n        this.classes = classes;\n        return this;\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 31)",
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.methods(java.lang.String...)",
        "snippet": "    public TraceBuilder methods(String ... methods) {\n        this.methods = methods;\n        return this;\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 31)",
            "(line 48,col 9)-(line 48,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoAssertionErrorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java",
        "signature": "org.mockito.exceptions.base.MockitoAssertionErrorTest.throwIt()",
        "snippet": "    private void throwIt() {\n        throw new MockitoAssertionError(\"boom\");\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "child_ranges": [
            "(line 13,col 9)-(line 13,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoAssertionErrorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java",
        "signature": "org.mockito.exceptions.base.MockitoAssertionErrorTest.shouldKeepUnfilteredStackTrace()",
        "snippet": "    @Test\n    public void shouldKeepUnfilteredStackTrace() {\n        try {\n            throwIt();\n            fail();\n        } catch (MockitoAssertionError e) {\n            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n        }\n    }",
        "begin_line": 16,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 23,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.StackTraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/StackTraceBuilder.java",
        "signature": "org.mockito.exceptions.base.StackTraceBuilder.methods(java.lang.String...)",
        "snippet": "    public StackTraceBuilder methods(String ... methods) {\n        this.methods = methods;\n        return this;\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 31)",
            "(line 16,col 9)-(line 16,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.StackTraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/StackTraceBuilder.java",
        "signature": "org.mockito.exceptions.base.StackTraceBuilder.toStackTrace()",
        "snippet": "    public StackTraceElement[] toStackTrace() {\n        StackTraceElement[] trace = new StackTraceElement[methods.length];\n        \n        for (int i = 0; i < methods.length; i++) {\n            trace[i] = new StackTraceElement(\"DummyClass\", methods[i], \"DummyClass.java\", 100);\n        }\n        \n        return trace;\n    }",
        "begin_line": 19,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 74)",
            "(line 22,col 9)-(line 24,col 9)",
            "(line 26,col 9)-(line 26,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.StackTraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/StackTraceBuilder.java",
        "signature": "org.mockito.exceptions.base.StackTraceBuilder.toStackTraceList()",
        "snippet": "    public List<StackTraceElement> toStackTraceList() {\n        return Arrays.asList(toStackTrace());\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.util.MockitoLoggerStub",
        "child_classes": [],
        "src_path": "test/org/mockito/util/MockitoLoggerStub.java",
        "signature": "org.mockito.util.MockitoLoggerStub.log(java.lang.Object)",
        "snippet": "        public void log(Object what) {\n//            can be uncommented when debugging this test\n//            super.log(what);\n            loggedInfo.append(what);\n        }",
        "begin_line": 13,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 13)-(line 16,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.util.MockitoLoggerStub",
        "child_classes": [],
        "src_path": "test/org/mockito/util/MockitoLoggerStub.java",
        "signature": "org.mockito.util.MockitoLoggerStub.getLoggedInfo()",
        "snippet": "        public String getLoggedInfo() {\n            return loggedInfo.toString();\n        }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 13)-(line 20,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.overrideDefaultAnswer(org.mockito.stubbing.Answer<java.lang.Object>)",
        "snippet": "    public void overrideDefaultAnswer(Answer<Object> defaultAnswer) {\n        this.overriddenDefaultAnswer = defaultAnswer;\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "for testing purposes, allow to override the configuration",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.overrideCleansStackTrace(boolean)",
        "snippet": "    public void overrideCleansStackTrace(boolean cleansStackTrace) {\n        this.cleansStackTrace = cleansStackTrace;\n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "for testing purposes, allow to override the configuration",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.getDefaultAnswer()",
        "snippet": "    @Override\n    public Answer<Object> getDefaultAnswer() {\n        if (overriddenDefaultAnswer == null) {\n            return super.getDefaultAnswer();\n        } else {\n            return overriddenDefaultAnswer;\n        }\n    }",
        "begin_line": 30,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 36,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.getAnnotationEngine()",
        "snippet": "    @Override\n    public AnnotationEngine getAnnotationEngine() {\n        return new DefaultAnnotationEngine() {\n            @Override\n            public Object createMockFor(Annotation annotation, Field field) {\n                if (annotation instanceof SmartMock) {\n                    return Mockito.mock(field.getType(), Mockito.RETURNS_SMART_NULLS);\n                } else {\n                    return super.createMockFor(annotation, field);\n                }\n            }\n        };\n    }",
        "begin_line": 39,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 50,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.Anonymous-38e5b823-d82d-4417-9017-cfd94c679e85.createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)",
        "snippet": "            @Override\n            public Object createMockFor(Annotation annotation, Field field) {\n                if (annotation instanceof SmartMock) {\n                    return Mockito.mock(field.getType(), Mockito.RETURNS_SMART_NULLS);\n                } else {\n                    return super.createMockFor(annotation, field);\n                }\n            }",
        "begin_line": 42,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 17)-(line 48,col 17)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.cleansStackTrace()",
        "snippet": "    @Override\n    public boolean cleansStackTrace() {\n        return cleansStackTrace;\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 32)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.AllTestsRunner.run()",
        "snippet": "        public void run() {\n            Result result = JUnitCore.runClasses(\n                    EqualsTest.class,\n                    ListUtilTest.class,\n                    MockingProgressImplTest.class,\n                    TimesTest.class,\n                    MockHandlerTest.class,\n                    AllInvocationsFinderTest.class,\n                    ReturnsEmptyValuesTest.class,\n                    NumberOfInvocationsCheckerTest.class,\n                    RegisteredInvocationsTest.class,\n                    MissingInvocationCheckerTest.class,\n                    NumberOfInvocationsInOrderCheckerTest.class,\n                    MissingInvocationInOrderCheckerTest.class,\n                    ClassImposterizerTest.class,\n                    InvocationMatcherTest.class,\n                    InvocationsFinderTest.class,\n                    InvocationTest.class,\n                    MockitoTest.class,\n                    MockUtilTest.class,\n                    ReporterTest.class,\n                    MockitoAssertionErrorTest.class,\n                    MockitoExceptionTest.class,\n                    StackTraceFilteringTest.class,\n                    BridgeMethodPuzzleTest.class,\n                    OverloadingPuzzleTest.class,\n                    InvalidUsageTest.class,\n                    UsingVarargsTest.class,\n                    CustomMatchersTest.class,\n                    ComparableMatchersTest.class,\n                    InvalidUseOfMatchersTest.class,\n                    MatchersTest.class,\n                    MatchersToStringTest.class,\n                    VerificationAndStubbingUsingMatchersTest.class,\n                    BasicStubbingTest.class,\n                    ReturningDefaultValuesTest.class,\n                    StubbingWithThrowablesTest.class,\n                    AtMostXVerificationTest.class,\n                    BasicVerificationTest.class,\n                    ExactNumberOfTimesVerificationTest.class,\n                    VerificationInOrderTest.class,\n                    NoMoreInteractionsVerificationTest.class,\n                    SelectedMocksInOrderVerificationTest.class,\n                    VerificationOnMultipleMocksUsingMatchersTest.class,\n                    VerificationUsingMatchersTest.class,\n                    RelaxedVerificationInOrderTest.class,\n                    DescriptiveMessagesWhenVerificationFailsTest.class,\n                    DescriptiveMessagesWhenTimesXVerificationFailsTest.class,\n                    BasicVerificationInOrderTest.class,\n                    VerificationInOrderMixedWithOrdiraryVerificationTest.class,\n                    DescriptiveMessagesOnVerificationInOrderErrorsTest.class,\n                    InvalidStateDetectionTest.class,\n                    ReplacingObjectMethodsTest.class,\n                    ClickableStackTracesTest.class,\n                    ExampleTest.class,\n                    PointingStackTraceToActualInvocationTest.class,\n                    VerificationInOrderFromMultipleThreadsTest.class,\n                    ResetTest.class\n                );\n                \n                if (!result.wasSuccessful()) {\n                    System.err.println(\"Thread[\" + Thread.currentThread().getId() + \"]: error!\");\n                    List<Failure> failures = result.getFailures();\n                    System.err.println(failures.size());\n                    for (Failure failure : failures) {\n                        System.err.println(failure.getTrace());\n                        failed = true;\n                    }\n                }\n        }",
        "begin_line": 76,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 77,col 13)-(line 134,col 18)",
            "(line 136,col 17)-(line 144,col 17)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.AllTestsRunner.isFailed()",
        "snippet": "        public boolean isFailed() {\n            return failed;\n        }",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 13)-(line 148,col 26)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.shouldRunInMultipleThreads()",
        "snippet": "    @Test\n    public void shouldRunInMultipleThreads() {}",
        "begin_line": 152,
        "end_line": 153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.runInMultipleThreads(int)",
        "snippet": "    public static boolean runInMultipleThreads(int numberOfThreads) throws Exception {\n        List<AllTestsRunner> threads = new LinkedList<AllTestsRunner>();\n        for (int i = 1; i <= numberOfThreads; i++) {\n            threads.add(new AllTestsRunner());\n        }\n\n        for (Thread t : threads) {\n            t.start();\n        }\n\n        boolean failed = false;\n        for (AllTestsRunner t : threads) {\n            t.join();\n            failed = failed ? true : t.isFailed();\n        }\n        \n        return failed;\n    }",
        "begin_line": 161,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 72)",
            "(line 163,col 9)-(line 165,col 9)",
            "(line 167,col 9)-(line 169,col 9)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 172,col 9)-(line 175,col 9)",
            "(line 177,col 9)-(line 177,col 22)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) throws Exception {\n        int numberOfThreads = 20; \n        long before = System.currentTimeMillis();\n        runInMultipleThreads(numberOfThreads);\n        long after = System.currentTimeMillis();\n        long executionTime = (after-before)/1000;\n        System.out.println(\"Finished tests in \" + numberOfThreads + \" threads in \" + executionTime + \" seconds.\");\n    }",
        "begin_line": 180,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 33)",
            "(line 182,col 9)-(line 182,col 49)",
            "(line 183,col 9)-(line 183,col 46)",
            "(line 184,col 9)-(line 184,col 48)",
            "(line 185,col 9)-(line 185,col 49)",
            "(line 186,col 9)-(line 186,col 114)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsStubSharedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsStubSharedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsStubSharedMockTest.shouldStubFineConcurrently()",
        "snippet": "    @Ignore(\"stubbing from multiple threads is not supported\")\n    @Test\n    public void shouldStubFineConcurrently() throws Exception {\n        for(int i = 0; i < 100; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 18,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 23,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsStubSharedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsStubSharedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsStubSharedMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock = mock(IMethods.class);\n        final Thread[] listeners = new Thread[3];\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i] = new Thread() {\n                @SuppressWarnings(\"deprecation\")\n                @Override\n                public void run() {\n                    when(mock.simpleMethod(getId()))\n                        .thenReturn(getId() + \"\")\n                        .thenReturn(\"foo\")\n                        .thenReturn(\"bar\");\n                        \n                    stubVoid(mock)\n                        .toThrow(new RuntimeException(getId() + \"\"))\n                        .toReturn()\n                        .toThrow(new RuntimeException())\n                        .on().differentMethod();\n                }\n            };\n            listeners[i].start();\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n    }",
        "begin_line": 26,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 36)",
            "(line 28,col 9)-(line 28,col 49)",
            "(line 29,col 9)-(line 47,col 9)",
            "(line 48,col 9)-(line 50,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsStubSharedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsStubSharedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsStubSharedMockTest.Anonymous-8428800c-083b-4037-9f92-ab5ff3a482cd.run()",
        "snippet": "                @SuppressWarnings(\"deprecation\")\n                @Override\n                public void run() {\n                    when(mock.simpleMethod(getId()))\n                        .thenReturn(getId() + \"\")\n                        .thenReturn(\"foo\")\n                        .thenReturn(\"bar\");\n                        \n                    stubVoid(mock)\n                        .toThrow(new RuntimeException(getId() + \"\"))\n                        .toReturn()\n                        .toThrow(new RuntimeException())\n                        .on().differentMethod();\n                }",
        "begin_line": 31,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 21)-(line 37,col 43)",
            "(line 39,col 21)-(line 43,col 48)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.shouldVerifyInOrderWhenMultipleThreadsInteractWithMock()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderWhenMultipleThreadsInteractWithMock() throws Exception {\n        final Foo testInf = mock(Foo.class);\n        \n        Thread threadOne = new Thread(new Runnable(){\n            public void run() {\n                testInf.methodOne();\n            }\n        });\n        threadOne.start();\n        threadOne.join();\n        \n        Thread threadTwo = new Thread(new Runnable(){\n            public void run() {\n                testInf.methodTwo();\n            }\n        });\n        threadTwo.start();\n        threadTwo.join();\n        \n        InOrder inOrder = inOrder(testInf);\n        inOrder.verify(testInf).methodOne();\n        inOrder.verify(testInf).methodTwo();\n    }",
        "begin_line": 14,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 44)",
            "(line 18,col 9)-(line 22,col 11)",
            "(line 23,col 9)-(line 23,col 26)",
            "(line 24,col 9)-(line 24,col 25)",
            "(line 26,col 9)-(line 30,col 11)",
            "(line 31,col 9)-(line 31,col 26)",
            "(line 32,col 9)-(line 32,col 25)",
            "(line 34,col 9)-(line 34,col 43)",
            "(line 35,col 9)-(line 35,col 44)",
            "(line 36,col 9)-(line 36,col 44)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Anonymous-f6c30f9b-81ab-4e27-9c39-4ba11e3530fa.run()",
        "snippet": "            public void run() {\n                testInf.methodOne();\n            }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 17)-(line 20,col 36)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Anonymous-af9838e8-3f84-45cb-a6d9-cae273208177.run()",
        "snippet": "            public void run() {\n                testInf.methodTwo();\n            }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 17)-(line 28,col 36)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Foo.methodOne()",
        "snippet": "        void methodOne();",
        "begin_line": 40,
        "end_line": 40,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Foo.methodTwo()",
        "snippet": "        void methodTwo();",
        "begin_line": 41,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareAMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareAMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareAMockTest.shouldAllowVerifyingInThreads()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInThreads() throws Exception {\n        for(int i = 0; i < 100; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 21,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareAMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareAMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareAMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock = mock(IMethods.class);\n        final Thread[] listeners = new Thread[3];\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i] = new Thread() {\n                @Override\n                public void run() {\n                    mock.simpleMethod(\"foo\");\n                }\n            };\n            listeners[i].start();\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n        verify(mock, times(listeners.length)).simpleMethod(\"foo\");\n    }",
        "begin_line": 24,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 36)",
            "(line 26,col 9)-(line 26,col 49)",
            "(line 27,col 9)-(line 35,col 9)",
            "(line 36,col 9)-(line 38,col 9)",
            "(line 39,col 9)-(line 39,col 66)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareAMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareAMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareAMockTest.Anonymous-548b3c5e-d3c0-4591-bec2-cda1b331a50d.run()",
        "snippet": "                @Override\n                public void run() {\n                    mock.simpleMethod(\"foo\");\n                }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 21)-(line 31,col 45)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java",
        "signature": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.shouldAllowVerifyingInThreads()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInThreads() throws Exception {\n        for(int i = 0; i < 100; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 19,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 23,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java",
        "signature": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock.simpleMethod();\n        final Thread[] listeners = new Thread[2];\n        for (int i = 0; i < listeners.length; i++) {\n            final int x = i;\n            listeners[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(x * 10);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    mock.simpleMethod();\n                }\n            };\n            listeners[i].start();\n        }\n        \n        verify(mock, atLeastOnce()).simpleMethod();\n        \n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n    }",
        "begin_line": 26,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 28)",
            "(line 28,col 9)-(line 28,col 49)",
            "(line 29,col 9)-(line 43,col 9)",
            "(line 45,col 9)-(line 45,col 51)",
            "(line 47,col 9)-(line 49,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java",
        "signature": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.Anonymous-902c5efd-0f76-4892-a3d8-9c73ba19118f.run()",
        "snippet": "                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(x * 10);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    mock.simpleMethod();\n                }",
        "begin_line": 32,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 34,col 21)-(line 38,col 21)",
            "(line 39,col 21)-(line 39,col 40)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.shouldAllowVerifyingInThreads()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInThreads() throws Exception {\n        for(int i = 0; i < 50; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 19,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 23,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock = mock(IMethods.class);\n        \n        when(mock.simpleMethod(\"foo\"))\n            .thenReturn(\"foo\")\n            .thenReturn(\"bar\")\n            .thenReturn(\"baz\")\n            .thenReturn(\"foo\")\n            .thenReturn(\"bar\")\n            .thenReturn(\"baz\");\n        \n        final Thread[] listeners = new Thread[100];\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n            listeners[i].start();\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n    }",
        "begin_line": 26,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 36)",
            "(line 29,col 9)-(line 35,col 31)",
            "(line 37,col 9)-(line 37,col 51)",
            "(line 38,col 9)-(line 55,col 9)",
            "(line 56,col 9)-(line 58,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.Anonymous-9401c3ed-be78-446d-b6a9-cf1153dc9e57.run()",
        "snippet": "                @Override\n                public void run() {\n                    try {\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }",
        "begin_line": 40,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 42,col 21)-(line 51,col 21)"
        ]
    }
]