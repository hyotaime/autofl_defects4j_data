{
  "filepath": "/tmp/Chart-16b/tests/org/jfree/chart/plot/junit/XYPlotTests.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYPlotTests",
      "is_interface": false,
      "parent_types": [
        "TestCase"
      ],
      "begin_line": 104,
      "end_line": 966,
      "comment": "\n * Tests for the {@link XYPlot} class.\n "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
      "begin_line": 111,
      "end_line": 113,
      "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
      "child_ranges": [
        "(line 112,col 9)-(line 112,col 48)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
      "begin_line": 120,
      "end_line": 122,
      "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
      "child_ranges": [
        "(line 121,col 9)-(line 121,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
      "begin_line": 138,
      "end_line": 375,
      "comment": "\n     * Some checks for the equals() method.\n     ",
      "child_ranges": [
        "(line 140,col 9)-(line 140,col 36)",
        "(line 141,col 9)-(line 141,col 36)",
        "(line 142,col 9)-(line 142,col 40)",
        "(line 145,col 9)-(line 145,col 57)",
        "(line 146,col 9)-(line 146,col 41)",
        "(line 147,col 9)-(line 147,col 57)",
        "(line 148,col 9)-(line 148,col 40)",
        "(line 151,col 9)-(line 151,col 73)",
        "(line 152,col 9)-(line 152,col 41)",
        "(line 153,col 9)-(line 153,col 73)",
        "(line 154,col 9)-(line 154,col 40)",
        "(line 157,col 9)-(line 157,col 59)",
        "(line 158,col 9)-(line 158,col 41)",
        "(line 159,col 9)-(line 159,col 59)",
        "(line 160,col 9)-(line 160,col 40)",
        "(line 163,col 9)-(line 163,col 63)",
        "(line 164,col 9)-(line 164,col 41)",
        "(line 165,col 9)-(line 165,col 63)",
        "(line 166,col 9)-(line 166,col 40)",
        "(line 169,col 9)-(line 169,col 73)",
        "(line 170,col 9)-(line 170,col 41)",
        "(line 171,col 9)-(line 171,col 73)",
        "(line 172,col 9)-(line 172,col 40)",
        "(line 175,col 9)-(line 175,col 67)",
        "(line 176,col 9)-(line 176,col 41)",
        "(line 177,col 9)-(line 177,col 67)",
        "(line 178,col 9)-(line 178,col 40)",
        "(line 181,col 9)-(line 181,col 57)",
        "(line 182,col 9)-(line 182,col 41)",
        "(line 183,col 9)-(line 183,col 57)",
        "(line 184,col 9)-(line 184,col 40)",
        "(line 187,col 9)-(line 187,col 62)",
        "(line 188,col 9)-(line 188,col 41)",
        "(line 189,col 9)-(line 189,col 62)",
        "(line 190,col 9)-(line 190,col 40)",
        "(line 193,col 9)-(line 193,col 71)",
        "(line 194,col 9)-(line 194,col 41)",
        "(line 195,col 9)-(line 195,col 71)",
        "(line 196,col 9)-(line 196,col 40)",
        "(line 199,col 9)-(line 199,col 66)",
        "(line 200,col 9)-(line 200,col 41)",
        "(line 201,col 9)-(line 201,col 66)",
        "(line 202,col 9)-(line 202,col 40)",
        "(line 205,col 9)-(line 205,col 45)",
        "(line 206,col 9)-(line 206,col 41)",
        "(line 207,col 9)-(line 207,col 45)",
        "(line 208,col 9)-(line 208,col 40)",
        "(line 211,col 9)-(line 211,col 44)",
        "(line 212,col 9)-(line 212,col 41)",
        "(line 213,col 9)-(line 213,col 44)",
        "(line 214,col 9)-(line 214,col 40)",
        "(line 217,col 9)-(line 217,col 55)",
        "(line 218,col 9)-(line 218,col 41)",
        "(line 219,col 9)-(line 219,col 55)",
        "(line 220,col 9)-(line 220,col 40)",
        "(line 223,col 9)-(line 223,col 59)",
        "(line 224,col 9)-(line 224,col 41)",
        "(line 225,col 9)-(line 225,col 59)",
        "(line 226,col 9)-(line 226,col 40)",
        "(line 229,col 9)-(line 229,col 47)",
        "(line 230,col 9)-(line 230,col 41)",
        "(line 231,col 9)-(line 231,col 47)",
        "(line 232,col 9)-(line 232,col 40)",
        "(line 235,col 9)-(line 235,col 46)",
        "(line 236,col 9)-(line 236,col 46)",
        "(line 237,col 9)-(line 237,col 41)",
        "(line 238,col 9)-(line 238,col 46)",
        "(line 239,col 9)-(line 239,col 40)",
        "(line 242,col 9)-(line 243,col 40)",
        "(line 244,col 9)-(line 244,col 41)",
        "(line 245,col 9)-(line 246,col 40)",
        "(line 247,col 9)-(line 247,col 40)",
        "(line 250,col 9)-(line 250,col 46)",
        "(line 251,col 9)-(line 251,col 41)",
        "(line 252,col 9)-(line 252,col 46)",
        "(line 253,col 9)-(line 253,col 40)",
        "(line 256,col 9)-(line 256,col 45)",
        "(line 257,col 9)-(line 257,col 41)",
        "(line 258,col 9)-(line 258,col 45)",
        "(line 259,col 9)-(line 259,col 40)",
        "(line 262,col 9)-(line 263,col 40)",
        "(line 264,col 9)-(line 264,col 41)",
        "(line 265,col 9)-(line 266,col 40)",
        "(line 267,col 9)-(line 267,col 40)",
        "(line 270,col 9)-(line 270,col 48)",
        "(line 271,col 9)-(line 271,col 41)",
        "(line 272,col 9)-(line 272,col 48)",
        "(line 273,col 9)-(line 273,col 40)",
        "(line 276,col 9)-(line 276,col 49)",
        "(line 277,col 9)-(line 277,col 41)",
        "(line 278,col 9)-(line 278,col 49)",
        "(line 279,col 9)-(line 279,col 40)",
        "(line 282,col 9)-(line 283,col 40)",
        "(line 284,col 9)-(line 284,col 41)",
        "(line 285,col 9)-(line 286,col 40)",
        "(line 287,col 9)-(line 287,col 40)",
        "(line 290,col 9)-(line 290,col 45)",
        "(line 291,col 9)-(line 291,col 41)",
        "(line 292,col 9)-(line 292,col 45)",
        "(line 293,col 9)-(line 293,col 40)",
        "(line 296,col 9)-(line 296,col 44)",
        "(line 297,col 9)-(line 297,col 41)",
        "(line 298,col 9)-(line 298,col 44)",
        "(line 299,col 9)-(line 299,col 40)",
        "(line 302,col 9)-(line 302,col 46)",
        "(line 303,col 9)-(line 303,col 41)",
        "(line 304,col 9)-(line 304,col 46)",
        "(line 305,col 9)-(line 305,col 40)",
        "(line 308,col 9)-(line 309,col 40)",
        "(line 310,col 9)-(line 310,col 41)",
        "(line 311,col 9)-(line 312,col 40)",
        "(line 313,col 9)-(line 313,col 40)",
        "(line 316,col 9)-(line 316,col 51)",
        "(line 317,col 9)-(line 317,col 41)",
        "(line 318,col 9)-(line 318,col 51)",
        "(line 319,col 9)-(line 319,col 40)",
        "(line 322,col 9)-(line 322,col 51)",
        "(line 323,col 9)-(line 323,col 41)",
        "(line 324,col 9)-(line 324,col 51)",
        "(line 325,col 9)-(line 325,col 40)",
        "(line 328,col 9)-(line 328,col 72)",
        "(line 329,col 9)-(line 329,col 41)",
        "(line 330,col 9)-(line 330,col 72)",
        "(line 331,col 9)-(line 331,col 40)",
        "(line 333,col 9)-(line 333,col 73)",
        "(line 334,col 9)-(line 334,col 41)",
        "(line 335,col 9)-(line 335,col 73)",
        "(line 336,col 9)-(line 336,col 40)",
        "(line 339,col 9)-(line 339,col 27)",
        "(line 340,col 9)-(line 340,col 41)",
        "(line 341,col 9)-(line 341,col 27)",
        "(line 342,col 9)-(line 342,col 40)",
        "(line 345,col 9)-(line 345,col 64)",
        "(line 346,col 9)-(line 346,col 41)",
        "(line 347,col 9)-(line 347,col 64)",
        "(line 348,col 9)-(line 348,col 40)",
        "(line 351,col 9)-(line 352,col 41)",
        "(line 353,col 9)-(line 353,col 41)",
        "(line 354,col 9)-(line 355,col 41)",
        "(line 356,col 9)-(line 356,col 40)",
        "(line 357,col 9)-(line 358,col 41)",
        "(line 359,col 9)-(line 359,col 41)",
        "(line 360,col 9)-(line 361,col 41)",
        "(line 362,col 9)-(line 362,col 40)",
        "(line 363,col 9)-(line 364,col 41)",
        "(line 365,col 9)-(line 365,col 41)",
        "(line 366,col 9)-(line 367,col 41)",
        "(line 368,col 9)-(line 368,col 40)",
        "(line 369,col 9)-(line 370,col 41)",
        "(line 371,col 9)-(line 371,col 41)",
        "(line 372,col 9)-(line 373,col 41)",
        "(line 374,col 9)-(line 374,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
      "begin_line": 380,
      "end_line": 392,
      "comment": "\n     * Confirm that basic cloning works.\n     ",
      "child_ranges": [
        "(line 381,col 9)-(line 381,col 33)",
        "(line 382,col 9)-(line 382,col 25)",
        "(line 383,col 9)-(line 388,col 9)",
        "(line 389,col 9)-(line 389,col 29)",
        "(line 390,col 9)-(line 390,col 51)",
        "(line 391,col 9)-(line 391,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
      "begin_line": 397,
      "end_line": 412,
      "comment": "\n     * Tests cloning for a more complex plot.\n     ",
      "child_ranges": [
        "(line 398,col 9)-(line 399,col 76)",
        "(line 400,col 9)-(line 400,col 59)",
        "(line 401,col 9)-(line 401,col 47)",
        "(line 402,col 9)-(line 402,col 25)",
        "(line 403,col 9)-(line 408,col 9)",
        "(line 409,col 9)-(line 409,col 29)",
        "(line 410,col 9)-(line 410,col 51)",
        "(line 411,col 9)-(line 411,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
      "begin_line": 417,
      "end_line": 432,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 418,col 9)-(line 418,col 33)",
        "(line 419,col 9)-(line 419,col 49)",
        "(line 420,col 9)-(line 420,col 32)",
        "(line 421,col 9)-(line 421,col 25)",
        "(line 422,col 9)-(line 427,col 9)",
        "(line 428,col 9)-(line 428,col 29)",
        "(line 429,col 9)-(line 429,col 51)",
        "(line 430,col 9)-(line 430,col 34)",
        "(line 431,col 9)-(line 431,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
      "begin_line": 437,
      "end_line": 457,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 438,col 9)-(line 438,col 33)",
        "(line 439,col 9)-(line 440,col 41)",
        "(line 441,col 9)-(line 441,col 25)",
        "(line 442,col 9)-(line 447,col 9)",
        "(line 448,col 9)-(line 448,col 29)",
        "(line 449,col 9)-(line 449,col 51)",
        "(line 450,col 9)-(line 450,col 34)",
        "(line 453,col 9)-(line 453,col 42)",
        "(line 454,col 9)-(line 454,col 35)",
        "(line 455,col 9)-(line 455,col 42)",
        "(line 456,col 9)-(line 456,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
      "begin_line": 462,
      "end_line": 520,
      "comment": "\n     * Tests the independence of the clones.\n     ",
      "child_ranges": [
        "(line 463,col 9)-(line 464,col 76)",
        "(line 465,col 9)-(line 465,col 61)",
        "(line 466,col 9)-(line 466,col 65)",
        "(line 467,col 9)-(line 467,col 59)",
        "(line 468,col 9)-(line 468,col 62)",
        "(line 469,col 9)-(line 469,col 47)",
        "(line 470,col 9)-(line 470,col 25)",
        "(line 471,col 9)-(line 477,col 9)",
        "(line 478,col 9)-(line 478,col 34)",
        "(line 480,col 9)-(line 480,col 45)",
        "(line 481,col 9)-(line 481,col 35)",
        "(line 482,col 9)-(line 482,col 45)",
        "(line 483,col 9)-(line 483,col 34)",
        "(line 485,col 9)-(line 485,col 43)",
        "(line 486,col 9)-(line 486,col 35)",
        "(line 487,col 9)-(line 487,col 43)",
        "(line 488,col 9)-(line 488,col 34)",
        "(line 490,col 9)-(line 490,col 63)",
        "(line 491,col 9)-(line 491,col 35)",
        "(line 492,col 9)-(line 492,col 63)",
        "(line 493,col 9)-(line 493,col 34)",
        "(line 495,col 9)-(line 495,col 40)",
        "(line 496,col 9)-(line 496,col 35)",
        "(line 497,col 9)-(line 497,col 40)",
        "(line 498,col 9)-(line 498,col 34)",
        "(line 500,col 9)-(line 500,col 44)",
        "(line 501,col 9)-(line 501,col 35)",
        "(line 502,col 9)-(line 502,col 44)",
        "(line 503,col 9)-(line 503,col 34)",
        "(line 505,col 9)-(line 505,col 42)",
        "(line 506,col 9)-(line 506,col 35)",
        "(line 507,col 9)-(line 507,col 42)",
        "(line 508,col 9)-(line 508,col 34)",
        "(line 510,col 9)-(line 510,col 61)",
        "(line 511,col 9)-(line 511,col 35)",
        "(line 512,col 9)-(line 512,col 61)",
        "(line 513,col 9)-(line 513,col 34)",
        "(line 515,col 9)-(line 515,col 39)",
        "(line 516,col 9)-(line 516,col 35)",
        "(line 517,col 9)-(line 517,col 39)",
        "(line 518,col 9)-(line 518,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
      "begin_line": 526,
      "end_line": 537,
      "comment": "\n     * Setting a null renderer should be allowed, but is generating a null \n     * pointer exception in 0.9.7.\n     ",
      "child_ranges": [
        "(line 527,col 9)-(line 527,col 31)",
        "(line 528,col 9)-(line 535,col 9)",
        "(line 536,col 9)-(line 536,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
      "begin_line": 542,
      "end_line": 568,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
      "child_ranges": [
        "(line 544,col 9)-(line 544,col 50)",
        "(line 545,col 9)-(line 545,col 57)",
        "(line 546,col 9)-(line 546,col 55)",
        "(line 547,col 9)-(line 547,col 71)",
        "(line 548,col 9)-(line 548,col 70)",
        "(line 549,col 9)-(line 549,col 25)",
        "(line 551,col 9)-(line 565,col 9)",
        "(line 566,col 9)-(line 566,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
      "begin_line": 580,
      "end_line": 622,
      "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported \n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null \n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop, \n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty \n     * lists in the constructor) not being initialized by the readObject() \n     * method following deserialization.  This test has been written to \n     * reproduce the bug (now fixed).\n     ",
      "child_ranges": [
        "(line 582,col 9)-(line 582,col 62)",
        "(line 583,col 9)-(line 592,col 10)",
        "(line 593,col 9)-(line 593,col 33)",
        "(line 596,col 9)-(line 610,col 9)",
        "(line 612,col 9)-(line 612,col 36)",
        "(line 613,col 9)-(line 613,col 30)",
        "(line 614,col 9)-(line 620,col 9)",
        "(line 621,col 9)-(line 621,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
      "begin_line": 628,
      "end_line": 675,
      "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
      "child_ranges": [
        "(line 630,col 9)-(line 630,col 62)",
        "(line 631,col 9)-(line 640,col 10)",
        "(line 641,col 9)-(line 641,col 47)",
        "(line 642,col 9)-(line 642,col 69)",
        "(line 643,col 9)-(line 643,col 77)",
        "(line 644,col 9)-(line 644,col 68)",
        "(line 645,col 9)-(line 645,col 76)",
        "(line 646,col 9)-(line 646,col 33)",
        "(line 649,col 9)-(line 663,col 9)",
        "(line 665,col 9)-(line 665,col 36)",
        "(line 666,col 9)-(line 666,col 30)",
        "(line 667,col 9)-(line 673,col 9)",
        "(line 674,col 9)-(line 674,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
      "begin_line": 682,
      "end_line": 733,
      "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
      "child_ranges": [
        "(line 683,col 9)-(line 683,col 63)",
        "(line 684,col 9)-(line 684,col 60)",
        "(line 685,col 9)-(line 685,col 58)",
        "(line 686,col 9)-(line 686,col 72)",
        "(line 687,col 9)-(line 687,col 77)",
        "(line 688,col 9)-(line 688,col 60)",
        "(line 689,col 9)-(line 689,col 58)",
        "(line 690,col 9)-(line 690,col 72)",
        "(line 691,col 9)-(line 691,col 63)",
        "(line 692,col 9)-(line 692,col 35)",
        "(line 693,col 9)-(line 693,col 41)",
        "(line 694,col 9)-(line 694,col 39)",
        "(line 695,col 9)-(line 695,col 37)",
        "(line 696,col 9)-(line 696,col 25)",
        "(line 697,col 9)-(line 710,col 9)",
        "(line 711,col 9)-(line 711,col 29)",
        "(line 715,col 9)-(line 715,col 66)",
        "(line 716,col 9)-(line 716,col 64)",
        "(line 717,col 9)-(line 717,col 76)",
        "(line 718,col 9)-(line 719,col 57)",
        "(line 720,col 9)-(line 720,col 66)",
        "(line 721,col 9)-(line 721,col 64)",
        "(line 722,col 9)-(line 722,col 76)",
        "(line 723,col 9)-(line 724,col 57)",
        "(line 725,col 9)-(line 725,col 45)",
        "(line 726,col 9)-(line 726,col 48)",
        "(line 727,col 9)-(line 727,col 47)",
        "(line 728,col 9)-(line 728,col 46)",
        "(line 729,col 9)-(line 729,col 45)",
        "(line 730,col 9)-(line 730,col 48)",
        "(line 731,col 9)-(line 731,col 47)",
        "(line 732,col 9)-(line 732,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
      "begin_line": 738,
      "end_line": 757,
      "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
      "child_ranges": [
        "(line 739,col 9)-(line 739,col 48)",
        "(line 740,col 9)-(line 740,col 48)",
        "(line 741,col 9)-(line 741,col 48)",
        "(line 742,col 9)-(line 742,col 48)",
        "(line 743,col 9)-(line 743,col 57)",
        "(line 744,col 9)-(line 744,col 57)",
        "(line 745,col 9)-(line 745,col 35)",
        "(line 746,col 9)-(line 746,col 31)",
        "(line 747,col 9)-(line 747,col 31)",
        "(line 748,col 9)-(line 748,col 31)",
        "(line 749,col 9)-(line 749,col 32)",
        "(line 751,col 9)-(line 751,col 32)",
        "(line 752,col 9)-(line 752,col 57)",
        "(line 753,col 9)-(line 753,col 57)",
        "(line 754,col 9)-(line 754,col 57)",
        "(line 755,col 9)-(line 755,col 59)",
        "(line 756,col 9)-(line 756,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
      "begin_line": 762,
      "end_line": 774,
      "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
      "child_ranges": [
        "(line 765,col 9)-(line 765,col 40)",
        "(line 766,col 9)-(line 766,col 40)",
        "(line 767,col 9)-(line 767,col 57)",
        "(line 768,col 9)-(line 768,col 35)",
        "(line 769,col 9)-(line 769,col 31)",
        "(line 770,col 9)-(line 770,col 31)",
        "(line 771,col 9)-(line 771,col 32)",
        "(line 772,col 9)-(line 772,col 59)",
        "(line 773,col 9)-(line 773,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
      "begin_line": 781,
      "end_line": 804,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
      "child_ranges": [
        "(line 784,col 9)-(line 784,col 67)",
        "(line 785,col 9)-(line 785,col 69)",
        "(line 786,col 9)-(line 786,col 69)",
        "(line 787,col 9)-(line 787,col 69)",
        "(line 788,col 9)-(line 788,col 69)",
        "(line 789,col 9)-(line 789,col 69)",
        "(line 790,col 9)-(line 790,col 69)",
        "(line 791,col 9)-(line 791,col 69)",
        "(line 792,col 9)-(line 792,col 69)",
        "(line 793,col 9)-(line 793,col 69)",
        "(line 794,col 9)-(line 794,col 70)",
        "(line 795,col 9)-(line 795,col 70)",
        "(line 796,col 9)-(line 796,col 70)",
        "(line 797,col 9)-(line 797,col 70)",
        "(line 798,col 9)-(line 798,col 70)",
        "(line 799,col 9)-(line 799,col 70)",
        "(line 801,col 9)-(line 801,col 76)",
        "(line 802,col 9)-(line 802,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
      "begin_line": 811,
      "end_line": 817,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
      "child_ranges": [
        "(line 813,col 9)-(line 813,col 51)",
        "(line 814,col 9)-(line 814,col 71)",
        "(line 815,col 9)-(line 815,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
      "begin_line": 823,
      "end_line": 833,
      "comment": "\n     * A test for a bug where setting the renderer doesn\u0027t register the plot\n     * as a RendererChangeListener.\n     ",
      "child_ranges": [
        "(line 824,col 9)-(line 824,col 35)",
        "(line 825,col 9)-(line 825,col 63)",
        "(line 826,col 9)-(line 826,col 35)",
        "(line 829,col 9)-(line 829,col 67)",
        "(line 830,col 9)-(line 830,col 41)",
        "(line 831,col 9)-(line 831,col 48)",
        "(line 832,col 9)-(line 832,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
      "begin_line": 838,
      "end_line": 856,
      "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
      "child_ranges": [
        "(line 839,col 9)-(line 839,col 35)",
        "(line 840,col 9)-(line 840,col 66)",
        "(line 841,col 9)-(line 841,col 66)",
        "(line 842,col 9)-(line 842,col 66)",
        "(line 843,col 9)-(line 843,col 31)",
        "(line 844,col 9)-(line 844,col 31)",
        "(line 845,col 9)-(line 845,col 31)",
        "(line 846,col 9)-(line 846,col 34)",
        "(line 847,col 9)-(line 847,col 77)",
        "(line 848,col 9)-(line 848,col 28)",
        "(line 852,col 9)-(line 852,col 34)",
        "(line 853,col 9)-(line 853,col 34)",
        "(line 854,col 9)-(line 854,col 60)",
        "(line 855,col 9)-(line 855,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
      "begin_line": 861,
      "end_line": 871,
      "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
      "child_ranges": [
        "(line 862,col 9)-(line 862,col 35)",
        "(line 863,col 9)-(line 863,col 40)",
        "(line 864,col 9)-(line 864,col 32)",
        "(line 865,col 9)-(line 866,col 45)",
        "(line 867,col 9)-(line 867,col 45)",
        "(line 868,col 9)-(line 868,col 34)",
        "(line 869,col 9)-(line 869,col 78)",
        "(line 870,col 9)-(line 870,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
      "begin_line": 876,
      "end_line": 886,
      "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
      "child_ranges": [
        "(line 877,col 9)-(line 877,col 35)",
        "(line 878,col 9)-(line 878,col 40)",
        "(line 879,col 9)-(line 879,col 31)",
        "(line 880,col 9)-(line 881,col 45)",
        "(line 882,col 9)-(line 882,col 45)",
        "(line 883,col 9)-(line 883,col 33)",
        "(line 884,col 9)-(line 884,col 78)",
        "(line 885,col 9)-(line 885,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
      "begin_line": 892,
      "end_line": 912,
      "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
      "child_ranges": [
        "(line 893,col 9)-(line 893,col 58)",
        "(line 894,col 9)-(line 895,col 71)",
        "(line 896,col 9)-(line 896,col 47)",
        "(line 897,col 9)-(line 897,col 58)",
        "(line 898,col 9)-(line 898,col 32)",
        "(line 899,col 9)-(line 910,col 9)",
        "(line 911,col 9)-(line 911,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
      "begin_line": 918,
      "end_line": 938,
      "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
      "child_ranges": [
        "(line 919,col 9)-(line 919,col 58)",
        "(line 920,col 9)-(line 921,col 71)",
        "(line 922,col 9)-(line 922,col 47)",
        "(line 923,col 9)-(line 923,col 31)",
        "(line 924,col 9)-(line 924,col 32)",
        "(line 925,col 9)-(line 936,col 9)",
        "(line 937,col 9)-(line 937,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
      "begin_line": 944,
      "end_line": 964,
      "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
      "child_ranges": [
        "(line 945,col 9)-(line 945,col 58)",
        "(line 946,col 9)-(line 946,col 79)",
        "(line 947,col 9)-(line 947,col 63)",
        "(line 948,col 9)-(line 949,col 71)",
        "(line 950,col 9)-(line 950,col 32)",
        "(line 951,col 9)-(line 962,col 9)",
        "(line 963,col 9)-(line 963,col 28)"
      ]
    }
  ]
}